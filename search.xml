<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[GitHub入门与实践]]></title>
      <url>http://tonnyl.github.io/2017/03/15/GitHub%E5%85%A5%E9%97%A8%E4%B8%8E%E5%AE%9E%E8%B7%B5/</url>
      <content type="html"><![CDATA[<p>欢迎来到GitHub的世界~<br><a id="more"></a></p>
<blockquote>
<p>本文同步发表于<a href="http://www.jianshu.com/p/f74b6900997b" target="_blank" rel="external">TonnyL的简书</a>, <a href="https://zhuanlan.zhihu.com/p/25960534" target="_blank" rel="external">知乎专栏</a>, <a href="https://tonnyl.github.io/2017/03/15/GitHub%E5%85%A5%E9%97%A8%E4%B8%8E%E5%AE%9E%E8%B7%B5/">TonnyL的博客</a>, 转载请注明作者和出处。</p>
</blockquote>
<h2 id="Welcome-to-GitHub"><a href="#Welcome-to-GitHub" class="headerlink" title="Welcome to GitHub"></a>Welcome to GitHub</h2><h3 id="什么是GitHub"><a href="#什么是GitHub" class="headerlink" title="什么是GitHub"></a>什么是GitHub</h3><p><a href="https://github.com/" target="_blank" rel="external">GitHub</a>是一个<del>同性交友社区</del>，不好意思，拿错剧本了。<a href="https://github.com/" target="_blank" rel="external">GitHub</a>在<a href="https://zh.wikipedia.org/wiki/Wikipedia:%E9%A6%96%E9%A1%B5" target="_blank" rel="external">Wikipedia</a>上的介绍是<a href="https://zh.wikipedia.org/wiki/GitHub" target="_blank" rel="external">这样</a>的：</p>
<blockquote>
<p>GitHub是一个通过<a href="https://zh.wikipedia.org/wiki/Git" target="_blank" rel="external">Git</a>进行<a href="https://zh.wikipedia.org/wiki/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6" target="_blank" rel="external">版本控制</a>的软件源代码托管服务，由GitHub公司（曾称Logical Awesome）的开发者Chris Wanstrath、PJ Hyett和Tom Preston-Werner使用<a href="https://zh.wikipedia.org/wiki/Ruby_on_Rails" target="_blank" rel="external">Ruby on Rails</a>编写而成。</p>
</blockquote>
<p>简单来说，GitHub是一个让开发者与他人共享代码的地方。其公司总部位于美国加利福利亚州旧金山，其logo是一只名为Octocat的可爱章鱼猫，就是下面的这个小萌萌了↓</p>
<p><img src="https://ww3.sinaimg.cn/large/006tNbRwgy1fdng5xb7ckj30m80ih1ky.jpg" alt="Octocat"></p>
<p>当然，她还有可能是这样的🙃<br><img src="https://ww1.sinaimg.cn/large/006tNbRwgy1fdngajog08j308c08cq33.jpg" alt="Octocat"></p>
<h3 id="GitHub与Git有什么区别"><a href="#GitHub与Git有什么区别" class="headerlink" title="GitHub与Git有什么区别"></a>GitHub与Git有什么区别</h3><p>Git其实是一种版本控制的协议，定义了一个版本控制的各种操作，类似的还有SVN/CVS，但是和SVN/CVS不同的是，Git采用的是分布式的方式，并不需要服务器端的软件。</p>
<p>而GitHub是基于Git协议的一个网络代码仓库，也就是说，GitHub上公开的软件源代码都是有Git进行管理，但是GitHub除了提供Git仓库的托管服务外，还为开发者或团队提供了一系列的功能(后面会详细说明)，例如在线浏览、搜索和管理、社交等等，帮助开发者和团队高效率、高品质的编写代码。</p>
<p>(好吧，说了这么多拗口的话，简单来说，你可以将Git与GitHub的关系理解为「魔兽争霸」和「对战平台」的关系。)</p>
<h3 id="GitHub的使用情况"><a href="#GitHub的使用情况" class="headerlink" title="GitHub的使用情况"></a>GitHub的使用情况</h3><p>截止到2015年，GitHub已经有超过九百万注册用户和2110万代码库。事实上已经成为了世界上最大的代码存放网站和开源社区。全世界每时每刻都有开发者在使用它。</p>
<h3 id="GitHub提供的主要功能"><a href="#GitHub提供的主要功能" class="headerlink" title="GitHub提供的主要功能"></a>GitHub提供的主要功能</h3><ul>
<li><p>Git仓库</p>
<p>一般情况下，当我们注册了GitHub账户之后，我们免费新建任意个GitHub提供的Git仓库。如果需要建立只对特定用户或自己公开的私有仓库，则需要按照<a href="https://github.com/pricing" target="_blank" rel="external">Plans for all workflows</a>支付每月最低7美元的费用。<br><img src="https://ww4.sinaimg.cn/large/006tNc79gy1fdomdvwo4kj31kw0zaal1.jpg" alt="Plans for all workflows"></p>
</li>
<li><p><a href="https://github.com/blog/674-introducing-organizations" target="_blank" rel="external">Organization</a></p>
<p>通常情况下，如果只是个人使用，个人账户就足够了。但如果是团队或者公司，建议使用Organization账户，它可以统一管理账户和权限，同时也能统一支付一些费用。</p>
<p>和个人账户类似，如果只是创建公开仓库，创建Organization账户是不收费的。因此，对于小型开发团队而言，Organization或许是个不错的选择。<br><img src="https://ww3.sinaimg.cn/large/006tNc79gy1fdomm5qn0tj30sq0o6q69.jpg" alt="Organization"></p>
<p>下面是Google Organization账户信息:<br><img src="https://ww2.sinaimg.cn/large/006tNc79gy1fdprpuqo8lj31kw119gz2.jpg" alt="Google Organization Account"></p>
</li>
<li><p>Issue</p>
<p>Issue用于对有一个任务或问题进行追踪和管理。这有点类似于BUG管理系统(例如Mozilla公司出品的<a href="https://bugzilla.mozilla.org/" target="_blank" rel="external">Bugzilla</a>)。在GitHub上，我们每次创建一个Pull Request时，都会要求创建一个Issue。</p>
<p>每次将要对功能进行更改或者修正时，都应该创建一个Issue(除非是有特殊的原因，最好使用英文，如果使用中文，项目所有者还需要耗费时间和精力替你翻译，而这本是你应该完成的事物)，讨论或者修正都围绕这个Issue为中心进行。只要查看Issue，就能了解和这个更改有关的信息，并以此进行管理。</p>
<p>在Git的提交信息中写上Issue的ID(例如「#7」)，GitHub就会自动生成从Issue到对应提交的链接。另外，只要按照特定的格式描述提交信息，还可以关闭Issue。</p>
<p>下面是<a href="https://github.com/google/gson" target="_blank" rel="external">google-gson</a>项目的一个Issue。<br><img src="https://ww4.sinaimg.cn/large/006tNc79gy1fdps9ly95bj31kw10348p.jpg" alt=""></p>
<p>ps:请不要在Issue中讨论和项目无关的内容(例如灌水、无意义的聊天等),也不要连着发帖,因为你每发布一次无意义的内容，项目的作者和关注(Watch)这个项目的人就会收到一封垃圾邮件。所以，请共同维护GitHub的良好氛围。</p>
</li>
<li><p>Wiki</p>
<p>通过Wiki功能，任何人都可以随时对一篇文章进行更改并保存，因此可以多人共同完成一篇文章。该功能常用于在开发文档或手册的编写中。</p>
<p>Wiki也是作为Git仓库进行管理的，改进的历史记录也会被切实保存，使用者可以放心的改写，并且支持克隆到本地进行编辑。</p>
<p>这是开源大户<a href="https://github.com/square" target="_blank" rel="external">square</a>的项目<a href="https://github.com/square/okhttp" target="_blank" rel="external">okhttp</a>的wiki首页:<br><img src="https://ww3.sinaimg.cn/large/006tKfTcgy1fdwyuitbj5j31kw101jw0.jpg" alt="[okhttp wiki](https://github.com/square/okhttp/wiki)"></p>
</li>
<li><p>Pull Request</p>
<p>当我们fork了别人的代码，并做了相应的修改之后，就可以Pull Request向仓库的所有者提出申请，请求对方合并自己修改之后的代码。发出Pull Request之后，对方的管理人员可以查看Pull Request的内容及其中包含的代码更改。</p>
<p>同时，你可以利用GitHub提供的对Pull Request和源代码差别评论的功能，以行为单位对代码进行讨论。</p>
<p>square的另外一个项目<a href="https://github.com/square/retrofit" target="_blank" rel="external">retrofit</a>的<a href="https://github.com/square/retrofit/pulls" target="_blank" rel="external">Pull Request</a>:<br><img src="https://ww4.sinaimg.cn/large/006tKfTcgy1fdwyzenqh6j31kw11gdpa.jpg" alt="[Pull Request](https://github.com/square/retrofit/pulls)"></p>
</li>
<li><p><a href="https://gist.github.com/" target="_blank" rel="external">Gist</a></p>
<p>有时候我们并不需要为了一个小小的代码片段而开启一个仓库，这个时候Gist就派上用场了。Gist是一个有趣的服务，最简单的功能就是分享代码片段，但她的功能并不局限于此，Gist并不仅仅为开发者服务，任何人(允许匿名)都可以利用她分享内容。</p>
</li>
<li><p><a href="https://pages.github.com/" target="_blank" rel="external">GitHub Pages</a></p>
<p>GitHub Pages 是免费的静态空间服务，可以架设静态网站，包括静态博客。我们可以利用GitHub Pages搭配<a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>或者<a href="https://jekyllrb.com/" target="_blank" rel="external">Jekyll</a>等静态博客系统搭建我们自己的博客。</p>
<p>这是我利用GitHub Pages和Hexo搭配的博客:<br><a href="https://tonnyl.github.io/">https://tonnyl.github.io/</a></p>
</li>
</ul>
<h3 id="GitHub上的一些知名项目"><a href="#GitHub上的一些知名项目" class="headerlink" title="GitHub上的一些知名项目"></a>GitHub上的一些知名项目</h3><ul>
<li><a href="https://github.com/torvalds/linux" target="_blank" rel="external">Linux</a> - Linux kernel source tree.(43k star, 无穷个贡献者)</li>
<li><a href="https://github.com/git/git" target="_blank" rel="external">Git</a></li>
<li><a href="https://github.com/nodejs/node" target="_blank" rel="external">node</a> - Node.js JavaScript runtime.</li>
<li><a href="https://github.com/rails/rails" target="_blank" rel="external">rails</a> - Ruby on Rails.</li>
</ul>
<h3 id="彩蛋"><a href="#彩蛋" class="headerlink" title="彩蛋"></a>彩蛋</h3><p><img src="https://ww1.sinaimg.cn/large/006tKfTcgy1fdx06fy4drj30us0q8q8x.jpg" alt="[GitHub](https://github.com/TonnyL)"></p>
<p>GitHub，同性交友，真人约会，排解寂寞，释放压力。百分百真人，谁没事会去注册GitHub啊，通过“Follow”交到同性好友；通过Issue和PR互动和交流。So, f**k, oh no, follow me on GitHub。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[如何用一周时间开发一款Android APP并在Google Play上线]]></title>
      <url>http://tonnyl.github.io/2017/02/08/%E5%A6%82%E4%BD%95%E7%94%A8%E4%B8%80%E5%91%A8%E6%97%B6%E9%97%B4%E5%BC%80%E5%8F%91%E4%B8%80%E6%AC%BEAndroid-APP%E5%B9%B6%E5%9C%A8Google-Play%E4%B8%8A%E7%BA%BF/</url>
      <content type="html"><![CDATA[<p>目标：实现<a href="https://github.com/TonnyL/PaperPlane" target="_blank" rel="external">纸飞机</a>App - 采用MVP架构，集合了知乎日报、果壳精选和豆瓣一刻的综合性阅读客户端。效果图如下所示：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2440049-75f9c938a87c3c46.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="PaperPlane"></p>
<p>本次教程分为7天，内容分别为：</p>
<ul>
<li>第一天，准备<ul>
<li>功能需求</li>
<li>可行性分析</li>
<li>其他准备</li>
</ul>
</li>
<li>第二天，UI<ul>
<li>选择合适的UI</li>
</ul>
</li>
<li>第三天，整体架构</li>
<li>第四天，首页列表<ul>
<li>界面编写</li>
<li>实体类</li>
<li>显示数据</li>
<li>缓存内容</li>
</ul>
</li>
<li>第五天，详情页与其他<ul>
<li>界面编写</li>
<li>实体类</li>
<li>显示数据</li>
<li>设置与关于</li>
</ul>
</li>
<li>第六天，高级功能<ul>
<li>文章收藏</li>
<li>夜间模式</li>
<li>版本适配</li>
</ul>
</li>
<li>第七天，发布与开源<ul>
<li>在Google Play上线</li>
<li>在GitHub开源</li>
<li>Q&amp;A</li>
</ul>
</li>
</ul>
<p>好了，废话不多说了。现在就开始吧。</p>
<h3 id="DAY-1"><a href="#DAY-1" class="headerlink" title="DAY 1"></a>DAY 1</h3><p>俗话说，万事开头难，准备工作做好了，可以起到事半功倍的作用。磨刀不误砍柴工嘛。</p>
<h4 id="Day-1-功能需求"><a href="#Day-1-功能需求" class="headerlink" title="Day 1,功能需求"></a>Day 1,功能需求</h4><p>在开始正式编码之前，咱们还是得先把要实现的功能一一列出来，后面实现起来才有方向嘛。我认为咱们需要实现的功能有：</p>
<ul>
<li>正确获取消息列表并展示</li>
<li>能够获取历史消息</li>
<li>展示内容详情</li>
<li>后台自动缓存内容详情，方便用户在无网络连接时查看</li>
<li>收藏特定消息</li>
<li>夜间模式</li>
</ul>
<p>一共6个大的需求，不多，但是我们仔细的研究一下，实际上这6个需求涉及到了网络，UI，数据存储，后台服务等内容。相信对于聪明的你不算困难，现在我们来研究一下可行性。</p>
<h4 id="Day-1，可行性分析"><a href="#Day-1，可行性分析" class="headerlink" title="Day 1，可行性分析"></a>Day 1，可行性分析</h4><p>我们首先需要考虑的问题就是：<strong>数据从哪里来？</strong>感谢开源，GitHub上<a href="https://github.com/izzyleung" target="_blank" rel="external">izzyleung</a>大神分析了知乎日报的API并开源了，项目地址请戳这里：<a href="https://github.com/izzyleung/ZhihuDailyPurify/wiki/%E7%9F%A5%E4%B9%8E%E6%97%A5%E6%8A%A5-API-%E5%88%86%E6%9E%90" target="_blank" rel="external">知乎日报 API 分析</a>，分析的非常详细，纸飞机项目在初期，也就是版本3.0之前也只使用了这一个API，在3.0之后还使用果壳精选和豆瓣一刻的API。如果你还想要展示更多的内容，可以戳这里：<a href="https://github.com/TonnyL/Awesome_APIs" target="_blank" rel="external">Awsome_API</a>，收集了一些国内外常用的API。</p>
<p>我们来粗略的看一下数据的内容。获取知乎日报2017年1月22日的消息列表：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://news-at.zhihu.com/api/4/news/before/20170122</div></pre></td></tr></table></figure>
<p>服务器向我们返回JSON格式的内容：</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"date"</span>: <span class="string">"20170121"</span>,</div><div class="line">  <span class="attr">"stories"</span>: [</div><div class="line">    &#123;</div><div class="line">      <span class="attr">"images"</span>: [</div><div class="line">        <span class="string">"http://pic1.zhimg.com/ffcca2b2853f2af791310e6a6d694e80.jpg"</span></div><div class="line">      ],</div><div class="line">      <span class="attr">"type"</span>: <span class="number">0</span>,</div><div class="line">      <span class="attr">"id"</span>: <span class="number">9165434</span>,</div><div class="line">      <span class="attr">"ga_prefix"</span>: <span class="string">"012121"</span>,</div><div class="line">      <span class="attr">"title"</span>: <span class="string">"谁说普通人的生活就不能精彩有趣呢？"</span></div><div class="line">    &#125;,</div><div class="line">    ...</div><div class="line">    ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>OK，获取到了列表之后，我们就可以获取详细的内容了，例如，我们获取id为9165434的内容，只需要将id拼接到<code>http://news-at.zhihu.com/api/4/news/</code>之后：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://news-at.zhihu.com/api/4/news/9165434</div></pre></td></tr></table></figure>
<p>获取到的内容为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  &quot;body&quot;: &quot;html格式的内容&quot;,</div><div class="line">  &quot;image_source&quot;: &quot;《帕特森》&quot;,</div><div class="line">  &quot;title&quot;: &quot;谁说普通人的生活就不能精彩有趣呢？&quot;,</div><div class="line">  &quot;image&quot;: &quot;http://pic4.zhimg.com/e39083107b7324c6dbb725da83b1d7fb.jpg&quot;,</div><div class="line">  &quot;share_url&quot;: &quot;http://daily.zhihu.com/story/9165434&quot;,</div><div class="line">  &quot;js&quot;: [],</div><div class="line">  &quot;ga_prefix&quot;: &quot;012121&quot;,</div><div class="line">  &quot;section&quot;: &#123;</div><div class="line">    &quot;thumbnail&quot;: &quot;http://pic1.zhimg.com/ffcca2b2853f2af791310e6a6d694e80.jpg&quot;,</div><div class="line">    &quot;id&quot;: 28,</div><div class="line">    &quot;name&quot;: &quot;放映机&quot;</div><div class="line">  &#125;,</div><div class="line">  &quot;images&quot;: [</div><div class="line">    &quot;http://pic1.zhimg.com/ffcca2b2853f2af791310e6a6d694e80.jpg&quot;</div><div class="line">  ],</div><div class="line">  &quot;type&quot;: 0,</div><div class="line">  &quot;id&quot;: 9165434,</div><div class="line">  &quot;css&quot;: [</div><div class="line">    &quot;http://news-at.zhihu.com/css/news_qa.auto.css?v=4b3e3&quot;</div><div class="line">  ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>body</code>字段中就是html格式的内容详情，我们就可以使用WebView来展示了。当然，知乎日报的API接口不止上面的两个，你可以点击上面的链接查看。获取果壳精选和豆瓣一刻的内容，你可以在我的项目中直接查看文件<a href="https://github.com/TonnyL/PaperPlane/blob/master/app/src/main/java/com/marktony/zhihudaily/util/Api.java" target="_blank" rel="external">Api</a>。</p>
<h4 id="Day-1，其他准备"><a href="#Day-1，其他准备" class="headerlink" title="Day 1，其他准备"></a>Day 1，其他准备</h4><p>工欲善其事，必先利其器。工具准备好总是没错的。</p>
<ul>
<li>一台电脑 这个怎么说呢，没有这个的话，要进行开发工作还是很难的，咱们总不能用石器写代码吧。</li>
<li>软件：<ul>
<li><a href="https://developer.android.com/studio/index.html" target="_blank" rel="external">Android Studio</a> 标配</li>
<li><a href="https://www.google.com/chrome/" target="_blank" rel="external">Chrome</a> 程序员用360浏览器，百度浏览器什么的总觉得有点不够GEEK。</li>
<li><a href="https://www.getpostman.com/docs/introduction" target="_blank" rel="external">Postman</a> 一款功能强大的网页调试与发送网页HTTP请求的Chrome插件，我们做网络请求分析时需要用到。</li>
<li><a href="https://www.genymotion.com/" target="_blank" rel="external">Genymotion</a> 如果你嫌AS自带的模拟器慢的话，可以试试这个。</li>
<li><a href="https://git-scm.com/" target="_blank" rel="external">Git</a> 版本控制，命令行敲起来炒鸡带感哦。</li>
</ul>
</li>
<li>最好是能有一台Android手机。</li>
<li>科学上网，确保能够正常访问Google和StackOverFlow。让百度去死吧。</li>
</ul>
<p>好了，第一天的工作差不多就是这么多，熟悉一下API，把工具备好，收拾一下心情，准备明天的工作。</p>
<h3 id="DAY-2"><a href="#DAY-2" class="headerlink" title="DAY 2"></a>DAY 2</h3><p>今天主要完成的是UI设计。你可能会问了，这不是设计师的工作么。然而，我在开发纸飞机的过程中，并没有射鸡湿这种生物，UI就我自己完成了。相信大多数的程序员，美术方面应该不是那么地擅长。</p>
<p>当然，有美术和相关基础的同学可以试试用Sketch或者PS把原型图画出来，对于没有美术基础的童鞋，最简单的方法当然就是模仿现成的APP了。当然，你也可以在下列网站寻找合适的设计图：</p>
<ul>
<li><a href="https://dribbble.com/" target="_blank" rel="external">Dribbble</a></li>
<li><a href="https://www.uplabs.com/" target="_blank" rel="external">UpLabs</a></li>
<li><a href="http://www.ui.cn/" target="_blank" rel="external">UI中国</a></li>
<li><a href="http://www.zcool.com.cn/" target="_blank" rel="external">站酷ZCOOL</a></li>
</ul>
<p>另外，还有一些小的注意事项：</p>
<ul>
<li>遵守<a href="https://material.io/guidelines/" target="_blank" rel="external">Material Design设计规范</a> - 这不是强制性的要求，但是，既然我们是开发一款Android App，如果我们自己都不遵守规范，还怎么指望Android环境变好呢。</li>
<li><strong>正确使用BottomNavigation</strong> - BottomNavigation作为Google的打脸之作，诞生之初就倍受争议。我个人的建议是使用TabLayout代替底部导航，这是涉及到信仰的大事情。如果一定要用，请不要把iOS上的标准直接放在Android上使用，请参考这一篇文章:<a href="https://zhuanlan.zhihu.com/p/22005972" target="_blank" rel="external">Material Design 中的 Bottom Navigation 并不是无脑移植 iOS 导航模式的许可证</a>,并且，我向你投来一个鄙视的眼神。</li>
<li>使用正确的图标 - 尽量使用 <a href="https://material.io/icons/" target="_blank" rel="external">https://material.io/icons/</a> 网站上的图标，如果你使用iOS版本的图标，我再次向你投来一个鄙视的眼神。</li>
</ul>
<p>纸飞机的最终设计效果如下：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2440049-75f9c938a87c3c46.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="PaperPlane"></p>
<p>首页使用Drawer作为顶级导航，Tab为二级导航，列表项使用卡牌布局，使用FloatingActionButton作为日期选择按钮；详情页面使用可收缩的Toolbar，图片搭配文字的形式。其他高深的我也不懂了。(到后面你会发现，这里我犯了一个错误，卡牌布局用在这里是不合适的。参见：<a href="https://material.io/guidelines/components/cards.html#cards-usage" target="_blank" rel="external">https://material.io/guidelines/components/cards.html#cards-usage</a>)</p>
<h3 id="DAY-3"><a href="#DAY-3" class="headerlink" title="DAY 3"></a>DAY 3</h3><p>现在开始就要真正的写代码了。</p>
<p>新建Android Studio项目什么的就不说了，下面的是我的项目结构图：</p>
<p><img src="https://ww2.sinaimg.cn/large/006y8lVagy1fcfh31l5g1j30ni14qdk8.jpg" alt="项目结构"></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">·</div><div class="line">├── app</div><div class="line">|   ├── libs 存放相关的jar文件等</div><div class="line">|   ├── src</div><div class="line">|   |   ├── androidTest 测试相关目录</div><div class="line">|   |   ├── main</div><div class="line">|   |   |   ├── assets 存放资源原文件</div><div class="line">|   |   |   ├── java</div><div class="line">|   |   |   |   ├── com.marktony.zhihudaily java包</div><div class="line">|   |   |   |   |   ├── about 关于页面</div><div class="line">|   |   |   |   |   ├── adapter RecyclerView与ViewPager等控件的Adapter</div><div class="line">|   |   |   |   |   ├── app Application</div><div class="line">|   |   |   |   |   ├── bean 存放实体类</div><div class="line">|   |   |   |   |   ├── bookmarks 收藏页面</div><div class="line">|   |   |   |   |   ├── customtabs Chrome Custom Tabs相关</div><div class="line">|   |   |   |   |   ├── db 数据库相关</div><div class="line">|   |   |   |   |   ├── detail 详细内容页面</div><div class="line">|   |   |   |   |   ├── homepage 首页页面</div><div class="line">|   |   |   |   |   ├── innerbrowser 内置浏览器页面</div><div class="line">|   |   |   |   |   ├── interfaze 接口集合</div><div class="line">|   |   |   |   |   ├── license 开源许可证页面</div><div class="line">|   |   |   |   |   ├── search 搜索页面</div><div class="line">|   |   |   |   |   ├── service Service集合</div><div class="line">|   |   |   |   |   ├── settings 设置页面</div><div class="line">|   |   |   |   |   ├── util 工具类集合</div><div class="line">|   |   |   |   |   ├── BasePresenter.java Presenter基类</div><div class="line">|   |   |   |   |   ├── BaseView.java View基类</div><div class="line">|   |   |   ├── res</div><div class="line">|   |   |   ├── AndroidManifest.xml 清单文件</div></pre></td></tr></table></figure>
<p>(不难看出，我是按照页面和功能进行分包的。)</p>
<p>包建立完成后，我们开始导入第三方的开源库，便于简化代码的编写和实现特定的效果。找到工程目录下app文件夹，打开<code>build.gradle</code>文件，添加如下内容。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">dependencies &#123;</div><div class="line">    compile fileTree(include: [&apos;*.jar&apos;], dir: &apos;libs&apos;)</div><div class="line">    // 使用volley简化网络请求</div><div class="line">    compile files(&apos;libs/library-1.0.19.jar&apos;)</div><div class="line">    // appcompat兼容包</div><div class="line">    compile &apos;com.android.support:appcompat-v7:25.1.0&apos;</div><div class="line">    // material design 设计包</div><div class="line">    compile &apos;com.android.support:design:25.1.0&apos;</div><div class="line">    // recycler view控件</div><div class="line">    compile &apos;com.android.support:recyclerview-v7:25.1.0&apos;</div><div class="line">    // preference screen 设置和关于页面的配置</div><div class="line">    compile &apos;com.android.support:preference-v14:25.1.0&apos;</div><div class="line">    // 支持Chrome Custom Tabs</div><div class="line">    compile &apos;com.android.support:customtabs:25.1.0&apos;</div><div class="line">    // card view 控件</div><div class="line">    compile &apos;com.android.support:cardview-v7:25.1.0&apos;</div><div class="line">    // 解析JSON数据</div><div class="line">    compile &apos;com.google.code.gson:gson:2.7&apos;</div><div class="line">    // 图片加载</div><div class="line">    compile &apos;com.github.bumptech.glide:glide:3.7.0&apos;</div><div class="line">    // 为了保持在低版本SDK中的UI一致性，引入material data time picker库</div><div class="line">    compile &apos;com.wdullaer:materialdatetimepicker:2.5.0&apos;</div><div class="line">    testCompile &apos;junit:junit:4.12&apos;</div></pre></td></tr></table></figure>
<p>由于一些历史遗留问题，我并没有使用OkHttp作为网络请求包，而是选择了volley。如果你有一定的基础，可以选择使用OkHttp。</p>
<p>导入volley有两种方式：</p>
<ul>
<li><p>在<code>app</code>目录下的<code>lib</code>目录下粘贴volley的jar包，你可以在这里下载到：<a href="https://github.com/TonnyL/PaperPlane/blob/master/app/libs/library-1.0.19.jar" target="_blank" rel="external">Volley</a>。</p>
</li>
<li><p>当然也可以通过gradle引入。</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">compile &apos;com.android.volley:volley:1.0.0&apos;</div></pre></td></tr></table></figure>
<p>然后点击Sync Project with Gradle files。</p>
<p>首先是整体的架构：MVP。关于整体架构的选择以及更加详细的介绍部分，可以戳这篇文章:<a href="https://TonnyL.github.io/2016/09/27/%E9%87%8D%E6%9E%84%EF%BC%81%E5%B0%86Google-MVP%E5%BA%94%E7%94%A8%E4%BA%8E%E5%B7%B2%E6%9C%89%E9%A1%B9%E7%9B%AE/">重构！将Google-MVP应用于已有项目</a>。这里我们仿照Google的<a href="https://github.com/googlesamples/android-architecture" target="_blank" rel="external">Android Architecture Blueprints [beta]</a>中的<a href="https://github.com/googlesamples/android-architecture/tree/todo-mvp/" target="_blank" rel="external">todo-mvp</a>。</p>
<ol>
<li><p>首先创建最基本的BaseView和BasePresenter,他们分别是所有View和Presenter的基类。</p>
<p> <a href="https://github.com/TonnyL/PaperPlane/blob/master/app/src/main/java/com/marktony/zhihudaily/BaseView.java" target="_blank" rel="external">Baseview.java</a></p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BaseView</span>&lt;<span class="title">T</span>&gt; </span>&#123;</div><div class="line">	<span class="comment">// 为View设置Presenter</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setPresenter</span><span class="params">(T presenter)</span></span>;</div><div class="line">   <span class="comment">// 初始化界面控件</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">initViews</span><span class="params">(View view)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p> <a href="https://github.com/TonnyL/PaperPlane/blob/master/app/src/main/java/com/marktony/zhihudaily/BasePresenter.java" target="_blank" rel="external">BasePresenter.java</a></p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BasePresenter</span> </span>&#123;</div><div class="line">	<span class="comment">// 获取数据并改变界面显示，在todo-mvp的项目中的调用时机为Fragment的OnResume()方法中</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">start</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>然后创建一个契约类，用于同一管理View和Presenter。这里以知乎日报的部分为例(如果没有特别说明，后面的代码均以知乎日报的部分为例，果壳精选与豆瓣一刻的代码类似，详细代码可以在GitHub的repo中找到)。</p>
<p> <a href="https://github.com/TonnyL/PaperPlane/blob/master/app/src/main/java/com/marktony/zhihudaily/homepage/ZhihuDailyContract.java" target="_blank" rel="external">ZhihuDailyContract.java</a></p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ZhihuDailyContract</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="class"><span class="keyword">interface</span> <span class="title">View</span> <span class="keyword">extends</span> <span class="title">BaseView</span>&lt;<span class="title">Presenter</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">		<span class="comment">// 显示加载或其他类型的错误</span></div><div class="line">        <span class="function"><span class="keyword">void</span> <span class="title">showError</span><span class="params">()</span></span>;</div><div class="line">		<span class="comment">// 显示正在加载</span></div><div class="line">        <span class="function"><span class="keyword">void</span> <span class="title">showLoading</span><span class="params">()</span></span>;</div><div class="line">		<span class="comment">// 停止显示正在加载</span></div><div class="line">        <span class="function"><span class="keyword">void</span> <span class="title">stopLoading</span><span class="params">()</span></span>;</div><div class="line">		<span class="comment">// 成功获取到数据后，在界面中显示</span></div><div class="line">        <span class="function"><span class="keyword">void</span> <span class="title">showResults</span><span class="params">(ArrayList&lt;ZhihuDailyNews.Question&gt; list)</span></span>;</div><div class="line">		<span class="comment">// 显示用于加载指定日期的date picker dialog</span></div><div class="line">        <span class="function"><span class="keyword">void</span> <span class="title">showPickDialog</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="class"><span class="keyword">interface</span> <span class="title">Presenter</span> <span class="keyword">extends</span> <span class="title">BasePresenter</span> </span>&#123;</div><div class="line">		<span class="comment">// 请求数据</span></div><div class="line">        <span class="function"><span class="keyword">void</span> <span class="title">loadPosts</span><span class="params">(<span class="keyword">long</span> date, <span class="keyword">boolean</span> clearing)</span></span>;</div><div class="line">		<span class="comment">// 刷新数据</span></div><div class="line">        <span class="function"><span class="keyword">void</span> <span class="title">refresh</span><span class="params">()</span></span>;</div><div class="line">		<span class="comment">// 加载更多文章</span></div><div class="line">        <span class="function"><span class="keyword">void</span> <span class="title">loadMore</span><span class="params">(<span class="keyword">long</span> date)</span></span>;</div><div class="line">		<span class="comment">// 显示详情</span></div><div class="line">        <span class="function"><span class="keyword">void</span> <span class="title">startReading</span><span class="params">(<span class="keyword">int</span> position)</span></span>;</div><div class="line">		<span class="comment">// 随便看看</span></div><div class="line">        <span class="function"><span class="keyword">void</span> <span class="title">feelLucky</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>在上面已经分好的子包中，创建相应的子类View和Presenter。</p>
<p> <a href="https://github.com/TonnyL/PaperPlane/blob/master/app/src/main/java/com/marktony/zhihudaily/homepage/ZhihuDailyFragment.java" target="_blank" rel="external">ZhihuDailyFragment.java</a></p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZhihuDailyFragment</span> <span class="keyword">extends</span> <span class="title">Fragment</span></span></div><div class="line">    <span class="keyword">implements</span> <span class="title">ZhihuDailyContract</span>.<span class="title">View</span> &#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ZhihuDailyFragment</span><span class="params">()</span> </span>&#123;&#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ZhihuDailyFragment <span class="title">newInstance</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ZhihuDailyFragment();</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">    	<span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Nullable</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> View <span class="title">onCreateView</span><span class="params">(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPresenter</span><span class="params">(ZhihuDailyContract.Presenter presenter)</span> </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initViews</span><span class="params">(View view)</span> </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showError</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showLoading</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stopLoading</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showResults</span><span class="params">(ArrayList&lt;ZhihuDailyNews.Question&gt; list)</span> </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showPickDialog</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p> <a href="https://github.com/TonnyL/PaperPlane/blob/master/app/src/main/java/com/marktony/zhihudaily/homepage/ZhihuDailyPresenter.java" target="_blank" rel="external">ZhihuDailyPresenter.java</a></p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZhihuDailyPresenter</span> <span class="keyword">implements</span> <span class="title">ZhihuDailyContract</span>.<span class="title">Presenter</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">ZhihuDailyPresenter</span><span class="params">(Context context, ZhihuDailyContract.View view)</span> </span>&#123;</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">loadPosts</span><span class="params">(<span class="keyword">long</span> date, <span class="keyword">final</span> <span class="keyword">boolean</span> clearing)</span> </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">refresh</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">loadMore</span><span class="params">(<span class="keyword">long</span> date)</span> </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startReading</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">feelLucky</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p> 然后完成果壳精选页面，豆瓣一刻的内容，就可以进行下面的工作了。</p>
</li>
<li><p>创建VolleySingleton，即Volley的单例。这样，整个应用就可以只维护一个请求队列，加入新的网络请求也会更加的方便。</p>
<p> <a href="https://github.com/TonnyL/PaperPlane/blob/master/app/src/main/java/com/marktony/zhihudaily/app/VolleySingleton.java" target="_blank" rel="external">VolleySingleton.java</a></p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">	<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VolleySingleton</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> VolleySingleton volleySingleton;</div><div class="line">    <span class="keyword">private</span> RequestQueue requestQueue;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">VolleySingleton</span><span class="params">(Context context)</span></span>&#123;</div><div class="line">        requestQueue = Volley.newRequestQueue(context.getApplicationContext());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> VolleySingleton <span class="title">getVolleySingleton</span><span class="params">(Context context)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span>(volleySingleton == <span class="keyword">null</span>)&#123;</div><div class="line">            volleySingleton = <span class="keyword">new</span> VolleySingleton(context);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> volleySingleton;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> RequestQueue <span class="title">getRequestQueue</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.requestQueue;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function"><span class="keyword">void</span> <span class="title">addToRequestQueue</span><span class="params">(Request&lt;T&gt; req)</span></span>&#123;</div><div class="line">        getRequestQueue().add(req);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>然后是Model层的实现。使用了Gson之后，对JSON的转换更加方便了，所以，我们只需要返回类型为String即可。</p>
<p> <a href="https://github.com/TonnyL/PaperPlane/blob/master/app/src/main/java/com/marktony/zhihudaily/interfaze/OnStringListener.java" target="_blank" rel="external">OnStringListener.java</a></p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OnStringListener</span> </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 请求成功时回调</div><div class="line">     * <span class="doctag">@param</span> result</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onSuccess</span><span class="params">(String result)</span></span>;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 请求失败时回调</div><div class="line">     * <span class="doctag">@param</span> error</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onError</span><span class="params">(VolleyError error)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p> 定义了两个方法，分别为请求成功时和请求失败时的回调。</p>
<p> 然后定义一个StringModel的实现类–StringModelImpl。</p>
<p> <a href="https://github.com/TonnyL/PaperPlane/blob/master/app/src/main/java/com/marktony/zhihudaily/bean/StringModelImpl.java" target="_blank" rel="external">StringModelImpl.java</a></p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringModelImpl</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> Context context;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">StringModelImpl</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.context = context;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">load</span><span class="params">(String url, <span class="keyword">final</span> OnStringListener listener)</span> </span>&#123;</div><div class="line">        StringRequest request = <span class="keyword">new</span> StringRequest(url, <span class="keyword">new</span> Response.Listener&lt;String&gt;() &#123;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(String s)</span> </span>&#123;</div><div class="line">                listener.onSuccess(s);</div><div class="line">            &#125;</div><div class="line">        &#125;, <span class="keyword">new</span> Response.ErrorListener() &#123;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onErrorResponse</span><span class="params">(VolleyError volleyError)</span> </span>&#123;</div><div class="line">                listener.onError(volleyError);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        VolleySingleton.getVolleySingleton(context).addToRequestQueue(request);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>到这里，基本的架构就搭建完成了。现在可以喝杯咖啡，然后完成今天的最后一点工作，为后面的工作做准备。</p>
<p>创建<code>Api.java</code>文件，用于存储app所用到的所有API。</p>
<p><a href="https://github.com/TonnyL/PaperPlane/blob/master/app/src/main/java/com/marktony/zhihudaily/util/Api.java" target="_blank" rel="external">Api.java</a></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Api</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="comment">// 消息内容获取与离线下载</span></div><div class="line">	<span class="comment">// 在最新消息中获取到的id，拼接到这个NEWS之后，可以获得对应的JSON格式的内容</span></div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String ZHIHU_NEWS = <span class="string">"http://news-at.zhihu.com/api/4/news/"</span>;</div><div class="line"></div><div class="line">	<span class="comment">// 过往消息</span></div><div class="line">	<span class="comment">// 若要查询的11月18日的消息，before后面的数字应该为20161118</span></div><div class="line">   	<span class="comment">// 知乎日报的生日为2013 年 5 月 19 日，如果before后面的数字小于20130520，那么只能获取到空消息</span></div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String ZHIHU_HISTORY = <span class="string">"http://news.at.zhihu.com/api/4/news/before/"</span>;</div><div class="line"></div><div class="line">	<span class="comment">// 获取果壳精选的文章列表,通过组合相应的参数成为完整的url</span></div><div class="line">   	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String GUOKR_ARTICLES = <span class="string">"http://apis.guokr.com/handpick/article.json?retrieve_type=by_since&amp;category=all&amp;limit=25&amp;ad=1"</span>;</div><div class="line"></div><div class="line">   	<span class="comment">// 获取果壳文章的具体信息 V1</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String GUOKR_ARTICLE_LINK_V1 = <span class="string">"http://jingxuan.guokr.com/pick/"</span>;</div><div class="line"></div><div class="line">	<span class="comment">// 豆瓣一刻</span></div><div class="line">    <span class="comment">// 根据日期查询消息列表</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DOUBAN_MOMENT = <span class="string">"https://moment.douban.com/api/stream/date/"</span>;</div><div class="line"></div><div class="line">    <span class="comment">// 获取文章具体内容</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DOUBAN_ARTICLE_DETAIL = <span class="string">"https://moment.douban.com/api/post/"</span>;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>创建<code>NetworkState.java</code>文件，判断当前的网络状态，是否有网络连接，WiFi或者是移动数据。</p>
<p><a href="https://github.com/TonnyL/PaperPlane/blob/master/app/src/main/java/com/marktony/zhihudaily/util/NetworkState.java" target="_blank" rel="external">NetworkState.java</a></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NetworkState</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">// 检查是否连接到网络</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">networkConnected</span><span class="params">(Context context)</span></span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (context != <span class="keyword">null</span>)&#123;</div><div class="line">            ConnectivityManager manager = (ConnectivityManager) context.getSystemService(Context.CONNECTIVITY_SERVICE);</div><div class="line">            NetworkInfo info = manager.getActiveNetworkInfo();</div><div class="line">            <span class="keyword">if</span> (info != <span class="keyword">null</span>)</div><div class="line">                <span class="keyword">return</span> info.isAvailable();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 检查WiFi是否连接</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">wifiConnected</span><span class="params">(Context context)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span> (context != <span class="keyword">null</span>)&#123;</div><div class="line">            ConnectivityManager manager = (ConnectivityManager) context.getSystemService(Context.CONNECTIVITY_SERVICE);</div><div class="line">            NetworkInfo info = manager.getActiveNetworkInfo();</div><div class="line">            <span class="keyword">if</span> (info != <span class="keyword">null</span>)&#123;</div><div class="line">                <span class="keyword">if</span> (info.getType() == ConnectivityManager.TYPE_WIFI)</div><div class="line">                    <span class="keyword">return</span> info.isAvailable();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 检查移动网络是否连接</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">mobileDataConnected</span><span class="params">(Context context)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span> (context != <span class="keyword">null</span>)&#123;</div><div class="line">            ConnectivityManager manager = (ConnectivityManager) context.getSystemService(Context.CONNECTIVITY_SERVICE);</div><div class="line">            NetworkInfo info = manager.getActiveNetworkInfo();</div><div class="line">            <span class="keyword">if</span> (info != <span class="keyword">null</span>)&#123;</div><div class="line">                <span class="keyword">if</span> (info.getType() == ConnectivityManager.TYPE_MOBILE)</div><div class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>创建<code>DateFormatter .java</code>文件，方便将<code>long</code>类型的日期转换为<code>String</code>类型。</p>
<p><a href="https://github.com/TonnyL/PaperPlane/blob/master/app/src/main/java/com/marktony/zhihudaily/util/DateFormatter.java" target="_blank" rel="external">DateFormatter.java</a></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DateFormatter</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 将long类date转换为String类型</div><div class="line">     * <span class="doctag">@param</span> date date</div><div class="line">     * <span class="doctag">@return</span> String date</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">ZhihuDailyDateFormat</span><span class="params">(<span class="keyword">long</span> date)</span> </span>&#123;</div><div class="line">        String sDate;</div><div class="line">        Date d = <span class="keyword">new</span> Date(date + <span class="number">24</span>*<span class="number">60</span>*<span class="number">60</span>*<span class="number">1000</span>);</div><div class="line">        SimpleDateFormat format = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyyMMdd"</span>);</div><div class="line">        sDate = format.format(d);</div><div class="line"></div><div class="line">        <span class="keyword">return</span> sDate;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">DoubanDateFormat</span><span class="params">(<span class="keyword">long</span> date)</span></span>&#123;</div><div class="line">        String sDate;</div><div class="line">        Date d = <span class="keyword">new</span> Date(date);</div><div class="line">        SimpleDateFormat format = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd"</span>);</div><div class="line">        sDate = format.format(d);</div><div class="line"></div><div class="line">        <span class="keyword">return</span> sDate;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>OK，day 3工作完成。</p>
</li>
</ol>
<h3 id="DAY-4"><a href="#DAY-4" class="headerlink" title="DAY 4"></a>DAY 4</h3><p>今天的只要任务是完成首页。</p>
<h4 id="Day-4，界面编写"><a href="#Day-4，界面编写" class="headerlink" title="Day 4，界面编写"></a>Day 4，界面编写</h4><p>我们的首页，使用的是Activity + Fragment搭配的方式，即一个MainActivity + MainFragment + BookmarksFragment的方式。其中，MainActivity的布局文件中包含了DrawerLayout, Toolbar以及Fragment所在的容器。</p>
<p>MainActivity对应布局文件如下:</p>
<p><a href="https://github.com/TonnyL/PaperPlane/blob/master/app/src/main/res/layout/activity_main.xml" target="_blank" rel="external">activity_main.xml</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class="line">&lt;android.support.v4.widget.DrawerLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class="line">    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;</div><div class="line">    xmlns:tools=&quot;http://schemas.android.com/tools&quot;</div><div class="line">    android:id=&quot;@+id/drawer_layout&quot;</div><div class="line">    android:layout_width=&quot;match_parent&quot;</div><div class="line">    android:layout_height=&quot;match_parent&quot;</div><div class="line">    android:fitsSystemWindows=&quot;true&quot;</div><div class="line">    tools:openDrawer=&quot;start&quot;&gt;</div><div class="line"></div><div class="line">    &lt;include layout=&quot;@layout/app_bar_main&quot; /&gt;</div><div class="line"></div><div class="line">    &lt;android.support.design.widget.NavigationView</div><div class="line">        android:id=&quot;@+id/nav_view&quot;</div><div class="line">        android:layout_width=&quot;wrap_content&quot;</div><div class="line">        android:layout_height=&quot;match_parent&quot;</div><div class="line">        android:layout_gravity=&quot;start&quot;</div><div class="line">        android:fitsSystemWindows=&quot;true&quot;</div><div class="line">        app:headerLayout=&quot;@layout/nav_header_main&quot;</div><div class="line">        app:menu=&quot;@menu/activity_main_drawer&quot; /&gt;</div><div class="line"></div><div class="line">&lt;/android.support.v4.widget.DrawerLayout&gt;</div></pre></td></tr></table></figure>
<p><a href="https://github.com/TonnyL/PaperPlane/blob/master/app/src/main/res/layout/nav_header_main.xml" target="_blank" rel="external">nav_header_main.xml</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class="line">&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class="line">    android:layout_width=&quot;match_parent&quot;</div><div class="line">    android:layout_height=&quot;@dimen/nav_header_height&quot;</div><div class="line">    android:background=&quot;@drawable/nav_header&quot;</div><div class="line">    android:gravity=&quot;bottom&quot;</div><div class="line">    android:orientation=&quot;vertical&quot;</div><div class="line">    android:theme=&quot;@style/ThemeOverlay.AppCompat.Dark&quot;&gt;</div><div class="line"></div><div class="line">&lt;/LinearLayout&gt;</div></pre></td></tr></table></figure>
<p>nav_header实际上就只是一个简单的ImageView。</p>
<p><a href="https://github.com/TonnyL/PaperPlane/blob/master/app/src/main/res/layout/app_bar_main.xml" target="_blank" rel="external">app_bar_main.xml</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class="line">&lt;android.support.design.widget.CoordinatorLayout</div><div class="line">    xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class="line">    xmlns:tools=&quot;http://schemas.android.com/tools&quot;</div><div class="line">    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;</div><div class="line">    android:layout_width=&quot;match_parent&quot;</div><div class="line">    android:layout_height=&quot;match_parent&quot;</div><div class="line">    android:fitsSystemWindows=&quot;true&quot;</div><div class="line">    tools:context=&quot;.homepage.MainActivity&quot;&gt;</div><div class="line"></div><div class="line">    &lt;android.support.design.widget.AppBarLayout</div><div class="line">        android:layout_width=&quot;match_parent&quot;</div><div class="line">        android:layout_height=&quot;wrap_content&quot;</div><div class="line">        app:elevation=&quot;0dp&quot;</div><div class="line">        android:theme=&quot;@style/AppTheme.AppBarOverlay&quot;&gt;</div><div class="line"></div><div class="line">        &lt;android.support.v7.widget.Toolbar</div><div class="line">            android:id=&quot;@+id/toolbar&quot;</div><div class="line">            android:layout_width=&quot;match_parent&quot;</div><div class="line">            android:layout_height=&quot;?attr/actionBarSize&quot;</div><div class="line">            android:background=&quot;@color/colorPrimary&quot;</div><div class="line">            app:popupTheme=&quot;@style/AppTheme.PopupOverlay&quot; /&gt;</div><div class="line"></div><div class="line">    &lt;/android.support.design.widget.AppBarLayout&gt;</div><div class="line"></div><div class="line">    &lt;FrameLayout</div><div class="line">        android:layout_width=&quot;match_parent&quot;</div><div class="line">        android:layout_height=&quot;match_parent&quot;</div><div class="line">        android:id=&quot;@+id/layout_fragment&quot;</div><div class="line">        android:layout_marginTop=&quot;?actionBarSize&quot;/&gt;</div><div class="line"></div><div class="line">&lt;/android.support.design.widget.CoordinatorLayout&gt;</div></pre></td></tr></table></figure>
<p>OK，Activity的布局文件完成。然后就可以写java代码了。</p>
<p><a href="https://github.com/TonnyL/PaperPlane/blob/master/app/src/main/java/com/marktony/zhihudaily/homepage/MainActivity.java" target="_blank" rel="external">MainActivity.java</a></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span></span></div><div class="line">        <span class="keyword">implements</span> <span class="title">NavigationView</span>.<span class="title">OnNavigationItemSelectedListener</span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> MainFragment mainFragment;</div><div class="line">    <span class="keyword">private</span> BookmarksFragment bookmarksFragment;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> NavigationView navigationView;</div><div class="line">    <span class="keyword">private</span> DrawerLayout drawer;</div><div class="line">    <span class="keyword">private</span> Toolbar toolbar;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line"></div><div class="line">		<span class="comment">// 初始化控件</span></div><div class="line">        initViews();</div><div class="line"></div><div class="line">		<span class="comment">// 恢复fragment的状态</span></div><div class="line">        <span class="keyword">if</span> (savedInstanceState != <span class="keyword">null</span>) &#123;</div><div class="line">            mainFragment = (MainFragment) getSupportFragmentManager().getFragment(savedInstanceState, <span class="string">"MainFragment"</span>);</div><div class="line">            bookmarksFragment = (BookmarksFragment) getSupportFragmentManager().getFragment(savedInstanceState, <span class="string">"BookmarksFragment"</span>);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            mainFragment = MainFragment.newInstance();</div><div class="line">            bookmarksFragment = BookmarksFragment.newInstance();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (!mainFragment.isAdded()) &#123;</div><div class="line">            getSupportFragmentManager().beginTransaction()</div><div class="line">                    .add(R.id.layout_fragment, mainFragment, <span class="string">"MainFragment"</span>)</div><div class="line">                    .commit();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (!bookmarksFragment.isAdded()) &#123;</div><div class="line">            getSupportFragmentManager().beginTransaction()</div><div class="line">                    .add(R.id.layout_fragment, bookmarksFragment, <span class="string">"BookmarksFragment"</span>)</div><div class="line">                    .commit();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">		<span class="comment">// 实例化BookmarksPresenter</span></div><div class="line">        <span class="keyword">new</span> BookmarksPresenter(MainActivity.<span class="keyword">this</span>, bookmarksFragment);</div><div class="line"></div><div class="line">		<span class="comment">// 默认显示首页内容</span></div><div class="line">		showMainFragment();</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">	<span class="comment">// 初始化控件</span></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initViews</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">        toolbar = (Toolbar) findViewById(R.id.toolbar);</div><div class="line">        setSupportActionBar(toolbar);</div><div class="line"></div><div class="line">        drawer = (DrawerLayout) findViewById(R.id.drawer_layout);</div><div class="line">        ActionBarDrawerToggle toggle = <span class="keyword">new</span> ActionBarDrawerToggle(</div><div class="line">                <span class="keyword">this</span>,</div><div class="line">                drawer,</div><div class="line">                toolbar,</div><div class="line">                R.string.navigation_drawer_open,</div><div class="line">                R.string.navigation_drawer_close);</div><div class="line">        drawer.setDrawerListener(toggle);</div><div class="line">        toggle.syncState();</div><div class="line"></div><div class="line">        navigationView = (NavigationView) findViewById(R.id.nav_view);</div><div class="line">        navigationView.setNavigationItemSelectedListener(<span class="keyword">this</span>);</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">	<span class="comment">// 显示MainFragment并设置Title</span></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">showMainFragment</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">        FragmentTransaction fragmentTransaction = getSupportFragmentManager().beginTransaction();</div><div class="line">        fragmentTransaction.show(mainFragment);</div><div class="line">        fragmentTransaction.hide(bookmarksFragment);</div><div class="line">        fragmentTransaction.commit();</div><div class="line"></div><div class="line">        toolbar.setTitle(getResources().getString(R.string.app_name));</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">	<span class="comment">// 显示BookmarksFragment并设置Title</span></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">showBookmarksFragment</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">        FragmentTransaction fragmentTransaction = getSupportFragmentManager().beginTransaction();</div><div class="line">        fragmentTransaction.show(bookmarksFragment);</div><div class="line">        fragmentTransaction.hide(mainFragment);</div><div class="line">        fragmentTransaction.commit();</div><div class="line"></div><div class="line">        toolbar.setTitle(getResources().getString(R.string.nav_bookmarks));</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onNavigationItemSelected</span><span class="params">(@NonNull MenuItem item)</span> </span>&#123;</div><div class="line"></div><div class="line">        drawer.closeDrawer(GravityCompat.START);</div><div class="line"></div><div class="line">        <span class="keyword">int</span> id = item.getItemId();</div><div class="line">        <span class="keyword">if</span> (id == R.id.nav_home) &#123;</div><div class="line">            showMainFragment();</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (id == R.id.nav_bookmarks) &#123;</div><div class="line">            showBookmarksFragment();</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (id == R.id.nav_change_theme) &#123;</div><div class="line"></div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (id == R.id.nav_settings) &#123;</div><div class="line"></div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (id == R.id.nav_about) &#123;</div><div class="line"></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">	<span class="comment">// 存储Fragment的状态</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onSaveInstanceState</span><span class="params">(Bundle outState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onSaveInstanceState(outState);</div><div class="line">        <span class="keyword">if</span> (mainFragment.isAdded()) &#123;</div><div class="line">            getSupportFragmentManager().putFragment(outState, <span class="string">"MainFragment"</span>, mainFragment);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (bookmarksFragment.isAdded()) &#123;</div><div class="line">            getSupportFragmentManager().putFragment(outState, <span class="string">"BookmarksFragment"</span>, bookmarksFragment);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>从代码中可以看出,MainActivity负责处理DrawerLayout的点击事件，即控制显示或者隐藏特定的Fragment。而Fragment的状态的保存与恢复也是在这里进行的。</p>
<p><a href="https://github.com/TonnyL/PaperPlane/blob/master/app/src/main/java/com/marktony/zhihudaily/homepage/MainFragment.java" target="_blank" rel="external">MainFragment.java</a></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainFragment</span> <span class="keyword">extends</span> <span class="title">Fragment</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Context context;</div><div class="line">    <span class="keyword">private</span> MainPagerAdapter adapter;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> TabLayout tabLayout;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> ZhihuDailyFragment zhihuDailyFragment;</div><div class="line">    <span class="keyword">private</span> GuokrFragment guokrFragment;</div><div class="line">    <span class="keyword">private</span> DoubanMomentFragment doubanMomentFragment;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> ZhihuDailyPresenter zhihuDailyPresenter;</div><div class="line">    <span class="keyword">private</span> GuokrPresenter guokrPresenter;</div><div class="line">    <span class="keyword">private</span> DoubanMomentPresenter doubanMomentPresenter;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MainFragment</span><span class="params">()</span> </span>&#123;&#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> MainFragment <span class="title">newInstance</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MainFragment();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAttach</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onAttach(context);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(@Nullable Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line"></div><div class="line">        <span class="keyword">this</span>.context = getActivity();</div><div class="line"></div><div class="line">		<span class="comment">// Fragment状态恢复</span></div><div class="line">        <span class="keyword">if</span> (savedInstanceState != <span class="keyword">null</span>) &#123;</div><div class="line">            FragmentManager manager = getChildFragmentManager();</div><div class="line">            zhihuDailyFragment = (ZhihuDailyFragment) manager.getFragment(savedInstanceState, <span class="string">"zhihu"</span>);</div><div class="line">            guokrFragment = (GuokrFragment) manager.getFragment(savedInstanceState, <span class="string">"guokr"</span>);</div><div class="line">            doubanMomentFragment = (DoubanMomentFragment) manager.getFragment(savedInstanceState, <span class="string">"douban"</span>);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">        	<span class="comment">// 创建View实例</span></div><div class="line">            zhihuDailyFragment = ZhihuDailyFragment.newInstance();</div><div class="line">            guokrFragment = GuokrFragment.newInstance();</div><div class="line">            doubanMomentFragment = DoubanMomentFragment.newInstance();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">		<span class="comment">// 创建Presenter实例</span></div><div class="line">        zhihuDailyPresenter = <span class="keyword">new</span> ZhihuDailyPresenter(context, zhihuDailyFragment);</div><div class="line">        guokrPresenter = <span class="keyword">new</span> GuokrPresenter(context, guokrFragment);</div><div class="line">        doubanMomentPresenter = <span class="keyword">new</span> DoubanMomentPresenter(context, doubanMomentFragment);</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Nullable</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> View <span class="title">onCreateView</span><span class="params">(LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        View view = inflater.inflate(R.layout.fragment_main, container, <span class="keyword">false</span>);</div><div class="line"></div><div class="line">		<span class="comment">// 初始化控件</span></div><div class="line">        initViews(view);</div><div class="line"></div><div class="line">		<span class="comment">// 显示菜单</span></div><div class="line">        setHasOptionsMenu(<span class="keyword">true</span>);</div><div class="line"></div><div class="line">        <span class="comment">// 当tab layout位置为果壳精选时，隐藏fab</span></div><div class="line">        tabLayout.addOnTabSelectedListener(<span class="keyword">new</span> TabLayout.OnTabSelectedListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onTabSelected</span><span class="params">(TabLayout.Tab tab)</span> </span>&#123;</div><div class="line">                FloatingActionButton fab = (FloatingActionButton) getActivity().findViewById(R.id.fab);</div><div class="line">                <span class="keyword">if</span> (tab.getPosition() == <span class="number">1</span>) &#123;</div><div class="line">                    fab.hide();</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    fab.show();</div><div class="line">                &#125;</div><div class="line"></div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onTabUnselected</span><span class="params">(TabLayout.Tab tab)</span> </span>&#123;</div><div class="line"></div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onTabReselected</span><span class="params">(TabLayout.Tab tab)</span> </span>&#123;</div><div class="line"></div><div class="line">            &#125;</div><div class="line"></div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        <span class="keyword">return</span> view;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">	<span class="comment">// 初始化控件</span></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initViews</span><span class="params">(View view)</span> </span>&#123;</div><div class="line"></div><div class="line">        tabLayout = (TabLayout) view.findViewById(R.id.tab_layout);</div><div class="line">        ViewPager viewPager = (ViewPager) view.findViewById(R.id.view_pager);</div><div class="line">        <span class="comment">// 设置离线数为3</span></div><div class="line">        viewPager.setOffscreenPageLimit(<span class="number">3</span>);</div><div class="line"></div><div class="line">        adapter = <span class="keyword">new</span> MainPagerAdapter(</div><div class="line">                getChildFragmentManager(),</div><div class="line">                context,</div><div class="line">                zhihuDailyFragment,</div><div class="line">                guokrFragment,</div><div class="line">                doubanMomentFragment);</div><div class="line"></div><div class="line">        viewPager.setAdapter(adapter);</div><div class="line">        tabLayout.setupWithViewPager(viewPager);</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreateOptionsMenu</span><span class="params">(Menu menu, MenuInflater inflater)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreateOptionsMenu(menu, inflater);</div><div class="line">        inflater.inflate(R.menu.main, menu);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onOptionsItemSelected</span><span class="params">(MenuItem item)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> id = item.getItemId();</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (id == R.id.action_feel_lucky) &#123;</div><div class="line">            feelLucky();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">	<span class="comment">// 保存状态</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSaveInstanceState</span><span class="params">(Bundle outState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onSaveInstanceState(outState);</div><div class="line">        FragmentManager manager = getChildFragmentManager();</div><div class="line">        manager.putFragment(outState, <span class="string">"zhihu"</span>, zhihuDailyFragment);</div><div class="line">        manager.putFragment(outState, <span class="string">"guokr"</span>, guokrFragment);</div><div class="line">        manager.putFragment(outState, <span class="string">"douban"</span>, doubanMomentFragment);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">	<span class="comment">// 随便看看</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">feelLucky</span><span class="params">()</span> </span>&#123;</div><div class="line">        Random random = <span class="keyword">new</span> Random();</div><div class="line">        <span class="keyword">int</span> type = random.nextInt(<span class="number">3</span>);</div><div class="line">        <span class="keyword">switch</span> (type) &#123;</div><div class="line">            <span class="keyword">case</span> <span class="number">0</span>:</div><div class="line">                zhihuDailyPresenter.feelLucky();</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> <span class="number">1</span>:</div><div class="line">                guokrPresenter.feelLucky();</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">default</span>:</div><div class="line">                doubanMomentPresenter.feelLucky();</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> MainPagerAdapter <span class="title">getAdapter</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> adapter;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>首页的MainFragment主要负责显示与TabLayout + ViewPager相关的内容。</p>
<p>OK，终于把首页的UI框架搭建好了，喝杯咖啡，休息一下，冷静冷静。</p>
<p>现在开始实现具体的<code>ZhihuDailyFragment</code>的布局。仔细观察，实际上，ZhihuDailyFragment所包含的控件就只有一个<code>RecyclerView</code>，将获取到的内容以列表的形式显示出来。并且，不难发现，果壳精选与豆瓣一刻的布局与知乎日报的列表布局相同，可以复用。</p>
<p><a href="https://github.com/TonnyL/PaperPlane/blob/master/app/src/main/res/layout/fragment_list.xml" target="_blank" rel="external">fragment_list.xml</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class="line">&lt;android.support.v4.widget.SwipeRefreshLayout</div><div class="line">    xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class="line">    android:layout_width=&quot;match_parent&quot;</div><div class="line">    android:layout_height=&quot;match_parent&quot;</div><div class="line">    android:id=&quot;@+id/refreshLayout&quot;&gt;</div><div class="line"></div><div class="line">    &lt;FrameLayout</div><div class="line">        android:layout_width=&quot;match_parent&quot;</div><div class="line">        android:layout_height=&quot;wrap_content&quot;</div><div class="line">        android:focusable=&quot;true&quot;</div><div class="line">        android:clickable=&quot;true&quot;&gt;</div><div class="line"></div><div class="line">        &lt;android.support.v7.widget.RecyclerView</div><div class="line">            android:layout_width=&quot;match_parent&quot;</div><div class="line">            android:layout_height=&quot;match_parent&quot;</div><div class="line">            android:id=&quot;@+id/recyclerView&quot;</div><div class="line">            android:scrollbars=&quot;vertical&quot;</div><div class="line">            android:scrollbarFadeDuration=&quot;1&quot;</div><div class="line">            android:fadeScrollbars=&quot;true&quot;/&gt;</div><div class="line"></div><div class="line">    &lt;/FrameLayout&gt;</div><div class="line"></div><div class="line">&lt;/android.support.v4.widget.SwipeRefreshLayout&gt;</div></pre></td></tr></table></figure>
<p>布局实际上还包含了SwipeRefreshLayout，用于显示正在加载和手动刷新。</p>
<p>列表子项的布局有很多种，分别是:</p>
<ol>
<li>普通仅文字</li>
<li>普通文字 + 图片</li>
<li>头部项，用于显示子项类型(如知乎日报，在收藏页面会用到)</li>
<li>底部项，加载更多等</li>
</ol>
<p><a href="https://github.com/TonnyL/PaperPlane/blob/master/app/src/main/res/layout/home_list_item_without_image.xml" target="_blank" rel="external">home_list_item_without_image.xml</a> - 普通仅文字</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class="line">&lt;android.support.v7.widget.CardView xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class="line">    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;</div><div class="line">    android:layout_height=&quot;96dp&quot;</div><div class="line">    android:layout_width=&quot;match_parent&quot;</div><div class="line">    android:focusable=&quot;true&quot;</div><div class="line">    android:clickable=&quot;true&quot;</div><div class="line">    android:foreground=&quot;?android:attr/selectableItemBackground&quot;</div><div class="line">    app:cardCornerRadius=&quot;4dp&quot;</div><div class="line">    app:cardElevation=&quot;1dp&quot;</div><div class="line">    app:cardPreventCornerOverlap=&quot;true&quot;</div><div class="line">    android:layout_marginTop=&quot;8dp&quot;</div><div class="line">    android:layout_marginLeft=&quot;8dp&quot;</div><div class="line">    android:layout_marginRight=&quot;8dp&quot;&gt;</div><div class="line"></div><div class="line">    &lt;TextView</div><div class="line">        android:layout_width=&quot;match_parent&quot;</div><div class="line">        android:layout_height=&quot;match_parent&quot;</div><div class="line">        android:id=&quot;@+id/textViewTitle&quot;</div><div class="line">        android:paddingTop=&quot;8dp&quot;</div><div class="line">        android:paddingBottom=&quot;8dp&quot;</div><div class="line">        android:paddingLeft=&quot;8dp&quot;</div><div class="line">        android:paddingRight=&quot;8dp&quot;</div><div class="line">        android:gravity=&quot;center_vertical&quot;</div><div class="line">        android:maxLines=&quot;3&quot;</div><div class="line">        android:ellipsize=&quot;end&quot;</div><div class="line">        android:textSize=&quot;18sp&quot; /&gt;</div><div class="line"></div><div class="line">&lt;/android.support.v7.widget.CardView&gt;</div></pre></td></tr></table></figure>
<p><a href="https://github.com/TonnyL/PaperPlane/blob/master/app/src/main/res/layout/home_list_item_layout.xml" target="_blank" rel="external">home_list_item_layout.xml</a> - 普通文字 + 图片</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class="line">&lt;android.support.v7.widget.CardView xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class="line">    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;</div><div class="line">    android:layout_height=&quot;96dp&quot;</div><div class="line">    android:layout_width=&quot;match_parent&quot;</div><div class="line">    android:focusable=&quot;true&quot;</div><div class="line">    android:clickable=&quot;true&quot;</div><div class="line">    android:foreground=&quot;?android:attr/selectableItemBackground&quot;</div><div class="line">    app:cardCornerRadius=&quot;4dp&quot;</div><div class="line">    app:cardElevation=&quot;1dp&quot;</div><div class="line">    app:cardPreventCornerOverlap=&quot;true&quot;</div><div class="line">    android:layout_marginTop=&quot;8dp&quot;</div><div class="line">    android:layout_marginLeft=&quot;8dp&quot;</div><div class="line">    android:layout_marginRight=&quot;8dp&quot;&gt;</div><div class="line"></div><div class="line">    &lt;LinearLayout</div><div class="line">        android:layout_width=&quot;match_parent&quot;</div><div class="line">        android:layout_height=&quot;match_parent&quot;</div><div class="line">        android:orientation=&quot;horizontal&quot;</div><div class="line">        android:paddingLeft=&quot;8dp&quot;</div><div class="line">        android:paddingRight=&quot;8dp&quot; &gt;</div><div class="line"></div><div class="line">        &lt;TextView</div><div class="line">            android:layout_width=&quot;0dp&quot;</div><div class="line">            android:layout_height=&quot;match_parent&quot;</div><div class="line">            android:layout_weight=&quot;1&quot;</div><div class="line">            android:id=&quot;@+id/textViewTitle&quot;</div><div class="line">            android:paddingTop=&quot;8dp&quot;</div><div class="line">            android:paddingBottom=&quot;8dp&quot;</div><div class="line">            android:layout_marginRight=&quot;8dp&quot;</div><div class="line">            android:layout_marginEnd=&quot;8dp&quot;</div><div class="line">            android:gravity=&quot;center_vertical&quot;</div><div class="line">            android:maxLines=&quot;3&quot;</div><div class="line">            android:ellipsize=&quot;end&quot;</div><div class="line">            android:textSize=&quot;18sp&quot; /&gt;</div><div class="line"></div><div class="line">        &lt;ImageView</div><div class="line">            android:layout_width=&quot;80dp&quot;</div><div class="line">            android:layout_height=&quot;80dp&quot;</div><div class="line">            android:id=&quot;@+id/imageViewCover&quot;</div><div class="line">            android:layout_gravity=&quot;center_vertical&quot; /&gt;</div><div class="line"></div><div class="line">    &lt;/LinearLayout&gt;</div><div class="line"></div><div class="line">&lt;/android.support.v7.widget.CardView&gt;</div></pre></td></tr></table></figure>
<p><a href="https://github.com/TonnyL/PaperPlane/blob/master/app/src/main/res/layout/bookmark_header.xml" target="_blank" rel="external">bookmark_header.xml</a> - 头部项</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class="line">&lt;TextView xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class="line">    android:layout_width=&quot;match_parent&quot;</div><div class="line">    android:layout_height=&quot;wrap_content&quot;</div><div class="line">    android:id=&quot;@+id/textViewType&quot;</div><div class="line">    android:paddingLeft=&quot;8dp&quot;</div><div class="line">    android:paddingStart=&quot;8dp&quot;</div><div class="line">    android:paddingRight=&quot;8dp&quot;</div><div class="line">    android:paddingEnd=&quot;8dp&quot;</div><div class="line">    android:paddingTop=&quot;8dp&quot;</div><div class="line">    android:gravity=&quot;center_vertical&quot;</div><div class="line">    android:textColor=&quot;@color/colorPrimary&quot;</div><div class="line">    android:textAllCaps=&quot;true&quot;/&gt;</div></pre></td></tr></table></figure>
<p><a href="https://github.com/TonnyL/PaperPlane/blob/master/app/src/main/res/layout/list_footer.xml" target="_blank" rel="external">list_footer.xml</a> - 底部项，加载更多</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class="line">&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class="line">    android:orientation=&quot;horizontal&quot;</div><div class="line">    android:layout_width=&quot;match_parent&quot;</div><div class="line">    android:layout_height=&quot;48dp&quot;</div><div class="line">    android:layout_marginTop=&quot;8dp&quot;</div><div class="line">    android:layout_marginBottom=&quot;8dp&quot;</div><div class="line">    android:gravity=&quot;center_horizontal&quot;</div><div class="line">    android:background=&quot;@color/viewBackground&quot;&gt;</div><div class="line"></div><div class="line">    &lt;android.support.v4.widget.ContentLoadingProgressBar</div><div class="line">        android:id=&quot;@+id/address_looking_up&quot;</div><div class="line">        style=&quot;?android:attr/progressBarStyleInverse&quot;</div><div class="line">        android:layout_width=&quot;wrap_content&quot;</div><div class="line">        android:layout_height=&quot;wrap_content&quot;</div><div class="line">        android:layout_gravity=&quot;center_horizontal&quot;</div><div class="line">        android:visibility=&quot;visible&quot; /&gt;</div><div class="line"></div><div class="line">    &lt;TextView</div><div class="line">        android:layout_width=&quot;wrap_content&quot;</div><div class="line">        android:layout_height=&quot;match_parent&quot;</div><div class="line">        android:text=&quot;@string/loading_more&quot;</div><div class="line">        android:layout_marginLeft=&quot;16dp&quot;</div><div class="line">        android:layout_marginStart=&quot;8dp&quot;</div><div class="line">        android:gravity=&quot;center_vertical&quot;/&gt;</div><div class="line"></div><div class="line">&lt;/LinearLayout&gt;</div></pre></td></tr></table></figure>
<p>布局文件到这里基本就完成了。</p>
<h4 id="Day-4，实体类"><a href="#Day-4，实体类" class="headerlink" title="Day 4，实体类"></a>Day 4，实体类</h4><p>我们可以直接通过JSON格式的返回数据设计实体类。可以手动编写代码，也可以利用Android Studio插件<a href="https://github.com/zzz40500/GsonFormat" target="_blank" rel="external">GsonFormat</a>实现。</p>
<p>Json格式数据:</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"date"</span>: <span class="string">"20170121"</span>,</div><div class="line">  <span class="attr">"stories"</span>: [</div><div class="line">    &#123;</div><div class="line">      <span class="attr">"images"</span>: [</div><div class="line">        <span class="string">"http://pic1.zhimg.com/ffcca2b2853f2af791310e6a6d694e80.jpg"</span></div><div class="line">      ],</div><div class="line">      <span class="attr">"type"</span>: <span class="number">0</span>,</div><div class="line">      <span class="attr">"id"</span>: <span class="number">9165434</span>,</div><div class="line">      <span class="attr">"ga_prefix"</span>: <span class="string">"012121"</span>,</div><div class="line">      <span class="attr">"title"</span>: <span class="string">"谁说普通人的生活就不能精彩有趣呢？"</span></div><div class="line">    &#125;,</div><div class="line">    ...</div><div class="line">    ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>对应的bean:<a href="https://github.com/TonnyL/PaperPlane/blob/master/app/src/main/java/com/marktony/zhihudaily/bean/ZhihuDailyNews.java" target="_blank" rel="external">ZhihuDailyNews.java</a></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZhihuDailyNews</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> String date;</div><div class="line">    <span class="keyword">private</span> ArrayList&lt;Question&gt; stories;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDate</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> date;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDate</span><span class="params">(String date)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.date = date;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> ArrayList&lt;Question&gt; <span class="title">getStories</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> stories;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStories</span><span class="params">(ArrayList&lt;Question&gt; stories)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.stories = stories;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Question</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">private</span> ArrayList&lt;String&gt; images;</div><div class="line">        <span class="keyword">private</span> <span class="keyword">int</span> type;</div><div class="line">        <span class="keyword">private</span> <span class="keyword">int</span> id;</div><div class="line">        <span class="keyword">private</span> String ga_prefix;</div><div class="line">        <span class="keyword">private</span> String title;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> ArrayList&lt;String&gt; <span class="title">getImages</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> images;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setImages</span><span class="params">(ArrayList&lt;String&gt; images)</span> </span>&#123;</div><div class="line">            <span class="keyword">this</span>.images = images;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getType</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> type;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setType</span><span class="params">(<span class="keyword">int</span> type)</span> </span>&#123;</div><div class="line">            <span class="keyword">this</span>.type = type;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> id;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</div><div class="line">            <span class="keyword">this</span>.id = id;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">getGa_prefix</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> ga_prefix;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setGa_prefix</span><span class="params">(String ga_prefix)</span> </span>&#123;</div><div class="line">            <span class="keyword">this</span>.ga_prefix = ga_prefix;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">getTitle</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> title;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTitle</span><span class="params">(String title)</span> </span>&#123;</div><div class="line">            <span class="keyword">this</span>.title = title;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="Day-4，显示数据"><a href="#Day-4，显示数据" class="headerlink" title="Day 4，显示数据"></a>Day 4，显示数据</h4><p>首先，我们得有一个adapter。</p>
<p><a href="https://github.com/TonnyL/PaperPlane/blob/master/app/src/main/java/com/marktony/zhihudaily/adapter/ZhihuDailyNewsAdapter.java" target="_blank" rel="external">ZhihuDailyNewsAdapter.java</a></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZhihuDailyNewsAdapter</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">Adapter</span>&lt;<span class="title">RecyclerView</span>.<span class="title">ViewHolder</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Context context;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> LayoutInflater inflater;</div><div class="line">    <span class="keyword">private</span> List&lt;ZhihuDailyNews.Question&gt; list = <span class="keyword">new</span> ArrayList&lt;ZhihuDailyNews.Question&gt;();</div><div class="line">    <span class="keyword">private</span> OnRecyclerViewOnClickListener mListener;</div><div class="line"></div><div class="line">	<span class="comment">// 文字 + 图片</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TYPE_NORMAL = <span class="number">0</span>;</div><div class="line">    <span class="comment">// footer，加载更多</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TYPE_FOOTER = <span class="number">1</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ZhihuDailyNewsAdapter</span><span class="params">(Context context, List&lt;ZhihuDailyNews.Question&gt; list)</span></span>&#123;</div><div class="line">        <span class="keyword">this</span>.context = context;</div><div class="line">        <span class="keyword">this</span>.list = list;</div><div class="line">        <span class="keyword">this</span>.inflater = LayoutInflater.from(context);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> RecyclerView.<span class="function">ViewHolder <span class="title">onCreateViewHolder</span><span class="params">(ViewGroup parent, <span class="keyword">int</span> viewType)</span> </span>&#123;</div><div class="line">    	<span class="comment">// 根据ViewType加载不同布局</span></div><div class="line">        <span class="keyword">switch</span> (viewType) &#123;</div><div class="line">            <span class="keyword">case</span> TYPE_NORMAL:</div><div class="line">                <span class="keyword">return</span> <span class="keyword">new</span> NormalViewHolder(inflater.inflate(R.layout.home_list_item_layout, parent, <span class="keyword">false</span>), mListener);</div><div class="line">            <span class="keyword">case</span> TYPE_FOOTER:</div><div class="line">                <span class="keyword">return</span> <span class="keyword">new</span> FooterViewHolder(inflater.inflate(R.layout.list_footer, parent, <span class="keyword">false</span>));</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBindViewHolder</span><span class="params">(RecyclerView.ViewHolder holder, <span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line"></div><div class="line">		<span class="comment">// 对不同的ViewHolder做不同的处理</span></div><div class="line">        <span class="keyword">if</span> (holder <span class="keyword">instanceof</span> NormalViewHolder) &#123;</div><div class="line"></div><div class="line">            ZhihuDailyNews.Question item = list.get(position);</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (item.getImages().get(<span class="number">0</span>) == <span class="keyword">null</span>)&#123;</div><div class="line">                ((NormalViewHolder)holder).itemImg.setImageResource(R.drawable.placeholder);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                Glide.with(context)</div><div class="line">                        .load(item.getImages().get(<span class="number">0</span>))</div><div class="line">                        .asBitmap()</div><div class="line">                        .placeholder(R.drawable.placeholder)</div><div class="line">                        .diskCacheStrategy(DiskCacheStrategy.SOURCE)</div><div class="line">                        .error(R.drawable.placeholder)</div><div class="line">                        .centerCrop()</div><div class="line">                        .into(((NormalViewHolder)holder).itemImg);</div><div class="line">            &#125;</div><div class="line">            ((NormalViewHolder)holder).tvLatestNewsTitle.setText(item.getTitle());</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">	<span class="comment">// 因为含有footer，返回值需要 + 1</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getItemCount</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> list.size() + <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getItemViewType</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (position == list.size()) &#123;</div><div class="line">            <span class="keyword">return</span> ZhihuDailyNewsAdapter.TYPE_FOOTER;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> ZhihuDailyNewsAdapter.TYPE_NORMAL;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setItemClickListener</span><span class="params">(OnRecyclerViewOnClickListener listener)</span></span>&#123;</div><div class="line">        <span class="keyword">this</span>.mListener = listener;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NormalViewHolder</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">ViewHolder</span> <span class="keyword">implements</span> <span class="title">View</span>.<span class="title">OnClickListener</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">private</span> ImageView itemImg;</div><div class="line">        <span class="keyword">private</span> TextView tvLatestNewsTitle;</div><div class="line">        <span class="keyword">private</span> OnRecyclerViewOnClickListener listener;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">NormalViewHolder</span><span class="params">(View itemView, OnRecyclerViewOnClickListener listener)</span> </span>&#123;</div><div class="line">            <span class="keyword">super</span>(itemView);</div><div class="line">            itemImg = (ImageView) itemView.findViewById(R.id.imageViewCover);</div><div class="line">            tvLatestNewsTitle = (TextView) itemView.findViewById(R.id.textViewTitle);</div><div class="line">            <span class="keyword">this</span>.listener = listener;</div><div class="line">            itemView.setOnClickListener(<span class="keyword">this</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">            <span class="keyword">if</span> (listener != <span class="keyword">null</span>)&#123;</div><div class="line">                listener.OnItemClick(v,getLayoutPosition());</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FooterViewHolder</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">ViewHolder</span></span>&#123;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">FooterViewHolder</span><span class="params">(View itemView)</span> </span>&#123;</div><div class="line">            <span class="keyword">super</span>(itemView);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>adapter中含有两个常量，<code>TYPE_NORMAL</code>,<code>TYPE_FOOTER</code>,用于区别item的类型，从而加载不同的布局。众所周知，RecyclerView原生并没有设置item点击事件的方法，所有我们需要自己定义一个接口–<code>OnRecyclerViewOnClickListener</code>。</p>
<p><a href="https://github.com/TonnyL/PaperPlane/blob/master/app/src/main/java/com/marktony/zhihudaily/interfaze/OnRecyclerViewOnClickListener.java" target="_blank" rel="external">OnRecyclerViewOnClickListener.java</a></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.marktony.zhihudaily.interfaze;</div><div class="line"></div><div class="line"><span class="keyword">import</span> android.view.View;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OnRecyclerViewOnClickListener</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">OnItemClick</span><span class="params">(View v,<span class="keyword">int</span> position)</span></span>;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><a href="https://github.com/TonnyL/PaperPlane/blob/master/app/src/main/java/com/marktony/zhihudaily/homepage/ZhihuDailyPresenter.java" target="_blank" rel="external">ZhihuDailyPresenter.java</a></p>
<p>实现<code>ZhihuDailyPresenter</code>中的<code>loadPosts</code>方法，记得要在manifest清单文件中添加网络访问权限：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">model.load(Api.ZHIHU_HISTORY + formatter.ZhihuDailyDateFormat(date), <span class="keyword">new</span> OnStringListener() &#123;</div><div class="line">                <span class="meta">@Override</span></div><div class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSuccess</span><span class="params">(String result)</span> </span>&#123;</div><div class="line"></div><div class="line">                    <span class="keyword">try</span> &#123;</div><div class="line">                        ZhihuDailyNews post = gson.fromJson(result, ZhihuDailyNews.class);</div><div class="line"></div><div class="line">                        <span class="keyword">if</span> (clearing) &#123;</div><div class="line">                            list.clear();</div><div class="line">                        &#125;</div><div class="line"></div><div class="line">                        <span class="keyword">for</span> (ZhihuDailyNews.Question item : post.getStories()) &#123;</div><div class="line">                            list.add(item);                          </div><div class="line">                        &#125;</div><div class="line">                        view.showResults(list);</div><div class="line"></div><div class="line">                    &#125; <span class="keyword">catch</span> (JsonSyntaxException e) &#123;</div><div class="line">                        view.showError();</div><div class="line">                    &#125;</div><div class="line"></div><div class="line">                    view.stopLoading();</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                <span class="meta">@Override</span></div><div class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(VolleyError error)</span> </span>&#123;</div><div class="line">                    view.stopLoading();</div><div class="line">                    view.showError();</div><div class="line">                &#125;</div><div class="line">            &#125;);</div></pre></td></tr></table></figure>
<p>我们通过Gson，可以很简单将JSON格式数据转换为Java对象。</p>
<p><a href="https://github.com/TonnyL/PaperPlane/blob/master/app/src/main/java/com/marktony/zhihudaily/homepage/ZhihuDailyFragment.java" target="_blank" rel="external">ZhihuDailyFragment</a></p>
<p>实现<code>ZhihuDailyFragment</code>的<code>showResults</code>方法。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showResults</span><span class="params">(ArrayList&lt;ZhihuDailyNews.Question&gt; list)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (adapter == <span class="keyword">null</span>) &#123;</div><div class="line">        adapter = <span class="keyword">new</span> ZhihuDailyNewsAdapter(getContext(), list);</div><div class="line">        adapter.setItemClickListener(<span class="keyword">new</span> OnRecyclerViewOnClickListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">OnItemClick</span><span class="params">(View v, <span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line">                presenter.startReading(position);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        recyclerView.setAdapter(adapter);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        adapter.notifyDataSetChanged();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="Day-4，缓存内容"><a href="#Day-4，缓存内容" class="headerlink" title="Day 4，缓存内容"></a>Day 4，缓存内容</h4><p>完成上面的代码，我们还只是实现了在有网络状态下的正常运行，如果用户并没有那么畅通无阻的网络连接呢？这个时候缓存就派上用场了，只要用户加载过一次，以后就算没有网络连接，用户也能查看之前已经离线的内容。我们选择使用Android原生SQLite数据库来存储数据(当然你也可以选择<a href="https://realm.io/" target="_blank" rel="external">Realm</a>)。</p>
<p>首先当然是要建立数据库了(由于纸飞机已经进行多个版本的迭代，所以你创建数据库的SQL语句或其他内容和我的文件应该不完全相同)。</p>
<p><a href="https://github.com/TonnyL/PaperPlane/blob/master/app/src/main/java/com/marktony/zhihudaily/db/DatabaseHelper.java" target="_blank" rel="external">DatabaseHelper.java</a></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DatabaseHelper</span> <span class="keyword">extends</span> <span class="title">SQLiteOpenHelper</span> </span>&#123;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DatabaseHelper</span><span class="params">(Context context, String name, SQLiteDatabase.CursorFactory factory, <span class="keyword">int</span> version)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(context, name, factory, version);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(SQLiteDatabase db)</span> </span>&#123;</div><div class="line"></div><div class="line">        db.execSQL(<span class="string">"create table if not exists Zhihu("</span></div><div class="line">                + <span class="string">"id integer primary key autoincrement,"</span></div><div class="line">                + <span class="string">"zhihu_id integer not null,"</span></div><div class="line">                + <span class="string">"zhihu_news text,"</span></div><div class="line">                + <span class="string">"zhihu_time real,"</span></div><div class="line">                + <span class="string">"zhihu_content text)"</span>);</div><div class="line"></div><div class="line">        db.execSQL(<span class="string">"alter table Zhihu add column bookmark integer default 0"</span>);</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onUpgrade</span><span class="params">(SQLiteDatabase db, <span class="keyword">int</span> oldVersion, <span class="keyword">int</span> newVersion)</span> </span>&#123;</div><div class="line"></div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>相信大牛应该看出来了，这数据库设计的真心不怎么样😂，因为我数据库学的确实很一般。求大牛不喷。</p>
<table>
<thead>
<tr>
<th>字段</th>
<th>类型</th>
<th>含义</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td> id</td>
<td>integer</td>
<td>主键</td>
<td>自增长</td>
</tr>
<tr>
<td> zhihu_id</td>
<td>integer</td>
<td>知乎日报消息id</td>
<td>由知乎提供</td>
</tr>
<tr>
<td> zhihu_news</td>
<td>text</td>
<td>知乎日报消息内容</td>
<td>与Java实体类对应</td>
</tr>
<tr>
<td> zhihu_time</td>
<td>real</td>
<td>知乎日报消息发布的时间</td>
<td>由知乎提供</td>
</tr>
<tr>
<td> zhihu_content</td>
<td>text</td>
<td>知乎日报消息详细内容</td>
<td>与Java实体类对应</td>
</tr>
<tr>
<td> bookmark</td>
<td>integer</td>
<td>是否被收藏</td>
<td>由于SQLite并没有boolean类型，使用integer的不同值代替</td>
</tr>
</tbody>
</table>
<p>OK,当我们正确请求到数据后，就可以进行存储了。</p>
<p><a href="https://github.com/TonnyL/PaperPlane/blob/master/app/src/main/java/com/marktony/zhihudaily/homepage/ZhihuDailyPresenter.java" target="_blank" rel="external">ZhihuDailyPresenter.java</a></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> ( !queryIfIDExists(item.getId())) &#123;</div><div class="line">    db.beginTransaction();</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        DateFormat format = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyyMMdd"</span>);</div><div class="line">        Date date = format.parse(post.getDate());</div><div class="line">        values.put(<span class="string">"zhihu_id"</span>, item.getId());</div><div class="line">        values.put(<span class="string">"zhihu_news"</span>, gson.toJson(item));</div><div class="line">        values.put(<span class="string">"zhihu_content"</span>, <span class="string">""</span>);</div><div class="line">        values.put(<span class="string">"zhihu_time"</span>, date.getTime() / <span class="number">1000</span>);</div><div class="line">        db.insert(<span class="string">"Zhihu"</span>, <span class="keyword">null</span>, values);</div><div class="line">        values.clear();</div><div class="line">        db.setTransactionSuccessful();</div><div class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">        e.printStackTrace();</div><div class="line">    &#125; <span class="keyword">finally</span> &#123;</div><div class="line">        db.endTransaction();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 查询数据库表中是否已经存在了此id</span></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">queryIfIDExists</span><span class="params">(<span class="keyword">int</span> id)</span></span>&#123;</div><div class="line"></div><div class="line">    Cursor cursor = db.query(<span class="string">"Zhihu"</span>,<span class="keyword">null</span>,<span class="keyword">null</span>,<span class="keyword">null</span>,<span class="keyword">null</span>,<span class="keyword">null</span>,<span class="keyword">null</span>);</div><div class="line">    <span class="keyword">if</span> (cursor.moveToFirst())&#123;</div><div class="line">        do &#123;</div><div class="line">            <span class="keyword">if</span> (id == cursor.getInt(cursor.getColumnIndex(<span class="string">"zhihu_id"</span>)))&#123;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">while</span> (cursor.moveToNext());</div><div class="line">    &#125;</div><div class="line">    cursor.close();</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>细心的童鞋可能发现了，诶，数据表中还有一个字段–zhihu_content，你没有存储呀。这是因为我们在请求知乎消息列表的时候，并没有返回消息的详细内容呀。不过详细内容我们还是需要缓存的，网络请求在UI线程上进行可能会引起ANR，那更好的解决办法就是在Service里面完成了。</p>
<p>我们先将一些必须的数据通过本地广播的形式，发送出去。</p>
<p><a href="https://github.com/TonnyL/PaperPlane/blob/master/app/src/main/java/com/marktony/zhihudaily/homepage/ZhihuDailyPresenter.java" target="_blank" rel="external">ZhihuDailyPresenter.java</a></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Intent intent = <span class="keyword">new</span> Intent(<span class="string">"com.marktony.zhihudaily.LOCAL_BROADCAST"</span>);</div><div class="line">intent.putExtra(<span class="string">"type"</span>, CacheService.TYPE_ZHIHU);</div><div class="line">intent.putExtra(<span class="string">"id"</span>, item.getId());</div><div class="line">LocalBroadcastManager.getInstance(context).sendBroadcast(intent);</div></pre></td></tr></table></figure>
<p>然后在<code>CacheService</code>里接收广播，获取传送的数据，然后进行网络请求和数据存储。</p>
<p><a href="https://github.com/TonnyL/PaperPlane/blob/master/app/src/main/java/com/marktony/zhihudaily/service/CacheService.java" target="_blank" rel="external">CacheService.java</a></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CacheService</span> <span class="keyword">extends</span> <span class="title">Service</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> DatabaseHelper dbHelper;</div><div class="line">    <span class="keyword">private</span> SQLiteDatabase db;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = CacheService.class.getSimpleName();</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TYPE_ZHIHU = <span class="number">0x00</span>;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TYPE_GUOKR = <span class="number">0x01</span>;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TYPE_DOUBAN = <span class="number">0x02</span>;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate();</div><div class="line">        dbHelper = <span class="keyword">new</span> DatabaseHelper(<span class="keyword">this</span>, <span class="string">"History.db"</span>, <span class="keyword">null</span>, <span class="number">5</span>);</div><div class="line">        db = dbHelper.getWritableDatabase();</div><div class="line"></div><div class="line">        IntentFilter filter = <span class="keyword">new</span> IntentFilter();</div><div class="line">        filter.addAction(<span class="string">"com.marktony.zhihudaily.LOCAL_BROADCAST"</span>);</div><div class="line">        LocalBroadcastManager manager = LocalBroadcastManager.getInstance(<span class="keyword">this</span>);</div><div class="line">        manager.registerReceiver(<span class="keyword">new</span> LocalReceiver(), filter);</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Nullable</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> IBinder <span class="title">onBind</span><span class="params">(Intent intent)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">onStartCommand</span><span class="params">(Intent intent, <span class="keyword">int</span> flags, <span class="keyword">int</span> startId)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.onStartCommand(intent, flags, startId);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onUnbind</span><span class="params">(Intent intent)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.onUnbind(intent);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 网络请求id对应的知乎日报的内容主体</div><div class="line">     * 当type为0时，存储body中的数据</div><div class="line">     * 当type为1时，再次请求share url中的内容并储存</div><div class="line">     * <span class="doctag">@param</span> id 所要获取的知乎日报消息内容对应的id</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">startZhihuCache</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span> id)</span> </span>&#123;</div><div class="line"></div><div class="line">        Cursor cursor = db.query(<span class="string">"Zhihu"</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);</div><div class="line">        <span class="keyword">if</span> (cursor.moveToFirst()) &#123;</div><div class="line">            do &#123;</div><div class="line">                <span class="keyword">if</span> ((cursor.getInt(cursor.getColumnIndex(<span class="string">"zhihu_id"</span>)) == id)</div><div class="line">                        &amp;&amp; (cursor.getString(cursor.getColumnIndex(<span class="string">"zhihu_content"</span>)).equals(<span class="string">""</span>))) &#123;</div><div class="line">                    StringRequest request = <span class="keyword">new</span> StringRequest(Request.Method.GET, Api.ZHIHU_NEWS + id, <span class="keyword">new</span> Response.Listener&lt;String&gt;() &#123;</div><div class="line">                        <span class="meta">@Override</span></div><div class="line">                        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(String s)</span> </span>&#123;</div><div class="line">                            Gson gson = <span class="keyword">new</span> Gson();</div><div class="line">                            ZhihuDailyStory story = gson.fromJson(s, ZhihuDailyStory.class);</div><div class="line">                            <span class="keyword">if</span> (story.getType() == <span class="number">1</span>) &#123;</div><div class="line">                                StringRequest request = <span class="keyword">new</span> StringRequest(Request.Method.GET, story.getShare_url(), <span class="keyword">new</span> Response.Listener&lt;String&gt;() &#123;</div><div class="line">                                    <span class="meta">@Override</span></div><div class="line">                                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(String s)</span> </span>&#123;</div><div class="line">                                        ContentValues values = <span class="keyword">new</span> ContentValues();</div><div class="line">                                        values.put(<span class="string">"zhihu_content"</span>, s);</div><div class="line">                                        db.update(<span class="string">"Zhihu"</span>, values, <span class="string">"zhihu_id = ?"</span>, <span class="keyword">new</span> String[] &#123;String.valueOf(id)&#125;);</div><div class="line">                                        values.clear();</div><div class="line">                                    &#125;</div><div class="line">                                &#125;, <span class="keyword">new</span> Response.ErrorListener() &#123;</div><div class="line">                                    <span class="meta">@Override</span></div><div class="line">                                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onErrorResponse</span><span class="params">(VolleyError volleyError)</span> </span>&#123;</div><div class="line"></div><div class="line">                                    &#125;</div><div class="line">                                &#125;);</div><div class="line">                                request.setTag(TAG);</div><div class="line">                                VolleySingleton.getVolleySingleton(CacheService.<span class="keyword">this</span>).addToRequestQueue(request);</div><div class="line">                            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                                ContentValues values = <span class="keyword">new</span> ContentValues();</div><div class="line">                                values.put(<span class="string">"zhihu_content"</span>, s);</div><div class="line">                                db.update(<span class="string">"Zhihu"</span>, values, <span class="string">"zhihu_id = ?"</span>, <span class="keyword">new</span> String[] &#123;String.valueOf(id)&#125;);</div><div class="line">                                values.clear();</div><div class="line">                            &#125;</div><div class="line"></div><div class="line">                        &#125;</div><div class="line">                    &#125;, <span class="keyword">new</span> Response.ErrorListener() &#123;</div><div class="line">                        <span class="meta">@Override</span></div><div class="line">                        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onErrorResponse</span><span class="params">(VolleyError volleyError)</span> </span>&#123;</div><div class="line"></div><div class="line">                        &#125;</div><div class="line">                    &#125;);</div><div class="line">                    request.setTag(TAG);</div><div class="line">                    VolleySingleton.getVolleySingleton(CacheService.<span class="keyword">this</span>).addToRequestQueue(request);</div><div class="line">                &#125;</div><div class="line">            &#125; <span class="keyword">while</span> (cursor.moveToNext());</div><div class="line">        &#125;</div><div class="line">        cursor.close();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onDestroy();</div><div class="line">        VolleySingleton.getVolleySingleton(<span class="keyword">this</span>).getRequestQueue().cancelAll(TAG);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">LocalReceiver</span> <span class="keyword">extends</span> <span class="title">BroadcastReceiver</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceive</span><span class="params">(Context context, Intent intent)</span> </span>&#123;</div><div class="line">            <span class="keyword">int</span> id = intent.getIntExtra(<span class="string">"id"</span>, <span class="number">0</span>);</div><div class="line">            <span class="keyword">switch</span> (intent.getIntExtra(<span class="string">"type"</span>, -<span class="number">1</span>)) &#123;</div><div class="line">                <span class="keyword">case</span> TYPE_ZHIHU:</div><div class="line">                    startZhihuCache(id);</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                <span class="keyword">case</span> TYPE_GUOKR:</div><div class="line">                    startGuokrCache(id);</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                <span class="keyword">case</span> TYPE_DOUBAN:</div><div class="line">                    startDoubanCache(id);</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                <span class="keyword">default</span>:</div><div class="line">                <span class="keyword">case</span> -<span class="number">1</span>:</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们先遍历一下数据库，如果数据库中指定id的消息详情内容已经不为空，那我们就直接跳过了，可以节省用户的流量以及电量。</p>
<p>到这里，数据的存储是完成了。可是怎么读取出来呢？哈，其实也简单，我们判断一下当前的网络状态，如果用户设备没有连接到网路，我们就直接去数据库中读取，然后解析就行了。</p>
<p><a href="https://github.com/TonnyL/PaperPlane/blob/master/app/src/main/java/com/marktony/zhihudaily/homepage/ZhihuDailyPresenter.java" target="_blank" rel="external">ZhihuDailyPresenter.java</a></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (NetworkState.networkConnected(context)) &#123;</div><div class="line">	<span class="comment">// balabala</span></div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">	Cursor cursor = db.query(<span class="string">"Zhihu"</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);</div><div class="line">	<span class="keyword">if</span> (cursor.moveToFirst()) &#123;</div><div class="line">	    do &#123;</div><div class="line">	        ZhihuDailyNews.Question question = gson.fromJson(cursor.getString(cursor.getColumnIndex(<span class="string">"zhihu_news"</span>)), ZhihuDailyNews.Question.class);</div><div class="line">	        list.add(question);</div><div class="line">	    &#125; <span class="keyword">while</span> (cursor.moveToNext());</div><div class="line">	&#125;</div><div class="line">	cursor.close();</div><div class="line">	view.stopLoading();</div><div class="line">	view.showResults(list);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>到这里，今天的工作差不多已经完成了，等等，是不是忘了什么？我们的Service并没有启动呀。</p>
<p><a href="https://github.com/TonnyL/PaperPlane/blob/master/app/src/main/java/com/marktony/zhihudaily/homepage/MainActivity.java" target="_blank" rel="external">MainActivity.java</a></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">    setContentView(R.layout.activity_main);</div><div class="line"></div><div class="line">    initViews();</div><div class="line"></div><div class="line">	<span class="comment">// 启动服务</span></div><div class="line">    startService(<span class="keyword">new</span> Intent(<span class="keyword">this</span>, CacheService.class));</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</div><div class="line">    ActivityManager manager = (ActivityManager) getSystemService(Context.ACTIVITY_SERVICE);</div><div class="line">    <span class="keyword">for</span> (ActivityManager.RunningServiceInfo service : manager.getRunningServices(Integer.MAX_VALUE)) &#123;</div><div class="line">        <span class="keyword">if</span> (CacheService.class.getName().equals(service.service.getClassName())) &#123;</div><div class="line">            stopService(<span class="keyword">new</span> Intent(<span class="keyword">this</span>, CacheService.class));</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">super</span>.onDestroy();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>到这里，今天的内容就算结束了，内容是一周之中最多的一天，可能比前几天的总和还要多，可能需要你加班才能完全完成，之前Activity, Presenter, Fragment中各还有一部分内容没有完成，需要你自行补充完成。不过，看到自己的App正确的跑了起来，有木有很兴奋呢？休息休息，准备明天的工作吧。</p>
<h3 id="DAY-5"><a href="#DAY-5" class="headerlink" title="DAY 5"></a>DAY 5</h3><p>今天的内容是显示消息详情内容。因为我们的消息内容实际上有三种类型，这里就不再重复。怎么区分呢？我的方法是定义了一个枚举类型:</p>
<p><a href="https://github.com/TonnyL/PaperPlane/blob/master/app/src/main/java/com/marktony/zhihudaily/bean/BeanType.java" target="_blank" rel="external">BeanType.java</a></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">enum</span> BeanType &#123;</div><div class="line"></div><div class="line">    TYPE_ZHIHU,TYPE_GUOKR,TYPE_DOUBAN;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这样，我们就能根据不同的消息类型，获取和加载不同的消息详情内容了。</p>
<p><a href="https://github.com/TonnyL/PaperPlane/blob/master/app/src/main/java/com/marktony/zhihudaily/homepage/ZhihuDailyPresenter.java" target="_blank" rel="external">ZhihuDailyPresenter.java</a></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startReading</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line"></div><div class="line">    context.startActivity(<span class="keyword">new</span> Intent(context, DetailActivity.class)</div><div class="line">            .putExtra(<span class="string">"type"</span>, BeanType.TYPE_ZHIHU)</div><div class="line">            .putExtra(<span class="string">"id"</span>, list.get(position).getId())</div><div class="line">            .putExtra(<span class="string">"title"</span>, list.get(position).getTitle())</div><div class="line">            .putExtra(<span class="string">"coverUrl"</span>, list.get(position).getImages().get(<span class="number">0</span>)));</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="Day-5-界面编写"><a href="#Day-5-界面编写" class="headerlink" title="Day 5,界面编写"></a>Day 5,界面编写</h4><p>从知乎给我们的详情内容为HTML格式来看，用WebView作为显示控件最合适不过了(实际上果壳和豆瓣的详情页内容要么是返回了HTML格式，要么是直接给出了详情页的网页地址，做简单处理即可，可以实现复用)。</p>
<p>先看布局文件代码：</p>
<p><a href="https://github.com/TonnyL/PaperPlane/blob/master/app/src/main/res/layout/universal_read_layout.xml" target="_blank" rel="external">universal_read_layout.xml</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class="line">&lt;android.support.design.widget.CoordinatorLayout</div><div class="line">    xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class="line">    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;</div><div class="line">    android:layout_width=&quot;match_parent&quot;</div><div class="line">    android:layout_height=&quot;match_parent&quot;</div><div class="line">    android:fitsSystemWindows=&quot;true&quot;</div><div class="line">    android:id=&quot;@+id/coordinatorLayout&quot;&gt;</div><div class="line"></div><div class="line">    &lt;android.support.design.widget.AppBarLayout</div><div class="line">        android:id=&quot;@+id/app_bar&quot;</div><div class="line">        android:layout_width=&quot;match_parent&quot;</div><div class="line">        android:layout_height=&quot;@dimen/app_bar_height&quot;</div><div class="line">        android:fitsSystemWindows=&quot;true&quot;</div><div class="line">        android:theme=&quot;@style/AppTheme.AppBarOverlay&quot;&gt;</div><div class="line"></div><div class="line">        &lt;android.support.design.widget.CollapsingToolbarLayout</div><div class="line">            android:id=&quot;@+id/toolbar_layout&quot;</div><div class="line">            android:layout_width=&quot;match_parent&quot;</div><div class="line">            android:layout_height=&quot;match_parent&quot;</div><div class="line">            android:fitsSystemWindows=&quot;true&quot;</div><div class="line">            app:contentScrim=&quot;@color/colorPrimary&quot;</div><div class="line">            app:layout_scrollFlags=&quot;scroll|enterAlwaysCollapsed|enterAlways&quot;&gt;</div><div class="line"></div><div class="line">            &lt;ImageView</div><div class="line">                android:layout_width=&quot;match_parent&quot;</div><div class="line">                android:layout_height=&quot;match_parent&quot;</div><div class="line">                android:id=&quot;@+id/image_view&quot;</div><div class="line">                android:fitsSystemWindows=&quot;true&quot;</div><div class="line">                android:scaleType=&quot;centerCrop&quot;</div><div class="line">                android:scrollbarStyle=&quot;insideInset&quot;</div><div class="line">                android:scrollbarAlwaysDrawVerticalTrack=&quot;true&quot; /&gt;</div><div class="line"></div><div class="line">            &lt;android.support.v7.widget.Toolbar</div><div class="line">                android:id=&quot;@+id/toolbar&quot;</div><div class="line">                android:layout_width=&quot;match_parent&quot;</div><div class="line">                android:layout_height=&quot;?attr/actionBarSize&quot;</div><div class="line">                app:layout_collapseMode=&quot;pin&quot;</div><div class="line">                app:popupTheme=&quot;@style/AppTheme.PopupOverlay&quot;</div><div class="line">                app:background=&quot;@color/colorPrimary&quot;/&gt;</div><div class="line"></div><div class="line">        &lt;/android.support.design.widget.CollapsingToolbarLayout&gt;</div><div class="line"></div><div class="line">    &lt;/android.support.design.widget.AppBarLayout&gt;</div><div class="line"></div><div class="line">    &lt;android.support.v4.widget.SwipeRefreshLayout</div><div class="line">        android:layout_width=&quot;match_parent&quot;</div><div class="line">        android:layout_height=&quot;wrap_content&quot;</div><div class="line">        app:layout_behavior=&quot;@string/appbar_scrolling_view_behavior&quot;</div><div class="line">        android:id=&quot;@+id/refreshLayout&quot;&gt;</div><div class="line"></div><div class="line">        &lt;android.support.v4.widget.NestedScrollView</div><div class="line">            android:layout_width=&quot;match_parent&quot;</div><div class="line">            android:layout_height=&quot;match_parent&quot;</div><div class="line">            android:id=&quot;@+id/scrollView&quot;</div><div class="line">            android:scrollbars=&quot;vertical&quot;</div><div class="line">            android:scrollbarFadeDuration=&quot;1&quot;</div><div class="line">            android:fadeScrollbars=&quot;true&quot;&gt;</div><div class="line"></div><div class="line">            &lt;WebView</div><div class="line">                android:layout_width=&quot;match_parent&quot;</div><div class="line">                android:layout_height=&quot;match_parent&quot;</div><div class="line">                android:id=&quot;@+id/web_view&quot; /&gt;</div><div class="line"></div><div class="line">        &lt;/android.support.v4.widget.NestedScrollView&gt;</div><div class="line"></div><div class="line">    &lt;/android.support.v4.widget.SwipeRefreshLayout&gt;</div><div class="line"></div><div class="line">&lt;/android.support.design.widget.CoordinatorLayout&gt;</div></pre></td></tr></table></figure>
<p>将<code>ImageView</code>嵌入Toolbar中，然后搭配<code>CollapsingToolbarLayout</code>可收缩的ToolbarLayout，实现收缩和展开效果。<code>SwipeRefreshLayout</code>仍然用于显示加载状态和刷新。然后就齐活了。</p>
<p>接着是Activity。</p>
<p><a href="https://github.com/TonnyL/PaperPlane/blob/master/app/src/main/java/com/marktony/zhihudaily/detail/DetailActivity.java" target="_blank" rel="external">DetailActivity.java</a></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DetailActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> DetailFragment fragment;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.frame);</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (savedInstanceState != <span class="keyword">null</span>) &#123;</div><div class="line">            fragment = (DetailFragment) getSupportFragmentManager().getFragment(savedInstanceState,<span class="string">"detailFragment"</span>);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            fragment = <span class="keyword">new</span> DetailFragment();</div><div class="line">            getSupportFragmentManager().beginTransaction()</div><div class="line">                    .replace(R.id.container, fragment)</div><div class="line">                    .commit();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        Intent intent = getIntent();</div><div class="line"></div><div class="line">        DetailPresenter presenter = <span class="keyword">new</span> DetailPresenter(DetailActivity.<span class="keyword">this</span>, fragment);</div><div class="line"></div><div class="line">        presenter.setType((BeanType) intent.getSerializableExtra(<span class="string">"type"</span>));</div><div class="line">        presenter.setId(intent.getIntExtra(<span class="string">"id"</span>, <span class="number">0</span>));</div><div class="line">        presenter.setTitle(intent.getStringExtra(<span class="string">"title"</span>));</div><div class="line">        presenter.setCoverUrl(intent.getStringExtra(<span class="string">"coverUrl"</span>));</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onSaveInstanceState</span><span class="params">(Bundle outState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onSaveInstanceState(outState);</div><div class="line">        <span class="keyword">if</span> (fragment.isAdded()) &#123;</div><div class="line">            getSupportFragmentManager().putFragment(outState, <span class="string">"detailFragment"</span>, fragment);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>内容与首页类似，相信你能理解，也是通过Activity + Fragment搭配的方式进行的。那么，View层也就是Fragment需要完成那些功能呢？我们可以直接在契约类中定义好。</p>
<p><a href="https://github.com/TonnyL/PaperPlane/blob/master/app/src/main/java/com/marktony/zhihudaily/detail/DetailContract.java" target="_blank" rel="external">DetailContract.java</a></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DetailContract</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="class"><span class="keyword">interface</span> <span class="title">View</span> <span class="keyword">extends</span> <span class="title">BaseView</span>&lt;<span class="title">Presenter</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">		<span class="comment">// 显示正在加载</span></div><div class="line">        <span class="function"><span class="keyword">void</span> <span class="title">showLoading</span><span class="params">()</span></span>;</div><div class="line">		<span class="comment">// 停止加载</span></div><div class="line">        <span class="function"><span class="keyword">void</span> <span class="title">stopLoading</span><span class="params">()</span></span>;</div><div class="line">		<span class="comment">// 显示加载错误</span></div><div class="line">        <span class="function"><span class="keyword">void</span> <span class="title">showLoadingError</span><span class="params">()</span></span>;</div><div class="line">		<span class="comment">// 显示分享时错误</span></div><div class="line">        <span class="function"><span class="keyword">void</span> <span class="title">showSharingError</span><span class="params">()</span></span>;</div><div class="line">		<span class="comment">// 正确获取数据后显示内容</span></div><div class="line">        <span class="function"><span class="keyword">void</span> <span class="title">showResult</span><span class="params">(String result)</span></span>;</div><div class="line">		<span class="comment">// 对于body字段的消息，直接接在url的内容</span></div><div class="line">        <span class="function"><span class="keyword">void</span> <span class="title">showResultWithoutBody</span><span class="params">(String url)</span></span>;</div><div class="line">		<span class="comment">// 设置顶部大图</span></div><div class="line">        <span class="function"><span class="keyword">void</span> <span class="title">showCover</span><span class="params">(String url)</span></span>;</div><div class="line">		<span class="comment">// 设置标题</span></div><div class="line">        <span class="function"><span class="keyword">void</span> <span class="title">setTitle</span><span class="params">(String title)</span></span>;</div><div class="line">		<span class="comment">// 设置是否显示图片</span></div><div class="line">        <span class="function"><span class="keyword">void</span> <span class="title">setImageMode</span><span class="params">(<span class="keyword">boolean</span> showImage)</span></span>;</div><div class="line">		<span class="comment">// 用户选择在浏览器中打开时，如果没有安装浏览器，显示没有找到浏览器错误</span></div><div class="line">        <span class="function"><span class="keyword">void</span> <span class="title">showBrowserNotFoundError</span><span class="params">()</span></span>;</div><div class="line">		<span class="comment">// 显示已复制文字内容</span></div><div class="line">        <span class="function"><span class="keyword">void</span> <span class="title">showTextCopied</span><span class="params">()</span></span>;</div><div class="line">		<span class="comment">// 显示文字复制失败</span></div><div class="line">        <span class="function"><span class="keyword">void</span> <span class="title">showCopyTextError</span><span class="params">()</span></span>;</div><div class="line">		<span class="comment">// 显示已添加至收藏夹</span></div><div class="line">        <span class="function"><span class="keyword">void</span> <span class="title">showAddedToBookmarks</span><span class="params">()</span></span>;</div><div class="line">		<span class="comment">// 显示已从收藏夹中移除</span></div><div class="line">        <span class="function"><span class="keyword">void</span> <span class="title">showDeletedFromBookmarks</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="class"><span class="keyword">interface</span> <span class="title">Presenter</span> <span class="keyword">extends</span> <span class="title">BasePresenter</span></span>&#123;</div><div class="line"></div><div class="line">		<span class="comment">// 在浏览器中打开</span></div><div class="line">        <span class="function"><span class="keyword">void</span> <span class="title">openInBrowser</span><span class="params">()</span></span>;</div><div class="line">		<span class="comment">// 作为文字分享</span></div><div class="line">        <span class="function"><span class="keyword">void</span> <span class="title">shareAsText</span><span class="params">()</span></span>;</div><div class="line">		<span class="comment">// 打开文章中的链接</span></div><div class="line">        <span class="function"><span class="keyword">void</span> <span class="title">openUrl</span><span class="params">(WebView webView, String url)</span></span>;</div><div class="line">		<span class="comment">// 复制文字内容</span></div><div class="line">        <span class="function"><span class="keyword">void</span> <span class="title">copyText</span><span class="params">()</span></span>;</div><div class="line">		<span class="comment">// 复制文章链接</span></div><div class="line">        <span class="function"><span class="keyword">void</span> <span class="title">copyLink</span><span class="params">()</span></span>;</div><div class="line">		<span class="comment">// 添加至收藏夹或者从收藏夹中删除</span></div><div class="line">        <span class="function"><span class="keyword">void</span> <span class="title">addToOrDeleteFromBookmarks</span><span class="params">()</span></span>;</div><div class="line">		<span class="comment">// 查询是否已经被收藏了</span></div><div class="line">        <span class="function"><span class="keyword">boolean</span> <span class="title">queryIfIsBookmarked</span><span class="params">()</span></span>;</div><div class="line">		<span class="comment">// 请求数据</span></div><div class="line">        <span class="function"><span class="keyword">void</span> <span class="title">requestData</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><a href="https://github.com/TonnyL/PaperPlane/blob/master/app/src/main/java/com/marktony/zhihudaily/detail/DetailFragment.java" target="_blank" rel="external">DetailFragment.java</a></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DetailFragment</span> <span class="keyword">extends</span> <span class="title">Fragment</span></span></div><div class="line">        <span class="keyword">implements</span> <span class="title">DetailContract</span>.<span class="title">View</span> &#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DetailFragment</span><span class="params">()</span> </span>&#123;&#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(@Nullable Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Nullable</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> View <span class="title">onCreateView</span><span class="params">(LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        View view = inflater.inflate(R.layout.universal_read_layout, container, <span class="keyword">false</span>);</div><div class="line"></div><div class="line">        initViews(view);</div><div class="line"></div><div class="line">        setHasOptionsMenu(<span class="keyword">true</span>);</div><div class="line"></div><div class="line">        <span class="keyword">return</span> view;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreateOptionsMenu</span><span class="params">(Menu menu, MenuInflater inflater)</span> </span>&#123;</div><div class="line">        inflater.inflate(R.menu.menu_more, menu);</div><div class="line">        <span class="keyword">super</span>.onCreateOptionsMenu(menu, inflater);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onOptionsItemSelected</span><span class="params">(MenuItem item)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> id = item.getItemId();</div><div class="line">        <span class="keyword">if</span> (id == android.R.id.home) &#123;</div><div class="line">            getActivity().onBackPressed();</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (id == R.id.action_more) &#123;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showLoading</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stopLoading</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showLoadingError</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showSharingError</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showResult</span><span class="params">(String result)</span> </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showResultWithoutBody</span><span class="params">(String url)</span> </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showCover</span><span class="params">(String url)</span> </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTitle</span><span class="params">(String title)</span> </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">	<span class="comment">// WebView 提供了是否显示图片的方法</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setImageMode</span><span class="params">(<span class="keyword">boolean</span> showImage)</span> </span>&#123;</div><div class="line">		webView.getSettings().setBlockNetworkImage(showImage);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showBrowserNotFoundError</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showTextCopied</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showCopyTextError</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showAddedToBookmarks</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showDeletedFromBookmarks</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPresenter</span><span class="params">(DetailContract.Presenter presenter)</span> </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initViews</span><span class="params">(View view)</span> </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// to change the title's font size of toolbar layout</span></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setCollapsingToolbarLayoutTitle</span><span class="params">(String title)</span> </span>&#123;</div><div class="line">		toolbarLayout.setTitle(title);</div><div class="line">        toolbarLayout.setExpandedTitleTextAppearance(R.style.ExpandedAppBar);</div><div class="line">        toolbarLayout.setCollapsedTitleTextAppearance(R.style.CollapsedAppBar);</div><div class="line">        toolbarLayout.setExpandedTitleTextAppearance(R.style.ExpandedAppBarPlus1);</div><div class="line">        toolbarLayout.setCollapsedTitleTextAppearance(R.style.CollapsedAppBarPlus1);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="Day-5-实体类"><a href="#Day-5-实体类" class="headerlink" title="Day 5,实体类"></a>Day 5,实体类</h4><p>布局文件完成了，现在开始写实体类。方法和昨天写列表项实体类一样，可以手动编写，也可以用插件直接生成。直接放代码。</p>
<p>JSON格式数据:</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"body"</span>: <span class="string">"HTML格式内容"</span>,</div><div class="line">  <span class="attr">"image_source"</span>: <span class="string">"《那些年，我们一起追的女孩》"</span>,</div><div class="line">  <span class="attr">"title"</span>: <span class="string">"瞎扯 · 如何正确地吐槽"</span>,</div><div class="line">  <span class="attr">"image"</span>: <span class="string">"http://pic1.zhimg.com/13ee386166c53553ea6997d821609e0c.jpg"</span>,</div><div class="line">  <span class="attr">"share_url"</span>: <span class="string">"http://daily.zhihu.com/story/9195072"</span>,</div><div class="line">  <span class="attr">"js"</span>: [],</div><div class="line">  <span class="attr">"ga_prefix"</span>: <span class="string">"020706"</span>,</div><div class="line">  <span class="attr">"section"</span>: &#123;</div><div class="line">    <span class="attr">"thumbnail"</span>: <span class="string">"http://pic2.zhimg.com/1dc9cf1556c7b0b1527c18476698c5cd.jpg"</span>,</div><div class="line">    <span class="attr">"id"</span>: <span class="number">2</span>,</div><div class="line">    <span class="attr">"name"</span>: <span class="string">"瞎扯"</span></div><div class="line">  &#125;,</div><div class="line">  <span class="attr">"images"</span>: [</div><div class="line">    <span class="string">"http://pic2.zhimg.com/1dc9cf1556c7b0b1527c18476698c5cd.jpg"</span></div><div class="line">  ],</div><div class="line">  <span class="attr">"type"</span>: <span class="number">0</span>,</div><div class="line">  <span class="attr">"id"</span>: <span class="number">9195072</span>,</div><div class="line">  <span class="attr">"css"</span>: [</div><div class="line">    <span class="string">"http://news-at.zhihu.com/css/news_qa.auto.css?v=4b3e3"</span></div><div class="line">  ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>对应的实体类：<br><a href="https://github.com/TonnyL/PaperPlane/blob/master/app/src/main/java/com/marktony/zhihudaily/bean/ZhihuDailyStory.java" target="_blank" rel="external">ZhihuDailyStory.java</a></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZhihuDailyStory</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> String body;</div><div class="line">    <span class="keyword">private</span> String image_source;</div><div class="line">    <span class="keyword">private</span> String title;</div><div class="line">    <span class="keyword">private</span> String image;</div><div class="line">    <span class="keyword">private</span> String share_url;</div><div class="line">    <span class="keyword">private</span> ArrayList&lt;String&gt; js;</div><div class="line">    <span class="keyword">private</span> String ga_prefix;</div><div class="line">    <span class="keyword">private</span> ArrayList&lt;String&gt; images;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> type;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</div><div class="line">    <span class="keyword">private</span> ArrayList&lt;String&gt; css;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getBody</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> body;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBody</span><span class="params">(String body)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.body = body;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getImage_source</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> image_source;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setImage_source</span><span class="params">(String image_source)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.image_source = image_source;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getTitle</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> title;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTitle</span><span class="params">(String title)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.title = title;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getImage</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> image;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setImage</span><span class="params">(String image)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.image = image;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getShare_url</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> share_url;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setShare_url</span><span class="params">(String share_url)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.share_url = share_url;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> ArrayList&lt;String&gt; <span class="title">getJs</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> js;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setJs</span><span class="params">(ArrayList&lt;String&gt; js)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.js = js;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getGa_prefix</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> ga_prefix;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setGa_prefix</span><span class="params">(String ga_prefix)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.ga_prefix = ga_prefix;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> ArrayList&lt;String&gt; <span class="title">getImages</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> images;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setImages</span><span class="params">(ArrayList&lt;String&gt; images)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.images = images;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getType</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> type;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setType</span><span class="params">(<span class="keyword">int</span> type)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.type = type;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> id;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.id = id;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> ArrayList&lt;String&gt; <span class="title">getCss</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> css;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCss</span><span class="params">(ArrayList&lt;String&gt; css)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.css = css;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="Day-5-显示数据"><a href="#Day-5-显示数据" class="headerlink" title="Day 5,显示数据"></a>Day 5,显示数据</h4><p>嘻嘻，首先当然是获取数据了☺️，需要考虑网络连接的情况，如果网络通畅，则直接从网络中获取，否则去数据库中获取。</p>
<p><a href="https://github.com/TonnyL/PaperPlane/blob/master/app/src/main/java/com/marktony/zhihudaily/detail/DetailPresenter.java" target="_blank" rel="external">DetailPresenter.java</a></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (NetworkState.networkConnected(context)) &#123;</div><div class="line">    model.load(Api.ZHIHU_NEWS + id, <span class="keyword">new</span> OnStringListener() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSuccess</span><span class="params">(String result)</span> </span>&#123;</div><div class="line">            &#123;</div><div class="line">                Gson gson = <span class="keyword">new</span> Gson();</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    zhihuDailyStory = gson.fromJson(result, ZhihuDailyStory.class);</div><div class="line">                    <span class="keyword">if</span> (zhihuDailyStory.getBody() == <span class="keyword">null</span>) &#123;</div><div class="line">                        view.showResultWithoutBody(zhihuDailyStory.getShare_url());</div><div class="line">                    &#125; <span class="keyword">else</span> &#123;</div><div class="line">                        view.showResult(convertZhihuContent(zhihuDailyStory.getBody()));</div><div class="line">                    &#125;</div><div class="line">                &#125; <span class="keyword">catch</span> (JsonSyntaxException e) &#123;</div><div class="line">                    view.showLoadingError();</div><div class="line">                &#125;</div><div class="line">                view.stopLoading();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(VolleyError error)</span> </span>&#123;</div><div class="line">            view.stopLoading();</div><div class="line">            view.showLoadingError();</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">    Cursor cursor = dbHelper.getReadableDatabase()</div><div class="line">            .query(<span class="string">"Zhihu"</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);</div><div class="line">    <span class="keyword">if</span> (cursor.moveToFirst()) &#123;</div><div class="line">        do &#123;</div><div class="line">            <span class="keyword">if</span> (cursor.getInt(cursor.getColumnIndex(<span class="string">"zhihu_id"</span>)) == id) &#123;</div><div class="line">                String content = cursor.getString(cursor.getColumnIndex(<span class="string">"zhihu_content"</span>));</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    zhihuDailyStory = gson.fromJson(content, ZhihuDailyStory.class);</div><div class="line">                &#125; <span class="keyword">catch</span> (JsonSyntaxException e) &#123;</div><div class="line">                    view.showResult(content);</div><div class="line">                &#125;</div><div class="line">                view.showResult(convertZhihuContent(zhihuDailyStory.getBody()));</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">while</span> (cursor.moveToNext());</div><div class="line">    &#125;</div><div class="line">    cursor.close();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> String <span class="title">convertZhihuContent</span><span class="params">(String preResult)</span> </span>&#123;</div><div class="line"></div><div class="line">    preResult = preResult.replace(<span class="string">"&lt;div class=\"img-place-holder\"&gt;"</span>, <span class="string">""</span>);</div><div class="line">    preResult = preResult.replace(<span class="string">"&lt;div class=\"headline\"&gt;"</span>, <span class="string">""</span>);</div><div class="line"></div><div class="line">    <span class="comment">// 在api中，css的地址是以一个数组的形式给出，这里需要设置</span></div><div class="line">    <span class="comment">// api中还有js的部分，这里不再解析js</span></div><div class="line">    <span class="comment">// 不再选择加载网络css，而是加载本地assets文件夹中的css</span></div><div class="line">    String css = <span class="string">"&lt;link rel=\"stylesheet\" href=\"file:///android_asset/zhihu_daily.css\" type=\"text/css\"&gt;"</span>;</div><div class="line"></div><div class="line">    String theme = <span class="string">"&lt;body className=\"\" onload=\"onLoaded()\"&gt;"</span>;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> StringBuilder()</div><div class="line">            .append(<span class="string">"&lt;!DOCTYPE html&gt;\n"</span>)</div><div class="line">            .append(<span class="string">"&lt;html lang=\"en\" xmlns=\"http://www.w3.org/1999/xhtml\"&gt;\n"</span>)</div><div class="line">            .append(<span class="string">"&lt;head&gt;\n"</span>)</div><div class="line">            .append(<span class="string">"\t&lt;meta charset=\"utf-8\" /&gt;"</span>)</div><div class="line">            .append(css)</div><div class="line">            .append(<span class="string">"\n&lt;/head&gt;\n"</span>)</div><div class="line">            .append(theme)</div><div class="line">            .append(preResult)</div><div class="line">            .append(<span class="string">"&lt;/body&gt;&lt;/html&gt;"</span>).toString();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>对获取的数据进行一下拼接，组成一个完整的HTML页面的内容。需要注意的是CSS文件，它负责整个HTML的样式，可以在<a href="https://github.com/TonnyL/PaperPlane/blob/master/app/src/main/assets/zhihu_daily.css" target="_blank" rel="external">这里</a>查看整个CSS文件的内容或下载CSS文件。</p>
<p>最后的显示就非常简单了：</p>
<p><a href="https://github.com/TonnyL/PaperPlane/blob/master/app/src/main/java/com/marktony/zhihudaily/detail/DetailFragment.java" target="_blank" rel="external">DetailFragment.java</a></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showResult</span><span class="params">(String result)</span> </span>&#123;</div><div class="line">    webView.loadDataWithBaseURL(<span class="string">"x-data://base"</span>,result,<span class="string">"text/html"</span>,<span class="string">"utf-8"</span>,<span class="keyword">null</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>至此，最基本的显示详情内容的部分就已经完成了。实际上，我们还有很多的工作细微的工作没有完成，喝杯咖啡，休息一下，再回来继续吧。</p>
<h4 id="Day-5-设置与关于"><a href="#Day-5-设置与关于" class="headerlink" title="Day 5,设置与关于"></a>Day 5,设置与关于</h4><p>设置与关于也和首页及详情相同，采用的是Activity + Fragment搭配的形式。不过，这里的Fragment并不是我们前面所见到的<code>android.support.v4.app.Fragment</code>下的Fragment，而是<code>android.support.v7.preference.PreferenceFragmentCompat</code>。通过<br><code>PreferenceFragmentCompat</code>，我们可以很快的实现设置与关于页面。(由于二者的实现方法类似，我就以实现关于页面为例)</p>
<p>首先，我们需要在<code>res</code>目录下新建<code>xml</code>文件夹，新建<code>about_preference_fragment.xml</code>文件，作为设置和关于页面的布局文件。</p>
<p><a href="https://github.com/TonnyL/PaperPlane/blob/master/app/src/main/res/xml/about_preference_fragment.xml" target="_blank" rel="external">about_preference_fragment.xml</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class="line">&lt;android.support.v7.preference.PreferenceScreen</div><div class="line">    xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;</div><div class="line"></div><div class="line">    &lt;android.support.v7.preference.PreferenceCategory android:title=&quot;@string/app_name&quot;&gt;</div><div class="line"></div><div class="line">        &lt;android.support.v7.preference.Preference android:title=&quot;@string/version&quot; /&gt;</div><div class="line"></div><div class="line">        &lt;android.support.v7.preference.Preference android:title=&quot;@string/rate&quot;</div><div class="line">            android:key=&quot;rate&quot;</div><div class="line">            android:summary=&quot;@string/rate_description&quot; /&gt;</div><div class="line"></div><div class="line">    &lt;/android.support.v7.preference.PreferenceCategory&gt;</div><div class="line"></div><div class="line">    &lt;android.support.v7.preference.PreferenceCategory android:title=&quot;@string/author&quot;&gt;</div><div class="line"></div><div class="line">        &lt;android.support.v7.preference.Preference android:title=&quot;@string/author_name&quot;</div><div class="line">            android:key=&quot;author&quot;</div><div class="line">            android:summary=&quot;@string/author_description&quot;/&gt;</div><div class="line"></div><div class="line">        &lt;android.support.v7.preference.Preference</div><div class="line">            android:title=&quot;@string/follow_me_on_github&quot;</div><div class="line">            android:key=&quot;follow_me_on_github&quot;</div><div class="line">            android:summary=&quot;@string/github_url&quot;/&gt;</div><div class="line"></div><div class="line">        &lt;android.support.v7.preference.Preference</div><div class="line">            android:title=&quot;@string/follow_me_on_zhihu&quot;</div><div class="line">            android:key=&quot;follow_me_on_zhihu&quot;</div><div class="line">            android:summary=&quot;@string/zhihu_account&quot;/&gt;</div><div class="line"></div><div class="line">    &lt;/android.support.v7.preference.PreferenceCategory&gt;</div><div class="line"></div><div class="line">    &lt;android.support.v7.preference.PreferenceCategory android:title=&quot;@string/support&quot;&gt;</div><div class="line"></div><div class="line">        &lt;android.support.v7.preference.Preference android:title=&quot;@string/feedback&quot;</div><div class="line">            android:key=&quot;feedback&quot;</div><div class="line">            android:summary=&quot;@string/feedback_description&quot;/&gt;</div><div class="line"></div><div class="line">        &lt;android.support.v7.preference.Preference android:title=&quot;@string/coffee&quot;</div><div class="line">            android:key=&quot;coffee&quot;</div><div class="line">            android:summary=&quot;@string/coffee_description&quot;/&gt;</div><div class="line"></div><div class="line">        &lt;android.support.v7.preference.Preference android:title=&quot;@string/open_source_license&quot;</div><div class="line">            android:key=&quot;open_source_license&quot; /&gt;</div><div class="line"></div><div class="line">    &lt;/android.support.v7.preference.PreferenceCategory&gt;</div><div class="line"></div><div class="line">&lt;/android.support.v7.preference.PreferenceScreen&gt;</div></pre></td></tr></table></figure>
<p>这样，布局文件就已经完成了。接下来是和首页等类似的，分别完成<code>Contract</code>,<code>Activity</code>,<code>Fragment</code>,<code>Presenter</code>。</p>
<p><a href="https://github.com/TonnyL/PaperPlane/blob/master/app/src/main/java/com/marktony/zhihudaily/about/AboutContract.java" target="_blank" rel="external">AboutContract.java</a></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AboutContract</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="class"><span class="keyword">interface</span> <span class="title">View</span> <span class="keyword">extends</span> <span class="title">BaseView</span>&lt;<span class="title">Presenter</span>&gt;</span>&#123;</div><div class="line"></div><div class="line">		<span class="comment">// 如果用户设备没有安装商店应用，提示此错误</span></div><div class="line">        <span class="function"><span class="keyword">void</span> <span class="title">showRateError</span><span class="params">()</span></span>;</div><div class="line">		<span class="comment">// 如果用户设备没有安装邮件应用，提示此错误</span></div><div class="line">        <span class="function"><span class="keyword">void</span> <span class="title">showFeedbackError</span><span class="params">()</span></span>;</div><div class="line">		<span class="comment">// 如果用户没有安装浏览器，提示此错误</span></div><div class="line">        <span class="function"><span class="keyword">void</span> <span class="title">showBrowserNotFoundError</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="class"><span class="keyword">interface</span> <span class="title">Presenter</span> <span class="keyword">extends</span> <span class="title">BasePresenter</span> </span>&#123;</div><div class="line">		<span class="comment">// 在应用商店中评分</span></div><div class="line">        <span class="function"><span class="keyword">void</span> <span class="title">rate</span><span class="params">()</span></span>;</div><div class="line">		<span class="comment">// 展示开源许可页</span></div><div class="line">        <span class="function"><span class="keyword">void</span> <span class="title">openLicense</span><span class="params">()</span></span>;</div><div class="line">		<span class="comment">// 在GitHub上关注我</span></div><div class="line">        <span class="function"><span class="keyword">void</span> <span class="title">followOnGithub</span><span class="params">()</span></span>;</div><div class="line">		<span class="comment">// 在知乎上关注我</span></div><div class="line">        <span class="function"><span class="keyword">void</span> <span class="title">followOnZhihu</span><span class="params">()</span></span>;</div><div class="line">		<span class="comment">// 通过邮件反馈</span></div><div class="line">        <span class="function"><span class="keyword">void</span> <span class="title">feedback</span><span class="params">()</span></span>;</div><div class="line">		<span class="comment">// 捐赠</span></div><div class="line">        <span class="function"><span class="keyword">void</span> <span class="title">donate</span><span class="params">()</span></span>;</div><div class="line">		<span class="comment">// 显示小彩蛋</span></div><div class="line">        <span class="function"><span class="keyword">void</span> <span class="title">showEasterEgg</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><a href="https://github.com/TonnyL/PaperPlane/blob/master/app/src/main/java/com/marktony/zhihudaily/about/AboutPreferenceActivity.java" target="_blank" rel="external">AboutPreferenceActivity.java</a></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AboutPreferenceActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_about);</div><div class="line"></div><div class="line">        initViews();</div><div class="line"></div><div class="line">        AboutPreferenceFragment fragment = <span class="keyword">new</span> AboutPreferenceFragment();</div><div class="line"></div><div class="line">        getSupportFragmentManager()</div><div class="line">                .beginTransaction()</div><div class="line">                .add(R.id.about_container,fragment)</div><div class="line">                .commit();</div><div class="line"></div><div class="line">        <span class="keyword">new</span> AboutPresenter(AboutPreferenceActivity.<span class="keyword">this</span>, fragment);</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initViews</span><span class="params">()</span> </span>&#123;</div><div class="line">        setSupportActionBar((Toolbar) findViewById(R.id.toolbar));</div><div class="line">        getSupportActionBar().setDisplayHomeAsUpEnabled(<span class="keyword">true</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onOptionsItemSelected</span><span class="params">(MenuItem item)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (item.getItemId() == android.R.id.home)&#123;</div><div class="line">            onBackPressed();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.onOptionsItemSelected(item);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>是不是有种似曾相识的感觉呢😉？</p>
<p><a href="https://github.com/TonnyL/PaperPlane/blob/master/app/src/main/java/com/marktony/zhihudaily/about/AboutPreferenceFragment.java" target="_blank" rel="external">AboutPreferenceFragment.java</a></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AboutPreferenceFragment</span> <span class="keyword">extends</span> <span class="title">PreferenceFragmentCompat</span></span></div><div class="line">        <span class="keyword">implements</span> <span class="title">AboutContract</span>.<span class="title">View</span> &#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Toolbar toolbar;</div><div class="line">    <span class="keyword">private</span> AboutContract.Presenter presenter;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreatePreferences</span><span class="params">(Bundle savedInstanceState, String rootKey)</span> </span>&#123;</div><div class="line"></div><div class="line">        addPreferencesFromResource(R.xml.about_preference_fragment);</div><div class="line"></div><div class="line">        initViews(getView());</div><div class="line"></div><div class="line">        findPreference(<span class="string">"rate"</span>).setOnPreferenceClickListener(<span class="keyword">new</span> android.support.v7.preference.Preference.OnPreferenceClickListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onPreferenceClick</span><span class="params">(android.support.v7.preference.Preference preference)</span> </span>&#123;</div><div class="line">                presenter.rate();</div><div class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        findPreference(<span class="string">"open_source_license"</span>).setOnPreferenceClickListener(<span class="keyword">new</span> android.support.v7.preference.Preference.OnPreferenceClickListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onPreferenceClick</span><span class="params">(android.support.v7.preference.Preference preference)</span> </span>&#123;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        findPreference(<span class="string">"follow_me_on_github"</span>).setOnPreferenceClickListener(<span class="keyword">new</span> android.support.v7.preference.Preference.OnPreferenceClickListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onPreferenceClick</span><span class="params">(android.support.v7.preference.Preference preference)</span> </span>&#123;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        findPreference(<span class="string">"follow_me_on_zhihu"</span>).setOnPreferenceClickListener(<span class="keyword">new</span> android.support.v7.preference.Preference.OnPreferenceClickListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onPreferenceClick</span><span class="params">(android.support.v7.preference.Preference preference)</span> </span>&#123;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        findPreference(<span class="string">"feedback"</span>).setOnPreferenceClickListener(<span class="keyword">new</span> android.support.v7.preference.Preference.OnPreferenceClickListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onPreferenceClick</span><span class="params">(android.support.v7.preference.Preference preference)</span> </span>&#123;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        findPreference(<span class="string">"coffee"</span>).setOnPreferenceClickListener(<span class="keyword">new</span> android.support.v7.preference.Preference.OnPreferenceClickListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onPreferenceClick</span><span class="params">(android.support.v7.preference.Preference preference)</span> </span>&#123;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        findPreference(<span class="string">"author"</span>).setOnPreferenceClickListener(<span class="keyword">new</span> Preference.OnPreferenceClickListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onPreferenceClick</span><span class="params">(Preference preference)</span> </span>&#123;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResume</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onResume();</div><div class="line">        presenter.start();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPresenter</span><span class="params">(AboutContract.Presenter presenter)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (presenter != <span class="keyword">null</span>)&#123;</div><div class="line">            <span class="keyword">this</span>.presenter = presenter;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initViews</span><span class="params">(View view)</span> </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showRateError</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showFeedbackError</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showBrowserNotFoundError</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>不知道你主要到没有，这里有一些代码和我们常见的有所不同。例如，<code>onCreatePreferences</code>方法，<code>addPreferencesFromResource</code>方法等。</p>
<p><a href="https://github.com/TonnyL/PaperPlane/blob/master/app/src/main/java/com/marktony/zhihudaily/about/AboutPresenter.java" target="_blank" rel="external">AboutPresenter.java</a></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AboutPresenter</span> <span class="keyword">implements</span> <span class="title">AboutContract</span>.<span class="title">Presenter</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AboutPresenter</span><span class="params">(AppCompatActivity activity, AboutContract.View view)</span> </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rate</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            Uri uri = Uri.parse(<span class="string">"market://details?id="</span> + activity.getPackageName());</div><div class="line">            Intent intent = <span class="keyword">new</span> Intent(Intent.ACTION_VIEW,uri);</div><div class="line">            intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);</div><div class="line">            activity.startActivity(intent);</div><div class="line">        &#125; <span class="keyword">catch</span> (android.content.ActivityNotFoundException ex)&#123;</div><div class="line">            view.showRateError();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">openLicense</span><span class="params">()</span> </span>&#123;</div><div class="line">		activity.startActivity(<span class="keyword">new</span> Intent(activity,OpenSourceLicenseActivity.class));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">   <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">followOnGithub</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (sp.getBoolean(<span class="string">"in_app_browser"</span>,<span class="keyword">true</span>))&#123;</div><div class="line">            CustomTabActivityHelper.openCustomTab(</div><div class="line">                    activity,</div><div class="line">                    customTabsIntent.build(),</div><div class="line">                    Uri.parse(activity.getString(R.string.github_url)),</div><div class="line">                    <span class="keyword">new</span> CustomFallback() &#123;</div><div class="line">                        <span class="meta">@Override</span></div><div class="line">                        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">openUri</span><span class="params">(Activity activity, Uri uri)</span> </span>&#123;</div><div class="line">                            <span class="keyword">super</span>.openUri(activity, uri);</div><div class="line">                        &#125;</div><div class="line">                    &#125;);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">try</span>&#123;</div><div class="line">                activity.startActivity(<span class="keyword">new</span> Intent(Intent.ACTION_VIEW).setData(Uri.parse( activity.getString(R.string.github_url))));</div><div class="line">            &#125; <span class="keyword">catch</span> (android.content.ActivityNotFoundException ex)&#123;</div><div class="line">                view.showBrowserNotFoundError();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">followOnZhihu</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">feedback</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">try</span>&#123;</div><div class="line">            Uri uri = Uri.parse(activity.getString(R.string.sendto));</div><div class="line">            Intent intent = <span class="keyword">new</span> Intent(Intent.ACTION_SENDTO,uri);</div><div class="line">            intent.putExtra(Intent.EXTRA_SUBJECT, activity.getString(R.string.mail_topic));</div><div class="line">            intent.putExtra(Intent.EXTRA_TEXT,</div><div class="line">                    activity.getString(R.string.device_model) + Build.MODEL + <span class="string">"\n"</span></div><div class="line">                            + activity.getString(R.string.sdk_version) + Build.VERSION.RELEASE + <span class="string">"\n"</span></div><div class="line">                            + activity.getString(R.string.version));</div><div class="line">            activity.startActivity(intent);</div><div class="line">        &#125;<span class="keyword">catch</span> (android.content.ActivityNotFoundException ex)&#123;</div><div class="line">            view.showFeedbackError();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">donate</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showEasterEgg</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>具体的实现逻辑我没有给出，你可以在源代码中找到。需要注意的一些小细节，例如，在反馈操作中，我们是通过调用邮件App实现的。如下:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">feedback</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">try</span>&#123;</div><div class="line">        Uri uri = Uri.parse(activity.getString(R.string.sendto));</div><div class="line">        Intent intent = <span class="keyword">new</span> Intent(Intent.ACTION_SENDTO,uri);</div><div class="line">        intent.putExtra(Intent.EXTRA_SUBJECT, activity.getString(R.string.mail_topic));</div><div class="line">        intent.putExtra(Intent.EXTRA_TEXT,</div><div class="line">                activity.getString(R.string.device_model) + Build.MODEL + <span class="string">"\n"</span></div><div class="line">                        + activity.getString(R.string.sdk_version) + Build.VERSION.RELEASE + <span class="string">"\n"</span></div><div class="line">                        + activity.getString(R.string.version));</div><div class="line">        activity.startActivity(intent);</div><div class="line">    &#125;<span class="keyword">catch</span> (android.content.ActivityNotFoundException ex)&#123;</div><div class="line">        view.showFeedbackError();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>为毛要做try…catch的操作呢？难道用户的设备上会连邮件App都没有安装吗？当然会。有的设备上甚至连浏览器都没有安装，所以，try…catch还是很有必要的。</p>
<p>需要提起的是，设置页面，我们需要对用户的偏好进行存储，然后在需要的地方获取这个值就好了，而PreferenceScreen本身就具有这样的功能，不再需要额外的SharedPreference去存储。在我的代码你可能会看到这样的情况，这是因为我并不是在项目的最初就引进了<code>PreferenceScreen</code>，当时就是直接用不同的控件搭配成的设置界面，用<code>SharedPreference</code>存储信息，后来引入了支持库之后，为了不破坏用户的体验(例如，某次版本升级直接导致之前的设置偏好全部失效)，坚持使用了这样一个‘多此一举’的方法。</p>
<p>至此，今天的工作就完成的差不多了，好好休息一下，工作最多的两天已经过去了。冬天过去了，春天还会远吗？在正式结束今天的工作之前，请先看一下 <strong>DAY 7</strong> 中 <strong>在Google Play上线</strong> 第一小节的内容，我们有一项任务需要完成–注册Google Play开发者账号，因为GP对开发者账号的审核48小时(实际体验不需要那么久，大概24小时左右，看人品罗)，所以，咱们先做好准备工作吧。</p>
<h3 id="DAY-6"><a href="#DAY-6" class="headerlink" title="DAY 6"></a>DAY 6</h3><p>终于来到了Day 6，还有一天就要完成此次教程了。加油！</p>
<h4 id="Day-6-文章收藏"><a href="#Day-6-文章收藏" class="headerlink" title="Day 6,文章收藏"></a>Day 6,文章收藏</h4><p>我们在之前设计数据库时，就在表中插入了一个<code>bookmark</code>字段，用于标示当前一行是否被收藏。我们先看看如何添加收藏和取消收藏。</p>
<p><a href="https://github.com/TonnyL/PaperPlane/blob/master/app/src/main/java/com/marktony/zhihudaily/detail/DetailPresenter.java" target="_blank" rel="external">DetailPresenter.java</a></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (queryIfIsBookmarked()) &#123;</div><div class="line">    <span class="comment">// delete</span></div><div class="line">    <span class="comment">// update Zhihu set bookmark = 0 where zhihu_id = id</span></div><div class="line">    ContentValues values = <span class="keyword">new</span> ContentValues();</div><div class="line">    values.put(<span class="string">"bookmark"</span>, <span class="number">0</span>);</div><div class="line">    dbHelper.getWritableDatabase().update(tmpTable, values, tmpId + <span class="string">" = ?"</span>, <span class="keyword">new</span> String[]&#123;String.valueOf(id)&#125;);</div><div class="line">    values.clear();</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="comment">// add</span></div><div class="line">    <span class="comment">// update Zhihu set bookmark = 1 where zhihu_id = id</span></div><div class="line">    ContentValues values = <span class="keyword">new</span> ContentValues();</div><div class="line">    values.put(<span class="string">"bookmark"</span>, <span class="number">1</span>);</div><div class="line">    dbHelper.getWritableDatabase().update(tmpTable, values, tmpId + <span class="string">" = ?"</span>, <span class="keyword">new</span> String[]&#123;String.valueOf(id)&#125;);</div><div class="line">    values.clear();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>那么如果在收藏页面中展示出来呢？套路，仍然是之前的套路。还是熟悉的配方，还是原来的味道。</p>
<p>布局文件也就是简单的一个列表，代码和之前首页的代码相同，不再写出。</p>
<p><a href="https://github.com/TonnyL/PaperPlane/blob/master/app/src/main/java/com/marktony/zhihudaily/bookmarks/BookmarksContract.java" target="_blank" rel="external">BookmarksContract.java</a></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BookmarksContract</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="class"><span class="keyword">interface</span> <span class="title">View</span> <span class="keyword">extends</span> <span class="title">BaseView</span>&lt;<span class="title">Presenter</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">		<span class="comment">// 显示结果</span></div><div class="line">        <span class="function"><span class="keyword">void</span> <span class="title">showResults</span><span class="params">(ArrayList&lt;ZhihuDailyNews.Question&gt; zhihuList,</span></span></div><div class="line">                         ArrayList&lt;GuokrHandpickNews.result&gt; guokrList,</div><div class="line">                         ArrayList&lt;DoubanMomentNews.posts&gt; doubanList,</div><div class="line">                         ArrayList&lt;Integer&gt; types);</div><div class="line"></div><div class="line">		<span class="comment">// 提示数据变化</span></div><div class="line">        <span class="function"><span class="keyword">void</span> <span class="title">notifyDataChanged</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">		<span class="comment">// 显示正在加载</span></div><div class="line">        <span class="function"><span class="keyword">void</span> <span class="title">showLoading</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">		<span class="comment">// 停止加载</span></div><div class="line">        <span class="function"><span class="keyword">void</span> <span class="title">stopLoading</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="class"><span class="keyword">interface</span> <span class="title">Presenter</span> <span class="keyword">extends</span> <span class="title">BasePresenter</span> </span>&#123;</div><div class="line"></div><div class="line">		<span class="comment">// 请求结果</span></div><div class="line">        <span class="function"><span class="keyword">void</span> <span class="title">loadResults</span><span class="params">(<span class="keyword">boolean</span> refresh)</span></span>;</div><div class="line"></div><div class="line">		<span class="comment">// 跳转到详情页面</span></div><div class="line">        <span class="function"><span class="keyword">void</span> <span class="title">startReading</span><span class="params">(BeanType type, <span class="keyword">int</span> position)</span></span>;</div><div class="line"></div><div class="line">		<span class="comment">// 请求新数据</span></div><div class="line">        <span class="function"><span class="keyword">void</span> <span class="title">checkForFreshData</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">		<span class="comment">// 随便看看</span></div><div class="line">        <span class="function"><span class="keyword">void</span> <span class="title">feelLucky</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><a href="https://github.com/TonnyL/PaperPlane/blob/master/app/src/main/java/com/marktony/zhihudaily/bookmarks/BookmarksFragment.java" target="_blank" rel="external">BookmarksFragment.java</a></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookmarksFragment</span> <span class="keyword">extends</span> <span class="title">Fragment</span></span></div><div class="line">        <span class="keyword">implements</span> <span class="title">BookmarksContract</span>.<span class="title">View</span> &#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> RecyclerView recyclerView;</div><div class="line">    <span class="keyword">private</span> SwipeRefreshLayout refreshLayout;</div><div class="line">    <span class="keyword">private</span> BookmarksAdapter adapter;</div><div class="line">    <span class="keyword">private</span> BookmarksContract.Presenter presenter;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BookmarksFragment</span><span class="params">()</span> </span>&#123;&#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> BookmarksFragment <span class="title">newInstance</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BookmarksFragment();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(@Nullable Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Nullable</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> View <span class="title">onCreateView</span><span class="params">(LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        View view = inflater.inflate(R.layout.fragment_list, container, <span class="keyword">false</span>);</div><div class="line"></div><div class="line">        initViews(view);</div><div class="line"></div><div class="line">        setHasOptionsMenu(<span class="keyword">true</span>);</div><div class="line"></div><div class="line">        presenter.loadResults(<span class="keyword">false</span>);</div><div class="line"></div><div class="line">        refreshLayout.setOnRefreshListener(<span class="keyword">new</span> SwipeRefreshLayout.OnRefreshListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onRefresh</span><span class="params">()</span> </span>&#123;</div><div class="line">                presenter.loadResults(<span class="keyword">true</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        <span class="keyword">return</span> view;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPresenter</span><span class="params">(BookmarksContract.Presenter presenter)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (presenter != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">this</span>.presenter = presenter;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initViews</span><span class="params">(View view)</span> </span>&#123;</div><div class="line"></div><div class="line">        recyclerView = (RecyclerView) view.findViewById(R.id.recyclerView);</div><div class="line">        recyclerView.setLayoutManager(<span class="keyword">new</span> LinearLayoutManager(getActivity()));</div><div class="line"></div><div class="line">        refreshLayout = (SwipeRefreshLayout) view.findViewById(R.id.refreshLayout);</div><div class="line">        refreshLayout.setColorSchemeResources(R.color.colorPrimary);</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreateOptionsMenu</span><span class="params">(Menu menu, MenuInflater inflater)</span> </span>&#123;</div><div class="line">        inflater.inflate(R.menu.menu_bookmarks, menu);</div><div class="line">        <span class="keyword">super</span>.onCreateOptionsMenu(menu, inflater);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onOptionsItemSelected</span><span class="params">(MenuItem item)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> id = item.getItemId();</div><div class="line">        <span class="keyword">if</span> (id == R.id.action_search) &#123;</div><div class="line">            startActivity(<span class="keyword">new</span> Intent(getActivity(), SearchActivity.class));</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (id == R.id.action_feel_lucky) &#123;</div><div class="line">            presenter.feelLucky();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showResults</span><span class="params">(ArrayList&lt;ZhihuDailyNews.Question&gt; zhihuList,</span></span></div><div class="line">                            ArrayList&lt;GuokrHandpickNews.result&gt; guokrList,</div><div class="line">                            ArrayList&lt;DoubanMomentNews.posts&gt; doubanList,</div><div class="line">                            ArrayList&lt;Integer&gt; types) &#123;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (adapter == <span class="keyword">null</span>) &#123;</div><div class="line"></div><div class="line">            adapter = <span class="keyword">new</span> BookmarksAdapter(getActivity(), zhihuList, guokrList, doubanList, types);</div><div class="line">            adapter.setItemListener(<span class="keyword">new</span> OnRecyclerViewOnClickListener() &#123;</div><div class="line">                <span class="meta">@Override</span></div><div class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">OnItemClick</span><span class="params">(View v, <span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line">                    <span class="keyword">int</span> type = recyclerView.findViewHolderForLayoutPosition(position).getItemViewType();</div><div class="line">                    <span class="keyword">if</span> (type == BookmarksAdapter.TYPE_ZHIHU_NORMAL) &#123;</div><div class="line">                        presenter.startReading(BeanType.TYPE_ZHIHU, position);</div><div class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type == BookmarksAdapter.TYPE_GUOKR_NORMAL) &#123;</div><div class="line">                        presenter.startReading(BeanType.TYPE_GUOKR, position);</div><div class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type == BookmarksAdapter.TYPE_DOUBAN_NORMAL) &#123;</div><div class="line">                        presenter.startReading(BeanType.TYPE_DOUBAN, position);</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;);</div><div class="line">            recyclerView.setAdapter(adapter);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            adapter.notifyDataSetChanged();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notifyDataChanged</span><span class="params">()</span> </span>&#123;</div><div class="line">        presenter.loadResults(<span class="keyword">true</span>);</div><div class="line">        adapter.notifyDataSetChanged();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showLoading</span><span class="params">()</span> </span>&#123;</div><div class="line">        refreshLayout.setRefreshing(<span class="keyword">true</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stopLoading</span><span class="params">()</span> </span>&#123;</div><div class="line">        refreshLayout.setRefreshing(<span class="keyword">false</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><a href="https://github.com/TonnyL/PaperPlane/blob/master/app/src/main/java/com/marktony/zhihudaily/bookmarks/BookmarksPresenter.java" target="_blank" rel="external">BookmarksPresenter.java</a></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookmarksPresenter</span> <span class="keyword">implements</span> <span class="title">BookmarksContract</span>.<span class="title">Presenter</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> BookmarksContract.View view;</div><div class="line">    <span class="keyword">private</span> Context context;</div><div class="line">    <span class="keyword">private</span> Gson gson;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> ArrayList&lt;DoubanMomentNews.posts&gt; doubanList;</div><div class="line">    <span class="keyword">private</span> ArrayList&lt;GuokrHandpickNews.result&gt; guokrList;</div><div class="line">    <span class="keyword">private</span> ArrayList&lt;ZhihuDailyNews.Question&gt; zhihuList;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> ArrayList&lt;Integer&gt; types;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> DatabaseHelper dbHelper;</div><div class="line">    <span class="keyword">private</span> SQLiteDatabase db;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BookmarksPresenter</span><span class="params">(Context context, BookmarksContract.View view)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.context = context;</div><div class="line">        <span class="keyword">this</span>.view = view;</div><div class="line">        <span class="keyword">this</span>.view.setPresenter(<span class="keyword">this</span>);</div><div class="line">        gson = <span class="keyword">new</span> Gson();</div><div class="line">        dbHelper = <span class="keyword">new</span> DatabaseHelper(context, <span class="string">"History.db"</span>, <span class="keyword">null</span>, <span class="number">5</span>);</div><div class="line">        db = dbHelper.getWritableDatabase();</div><div class="line"></div><div class="line">        zhihuList = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">        guokrList = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">        doubanList = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line"></div><div class="line">        types = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">loadResults</span><span class="params">(<span class="keyword">boolean</span> refresh)</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (!refresh) &#123;</div><div class="line">            view.showLoading();</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            zhihuList.clear();</div><div class="line">            guokrList.clear();</div><div class="line">            doubanList.clear();</div><div class="line">            types.clear();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        checkForFreshData();</div><div class="line"></div><div class="line">        view.showResults(zhihuList, guokrList, doubanList, types);</div><div class="line"></div><div class="line">        view.stopLoading();</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startReading</span><span class="params">(BeanType type, <span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line">        Intent intent = <span class="keyword">new</span> Intent(context, DetailActivity.class);</div><div class="line">        <span class="keyword">switch</span> (type) &#123;</div><div class="line">            <span class="keyword">case</span> TYPE_ZHIHU:</div><div class="line">                ZhihuDailyNews.Question q = zhihuList.get(position - <span class="number">1</span>);</div><div class="line">                intent.putExtra(<span class="string">"type"</span>, BeanType.TYPE_ZHIHU);</div><div class="line">                intent.putExtra(<span class="string">"id"</span>,q.getId());</div><div class="line">                intent.putExtra(<span class="string">"title"</span>, q.getTitle());</div><div class="line">                intent.putExtra(<span class="string">"coverUrl"</span>, q.getImages().get(<span class="number">0</span>));</div><div class="line">                <span class="keyword">break</span>;</div><div class="line"></div><div class="line">            <span class="keyword">case</span> TYPE_GUOKR:</div><div class="line">                GuokrHandpickNews.result r = guokrList.get(position - zhihuList.size() - <span class="number">2</span>);</div><div class="line">                intent.putExtra(<span class="string">"type"</span>, BeanType.TYPE_GUOKR);</div><div class="line">                intent.putExtra(<span class="string">"id"</span>, r.getId());</div><div class="line">                intent.putExtra(<span class="string">"title"</span>, r.getTitle());</div><div class="line">                intent.putExtra(<span class="string">"coverUrl"</span>, r.getHeadline_img());</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> TYPE_DOUBAN:</div><div class="line">                DoubanMomentNews.posts p = doubanList.get(position - zhihuList.size() - guokrList.size() - <span class="number">3</span>);</div><div class="line">                intent.putExtra(<span class="string">"type"</span>, BeanType.TYPE_DOUBAN);</div><div class="line">                intent.putExtra(<span class="string">"id"</span>, p.getId());</div><div class="line">                intent.putExtra(<span class="string">"title"</span>, p.getTitle());</div><div class="line">                <span class="keyword">if</span> (p.getThumbs().size() == <span class="number">0</span>)&#123;</div><div class="line">                    intent.putExtra(<span class="string">"coverUrl"</span>, <span class="string">""</span>);</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    intent.putExtra(<span class="string">"image"</span>, p.getThumbs().get(<span class="number">0</span>).getMedium().getUrl());</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">default</span>:</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">        context.startActivity(intent);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">checkForFreshData</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="comment">// every first one of the 3 lists is with header</span></div><div class="line">        <span class="comment">// add them in advance</span></div><div class="line"></div><div class="line">        types.add(TYPE_ZHIHU_WITH_HEADER);</div><div class="line">        Cursor cursor = db.rawQuery(<span class="string">"select * from Zhihu where bookmark = ?"</span>, <span class="keyword">new</span> String[]&#123;<span class="string">"1"</span>&#125;);</div><div class="line">        <span class="keyword">if</span> (cursor.moveToFirst()) &#123;</div><div class="line">            do &#123;</div><div class="line">                ZhihuDailyNews.Question question = gson.fromJson(cursor.getString(cursor.getColumnIndex(<span class="string">"zhihu_news"</span>)), ZhihuDailyNews.Question.class);</div><div class="line">                zhihuList.add(question);</div><div class="line">                types.add(TYPE_ZHIHU_NORMAL);</div><div class="line">            &#125; <span class="keyword">while</span> (cursor.moveToNext());</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        types.add(TYPE_GUOKR_WITH_HEADER);</div><div class="line">        cursor = db.rawQuery(<span class="string">"select * from Guokr where bookmark = ?"</span>, <span class="keyword">new</span> String[]&#123;<span class="string">"1"</span>&#125;);</div><div class="line">        <span class="keyword">if</span> (cursor.moveToFirst()) &#123;</div><div class="line">            do &#123;</div><div class="line">                GuokrHandpickNews.result result = gson.fromJson(cursor.getString(cursor.getColumnIndex(<span class="string">"guokr_news"</span>)), GuokrHandpickNews.result.class);</div><div class="line">                guokrList.add(result);</div><div class="line">                types.add(TYPE_GUOKR_NORMAL);</div><div class="line">            &#125; <span class="keyword">while</span> (cursor.moveToNext());</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        types.add(TYPE_DOUBAN_WITH_HEADER);</div><div class="line">        cursor = db.rawQuery(<span class="string">"select * from Douban where bookmark = ?"</span>, <span class="keyword">new</span> String[]&#123;<span class="string">"1"</span>&#125;);</div><div class="line">        <span class="keyword">if</span> (cursor.moveToFirst()) &#123;</div><div class="line">            do &#123;</div><div class="line">                DoubanMomentNews.posts post = gson.fromJson(cursor.getString(cursor.getColumnIndex(<span class="string">"douban_news"</span>)), DoubanMomentNews.posts.class);</div><div class="line">                doubanList.add(post);</div><div class="line">                types.add(TYPE_DOUBAN_NORMAL);</div><div class="line">            &#125; <span class="keyword">while</span> (cursor.moveToNext());</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        cursor.close();</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">feelLucky</span><span class="params">()</span> </span>&#123;</div><div class="line">        Random random = <span class="keyword">new</span> Random();</div><div class="line">        <span class="keyword">int</span> p = random.nextInt(types.size());</div><div class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</div><div class="line">            <span class="keyword">if</span> (types.get(p) == BookmarksAdapter.TYPE_ZHIHU_NORMAL) &#123;</div><div class="line">                startReading(BeanType.TYPE_ZHIHU, p);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (types.get(p) == BookmarksAdapter.TYPE_GUOKR_NORMAL) &#123;</div><div class="line">                startReading(BeanType.TYPE_GUOKR, p);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (types.get(p) == BookmarksAdapter.TYPE_DOUBAN_NORMAL) &#123;</div><div class="line">                startReading(BeanType.TYPE_DOUBAN, p);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                p = random.nextInt(types.size());</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>🤔，用户可以从收藏列表页面查看内容详情，可能在这里，用户取消了收藏，而我们就需要及时地刷新界面数据，否则就会影响用户的体验。</p>
<h4 id="Day-6-夜间模式"><a href="#Day-6-夜间模式" class="headerlink" title="Day 6,夜间模式"></a>Day 6,夜间模式</h4><p>关于夜间模式的实现，请查看文章<a href="https://TonnyL.github.io/2016/12/31/%E7%AE%80%E6%B4%81%E4%BC%98%E9%9B%85%E5%9C%B0%E5%AE%9E%E7%8E%B0%E5%A4%9C%E9%97%B4%E6%A8%A1%E5%BC%8F/">简洁优雅地实现夜间模式</a>或者<a href="http://www.jianshu.com/p/dcfcfcbda7ac" target="_blank" rel="external">这里</a>。</p>
<h4 id="Day-6-版本适配"><a href="#Day-6-版本适配" class="headerlink" title="Day 6,版本适配"></a>Day 6,版本适配</h4><p>事实上，版本适配的范围非常的广泛。例如，多语言适配，高低Android版本的适配，还有对多屏幕的适配，特殊用户的适配等等。</p>
<ol>
<li><p>多语言适配</p>
<p> 在<code>res</code>目录下新建不同的<code>values</code>目录，例如，需要适配英语就新建<code>values-en</code>目录，简体中文<code>values-zh-rCN</code>，繁体中文(台湾)<code>values-zh-rTW</code>，繁体中文(香港)<code>values-zh-rHK</code>，等等。(这些代码不区分大小写；r 前缀用于区分区域码。 不能单独指定区域。)</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">.</div><div class="line">├── app</div><div class="line">├──├── res</div><div class="line">├──  ── ├── values</div><div class="line">├──  ──  ── ├── strings.xml</div><div class="line">├──  ── ├── values-en</div><div class="line">├──  ──  ── ├── strings.xml</div><div class="line">├──  ── ├── values-zh-rCN</div><div class="line">├──  ──  ── ├── strings.xml</div><div class="line">├──  ── ├── values-zh-rHK</div><div class="line">├──  ──  ── ├── strings.xml</div></pre></td></tr></table></figure>
<p> <img src="http://upload-images.jianshu.io/upload_images/2440049-ce4abc2ef966df77.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Multi-language"></p>
<p> 更多内容请点击<a href="https://developer.android.com/training/basics/supporting-devices/languages.html" target="_blank" rel="external">这里</a>。</p>
</li>
<li><p>高低Android版本适配</p>
<p> 关于Android碎片化的讨论已经非常多了，这里我就不再鞭尸了。只简单的举两个例子。在Android 4.1 Jelly Bean系统的华为手机上，系统的DatePicker的样式是这样的。</p>
<p> <img src="https://ww2.sinaimg.cn/large/006tKfTcgy1fcity9flprj30dc0nqmxv.jpg" alt="JellyBean"></p>
<p> 很明显，这和我们Material Design的设计语言很违和，使用开源库<code>materialdatetimepicker</code>就可以在这样的低版本的设备上实现MD版本的Date Picker Dialog。实现UI的统一对提升用户体验还是很有帮助的。</p>
<p> 对于高版本，例如Android 7.x Nougat，有很多的新特性，例如新的通知栏，Shortcuts等等，可以参考我的另外一篇文章<a href="http://www.jianshu.com/p/f56f2e709ad8" target="_blank" rel="external">老司机带你吃牛轧糖–适配Android 7.1 Nougat新特性</a>，虽然用上最新系统的用户量可能不大，但是当这些用户看到我们的应用适配了这些新特性时，应该也会感觉到眼前一亮吧，起到了锦上添花的作用。</p>
</li>
<li><p>支持多种屏幕</p>
<p> 和多语言适配类似，我们也可以通过提供不同资源文件的方式实现适配。例如，以下应用资源目录 为不同屏幕尺寸和不同可绘制对象提供不同的布局设计。使用 mipmap/ 文件夹放置 启动器图标。</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">res/layout/my_layout.xml              // layout for normal screen size (&quot;default&quot;)</div><div class="line">res/layout-large/my_layout.xml        // layout for large screen size</div><div class="line">res/layout-xlarge/my_layout.xml       // layout for extra-large screen size</div><div class="line">res/layout-xlarge-land/my_layout.xml  // layout for extra-large in landscape orientation</div><div class="line"></div><div class="line">res/drawable-mdpi/graphic.png         // bitmap for medium-density</div><div class="line">res/drawable-hdpi/graphic.png         // bitmap for high-density</div><div class="line">res/drawable-xhdpi/graphic.png        // bitmap for extra-high-density</div><div class="line">res/drawable-xxhdpi/graphic.png       // bitmap for extra-extra-high-density</div><div class="line"></div><div class="line">res/mipmap-mdpi/my_icon.png         // launcher icon for medium-density</div><div class="line">res/mipmap-hdpi/my_icon.png         // launcher icon for high-density</div><div class="line">res/mipmap-xhdpi/my_icon.png        // launcher icon for extra-high-density</div><div class="line">res/mipmap-xxhdpi/my_icon.png       // launcher icon for extra-extra-high-density</div><div class="line">res/mipmap-xxxhdpi/my_icon.png      // launcher icon for extra-extra-extra-high-density</div></pre></td></tr></table></figure>
<p> 更多内容请点击<a href="https://developer.android.com/guide/practices/screens_support.html" target="_blank" rel="external">这里</a>。</p>
</li>
<li><p>其他适配</p>
<p>例如，<a href="http://www.jianshu.com/p/f952d9c71d91" target="_blank" rel="external">提升体验-支持Chrome Custom Tabs</a>。</p>
</li>
</ol>
<p>哈，做完今天的工作，编码的工作就完成的差不多了。好好的睡一觉，准备明天的工作。</p>
<h3 id="DAY-7"><a href="#DAY-7" class="headerlink" title="DAY 7"></a>DAY 7</h3><h4 id="Day-7-在Google-Play上线"><a href="#Day-7-在Google-Play上线" class="headerlink" title="Day 7,在Google Play上线"></a>Day 7,在Google Play上线</h4><ol>
<li><p>注册Google Play开发者账号</p>
<p> 工具准备：</p>
<ul>
<li>科学上网，你懂的</li>
<li>Chrome浏览器或Firefox浏览器</li>
<li>$25，25刀的注册费用</li>
<li><p>支持国际支付功能(VISA, Master等)的信用卡，便于支付25刀的注册费</p>
<p>好了，我们现在开始正式的搞事情。</p>
</li>
</ul>
<ol>
<li><p>注册Google账号</p>
<p> 如果你已经有了Google账号，就直接跳过这一小步吧。</p>
<p> 我们先去 <a href="https://accounts.google.com/SignUp" target="_blank" rel="external">https://accounts.google.com/SignUp</a> 注册账号。按照自身的信息填写即可。<br> <img src="https://ww2.sinaimg.cn/large/006tKfTcgy1fcixwzqtxcj31hv23eqi8.jpg" alt="创建您的 Google 帐号"></p>
</li>
<li><p>登录开发者后台</p>
<p> 登录 <a href="https://play.google.com/apps/publish/signup/" target="_blank" rel="external">https://play.google.com/apps/publish/signup/</a> 。<br> <img src="https://ww3.sinaimg.cn/large/006tKfTcgy1fciycauuj7j31kw106drh.jpg" alt="Google Play Console"></p>
<p> 勾选同意并点击继续付款。需要注意的是，我们要先进到付款页面，然后再绑定Google Wallet。否则的话，就不能保证付款成功了。</p>
</li>
<li><p>付款</p>
<p> 点击添加新的付款方式，一路按提示输入即可(由于我之前已经注册过了，这里盗用一下被人的图，原作者请不要打我😂)。<br> <img src="https://ww3.sinaimg.cn/large/006tKfTcgy1fciyt3vjxuj310i0nhgnd.jpg" alt="Payment"><br> <img src="https://ww2.sinaimg.cn/large/006tKfTcgy1fciytuwh7wj310i0nhwg8.jpg" alt="Payment"></p>
<p> 如果绑定成功，Google可能会先从信用卡中扣除$1进行授权。</p>
</li>
<li><p>审核</p>
<p> Google最多需要48小时进行审核。我们可以通过<a href="https://wallet.google.com/" target="_blank" rel="external">Google Wallet</a>查看该订单的支付状态。如果显示<code>已完成</code>，就说明GP账号申请成功了。</p>
</li>
<li><p>没有信用卡怎么办？</p>
<p> 相信有很多像我一样的学生党，没有信用卡或者信用卡不支持国际支付功能，该怎么解决呢？这个时候，就是万能的某宝发挥作用的时候了。有一种信用卡叫做<code>虚拟信用卡</code>，我们可以通过向虚拟信用卡充值，然后用这样的卡去支付那25刀。具体的地址等咨询店小二即可。如果你觉得这样的方法太繁琐，或者我有钱任性，那么直接在马爸爸的网站上直接买一个开发者账号吧，不过一般情况下，费用肯定是高于25美刀的，而且安全性也值得检验(如果你打算买账号，那么务必在拿到账号之后第一时间修改密码和认证信息等等)。</p>
<p>通过上面的步骤，我们申请到的账号还只能发布免费的应用。如果对应用进行收费，你可以查看控制台中<code>财务报表</code>，获取更多商家账户的信息。</p>
<p>更多信息，请点击<a href="https://support.google.com/googleplay/android-developer/answer/6112435?hl=zh-Hans" target="_blank" rel="external">这里</a>。</p>
</li>
</ol>
</li>
<li><p>有了账号，我们就需要生成APK文件了。</p>
<p> 在保证项目正确运行的情况下(记得更换应用图标)，我们点击菜单项中的<code>Build</code> –&gt; <code>Generate Signed APK...</code>，对APK进行签名。</p>
<p> <img src="https://ww3.sinaimg.cn/large/006tKfTcgy1fcizu57nbqj30k40iygq3.jpg" alt="Generate Signed APK..."></p>
<p> 选择生成APK的Module。</p>
<p> <img src="https://ww4.sinaimg.cn/large/006tKfTcgy1fcizxsepj2j30uo0mqwh6.jpg" alt="app"></p>
<p> 这时候需要我们选择key，用于对APK签名。</p>
<p> <img src="https://ww1.sinaimg.cn/large/006tKfTcgy1fcizygdo80j30uo0mqgoz.jpg" alt="key"></p>
<p> Key的作用是为了保证每个应用程序开发商合法ID，防止部分开放商可能通过使用相同的Package Name来混淆替换已经安装的程序，我们需要对我们发布的APK文件进行唯一签名，保证我们每次发布的版本的一致性(如自动更新不会因为版本不一致而无法安装)。</p>
<p> 如果没有Key，我们就需要创建一个。选择<code>Create new...</code>创建。</p>
<p> <img src="https://ww4.sinaimg.cn/large/006tKfTcgy1fcj095fzroj30ze0vqdl0.jpg" alt="Create new key"></p>
<p> 各种信息对应如下：</p>
<p> 名称 | 描述<br> — | —<br> Key store path | key的存储路径<br> Password | key的密码<br> Confirm | 确认密码<br> Alias | 别名<br> Validity(years) | 有效期限(年)<br> First and Last Name | 姓名<br> Organizational Unit | 组织单位<br> Organization | 组织<br> City of Location | 所在城市<br> State or Province | 省<br> Country Code(XX) | 国家代码</p>
<p> 填写完信息后，点击OK生成。这里生成的key一定要妥善保管，以后我们对应用进行版本更新时，需要用到。</p>
<p> 新建成功后，我们选择刚刚生成的key，输入密码，点击<code>Next</code> –&gt; <code>Finish</code>。</p>
<p> <img src="https://ww4.sinaimg.cn/large/006tKfTcgy1fcj0nfxqiaj30uo0mqtcd.jpg" alt="Next"></p>
<p> <img src="https://ww3.sinaimg.cn/large/006tKfTcgy1fcj0o691u1j30uo0mqadm.jpg" alt="Finish"></p>
</li>
<li><p>上传应用</p>
<p> 现在我们就可以把应用上传到Google Play了。</p>
<p> 3.1. 添加APK</p>
<ul>
<li><p>3.1.1. 转到 <a href="https://play.google.com/apps/publish/" target="_blank" rel="external">Google Play Developer Console</a>。</p>
</li>
<li><p>3.1.2. 依次选择<code>所有应用</code> –&gt; <code>+ 创建应用</code>。</p>
<p>  <img src="https://ww1.sinaimg.cn/large/006tKfTcgy1fcj10u1etcj31kw08y40b.jpg" alt="Google Play Console"></p>
</li>
<li><p>3.1.3 使用下拉菜单选择默认语言，并为您的应用添加标题。输入您想要在 Google Play 中显示的应用名称。</p>
<p>  <img src="https://ww2.sinaimg.cn/large/006tKfTcgy1fcj1bo68lpj31kw106aj8.jpg" alt="Create new app"></p>
</li>
<li><p>3.1.4 选择上传 APK。</p>
<p>  <img src="https://ww4.sinaimg.cn/large/006tKfTcgy1fcj1k3x3yuj31kw10648b.jpg" alt=""></p>
<p>3.2. 设置商品详情</p>
<p><img src="https://ww3.sinaimg.cn/large/006tKfTcgy1fcj1h9a33lj31kw106k1i.jpg" alt=""></p>
<p>我们需要为我们的应用设置<code>商品详情</code>，<code>图片资源</code>，<code>语言和翻译</code>，<code>分类</code>，<code>详细联系信息</code>，<code>隐私权政策</code>，等。对于程序员来说，最困难的应该就是各种图片了吧，在没有设计师的情况下，就让我们程序员发挥灵魂画师的功力吧，哈哈😆。</p>
<p>3.3. 后续步骤</p>
<p>我们还需要完成的步骤有：</p>
</li>
<li><p>填写应用的内容分级问卷</p>
</li>
<li>了解如何将应用发布到不同的国家/地区以及Android计划</li>
<li>使用标准或定时发布应用</li>
<li><p>通过实验优化商品详情</p>
<p>更多信息，请点击<a href="https://support.google.com/googleplay/android-developer/answer/113469?hl=zh-Hans" target="_blank" rel="external">这里</a>。</p>
<p>哈，到这里，应用上传就完成了，现在等待应用发布审核成功就好了。</p>
</li>
</ul>
</li>
</ol>
<h4 id="Day-7-在GitHub开源"><a href="#Day-7-在GitHub开源" class="headerlink" title="Day 7,在GitHub开源"></a>Day 7,在GitHub开源</h4><ol>
<li><p>注册GitHub</p>
<p> <a href="https://github.com" target="_blank" rel="external">GitHub</a>是一个 <del>同性交友社区</del> 面向开源及私有软件项目的托管平台，作为开源代码库以及版本控制系统，Github拥有超过900万开发者用户。随着越来越多的应用程序转移到了云上，Github已经成为了管理软件开发以及发现已有代码的首选方法。</p>
<p> 我们先注册账号，地址为: <a href="https://github.com" target="_blank" rel="external">https://github.com</a> 。</p>
<p> <img src="https://ww4.sinaimg.cn/large/006y8lVagy1fcj2es7qjbj31kw106x6p.jpg" alt="GitHub"></p>
<p> 账号注册成功后，进入 <del>GayHub</del> GitHub 个人信息页，大概是这个样子的。</p>
<p> <img src="https://ww1.sinaimg.cn/large/006y8lVagy1fcj2kj9rahj31kw106gxt.jpg" alt="MyGitHub"></p>
<p> 第一步的工作就完成了。</p>
</li>
<li><p>安装Git</p>
<p> <a href="https://git-scm.com/" target="_blank" rel="external">Git</a>是一款免费、开源的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目。官网的介绍是这样的：</p>
<blockquote>
<p>Git is a free and open source distributed version control system designed to handle everything from small to very large projects with speed and efficiency.</p>
</blockquote>
<p> 下载Git，地址为 <a href="https://git-scm.com/downloads" target="_blank" rel="external">https://git-scm.com/downloads</a> ，下载对应版本即可。</p>
<ul>
<li>在macOS上，在 Mac 上安装 Git 有多种方式。<ul>
<li>最简单的方法是安装 Xcode Command Line Tools。 Mavericks （10.9） 或更高版本的系统中，在 Terminal 里尝试首次运行 git 命令即可。 如果没有安装过命令行开发者工具，将会提示你安装。</li>
<li>如果你想安装更新的版本，可以使用二进制安装程序。 官方维护的 OSX Git 安装程序可以在 Git 官方网站下载，网址为 <a href="http://git-scm.com/download/mac。" target="_blank" rel="external">http://git-scm.com/download/mac。</a></li>
</ul>
</li>
<li><p>在Windows上，在 Windows 上安装 Git 也有几种安装方法。</p>
<ul>
<li><p>官方版本可以在 Git 官方网站下载。 打开 <a href="http://git-scm.com/download/win，下载会自动开始。" target="_blank" rel="external">http://git-scm.com/download/win，下载会自动开始。</a> 要注意这是一个名为 Git for Windows的项目（也叫做 msysGit），和 Git 是分别独立的项目；更多信息请访问 <a href="http://msysgit.github.io/。" target="_blank" rel="external">http://msysgit.github.io/。</a></p>
</li>
<li><p>另一个简单的方法是安装 GitHub for Windows。 该安装程序包含图形化和命令行版本的 Git。 它也能支持 Powershell，提供了稳定的凭证缓存和健全的 CRLF 设置。 稍后我们会对这方面有更多了解，现在只要一句话就够了，这些都是你所需要的。 你可以在 GitHub for Windows 网站下载，网址为 <a href="http://windows.github.com。" target="_blank" rel="external">http://windows.github.com。</a></p>
</li>
</ul>
</li>
<li><p>在Linux上，我们可以通过下面的方法安装。</p>
<p>   如果你想在 Linux 上用二进制安装程序来安装 Git，可以使用发行版包含的基础软件包管理工具来安装。</p>
<ul>
<li><p>如果以 Fedora 上为例，你可以使用 yum:</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo yum install git</div></pre></td></tr></table></figure>
<ul>
<li><p>如果你在基于 Debian 的发行版上，请尝试用 apt-get：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo apt-get install git</div></pre></td></tr></table></figure>
</li>
</ul>
<p>要了解更多选择，Git 官方网站上有在各种 Unix 风格的系统上安装步骤，网址为 <a href="http://git-scm.com/download/linux。" target="_blank" rel="external">http://git-scm.com/download/linux。</a></p>
</li>
</ul>
<p>更多信息，请点击<a href="https://git-scm.com/book/zh/v2/%E8%B5%B7%E6%AD%A5-%E5%AE%89%E8%A3%85-Git" target="_blank" rel="external">这里</a>。</p>
<p>OK，我们可以测试一下Git是否安装成功。在命令行中输入命令<code>git --version</code>查看git 的版本信息：</p>
<p><img src="https://ww4.sinaimg.cn/large/006y8lVagy1fcj3gn7ux4j312q0qk77y.jpg" alt="Git Version"></p>
</li>
</ul>
</li>
<li><p>在Android Studio中配置Git和GitHub</p>
<ol>
<li><p>打开Android Stuido，进入<code>Android Studio</code> –&gt; <code>Preferences</code> –&gt; <code>Version Control</code> –&gt; <code>Git</code>，(Windows为<code>File</code> –&gt; <code>Settings</code> –&gt; <code>Version Control</code> –&gt; <code>Git</code>)，在<code>Path to Git executable</code>中定位到你的Git安装目录，然后点击Test，如果成功你将会看到下面的提示信息。</p>
<p> <img src="https://ww3.sinaimg.cn/large/006y8lVagy1fcj46ixzqmj31kw131ah9.jpg" alt="Init Git"></p>
<p> <img src="https://ww1.sinaimg.cn/large/006tNc79gy1fcj497m0pqj30oo0a4t9s.jpg" alt="Git test success"></p>
</li>
<li><p>然后在左侧设置项中选择GitHub，然后输入你刚刚注册好的GitHub账号信息，点击test，如果成功你将会看到下面的提示信息。</p>
<p> <img src="https://ww4.sinaimg.cn/large/006tNc79gy1fcj4gvunlbj31kw13144p.jpg" alt="Init GitHub"></p>
<p> <img src="https://ww1.sinaimg.cn/large/006tNc79gy1fcj4j85oz5j30oo0a474y.jpg" alt="GitHub test success"></p>
</li>
</ol>
</li>
<li><p>托管代码</p>
<ol>
<li><p>为当前工程创建一个实用且漂亮的<code>README.MD</code>文件吧。</p>
<p> 在项目根目录下新建一个<code>README.MD</code>文件，<code>MD</code>表示这是一份<code>Markdown</code>文件。</p>
<p> <img src="https://ww2.sinaimg.cn/large/006tNc79gy1fcj55v5oqlj30lw0ls413.jpg" alt="Add a readme file"></p>
<p> <code>README</code>文件作为说明文件，作用是让浏览者能够快速地了解项目。<br> 因此，我们在写作README时，应该包括以下几点：</p>
<ul>
<li>为什么会有这个项目，介绍项目开发的背景</li>
<li>项目的用途是什么，介绍项目所解决的问题</li>
<li>怎样使用该项目</li>
<li>项目的开发历程，版本变化(可选)</li>
<li>未来的开发计划(可选)</li>
<li>Q&amp;A(可选)</li>
<li>项目所使用的许可条款文件</li>
</ul>
<p>(我的建议是提供一份英文版的README.MD文档，让我们的项目不仅仅帮助同胞，也帮助歪果仁吧。)</p>
</li>
<li><p>将当前工程导入版本控制，创建Git仓库(可选)</p>
<p> <img src="https://ww1.sinaimg.cn/large/006tNc79gy1fcj4ql3vs3j30yi0okwmo.jpg" alt="Create Git Repository"></p>
</li>
<li><p>分享到GitHub上</p>
<p> <img src="https://ww3.sinaimg.cn/large/006tNc79gy1fcj5jifdx3j30y20q0n5l.jpg" alt="Share Project on GitHub"></p>
<p> <img src="https://ww2.sinaimg.cn/large/006tNc79gy1fcj5o47zsqj30tm0jcq60.jpg" alt="Share Project on GitHub"></p>
<p> 然后我们就可以在GitHub的网站上看到我们的项目了。下面是我的<a href="https://github.com/TonnyL/PaperPlane" target="_blank" rel="external">纸飞机</a>的项目主页。</p>
<p> <img src="https://ww2.sinaimg.cn/large/006tNc79gy1fcj5vq0sqaj31kw106qfk.jpg" alt="GitHub Repository"></p>
</li>
</ol>
</li>
</ol>
<h4 id="Day-7-Q-amp-A"><a href="#Day-7-Q-amp-A" class="headerlink" title="Day 7,Q&amp;A"></a>Day 7,Q&amp;A</h4><p>至此，项目完成，教程也接近尾声。泡杯咖啡，我们来聊聊代码之外的事情。</p>
<ul>
<li>Q: 为什么会有这篇文章？</li>
<li><p>A: 一方面是受到各种大牛的影响，迫切地想要为开源贡献自己的力量；另一方面，<a href="https://github.com/TonnyL/PaperPlane" target="_blank" rel="external">纸飞机</a>项目的维护时间已经接近一年，这篇文章也算是一个小小的总结；然后是希望通过我的文章，能够让后面的童鞋们少踩一些坑。</p>
</li>
<li><p>Q: 一周时间并没有完成项目，怎么办？</p>
</li>
<li><p>A: 项目的代码量还是很大的，而项目现在的代码也是我用MVP架构重构之后的。就我自己而言，理解MVP架构我就花了一段时间，而且，MVP较MVC，代码量本身也是增加的。没有完成的话，就多花点时间吧。(文章的标题似乎有点标题党的嫌疑呢)</p>
</li>
<li><p>Q: 版权问题？</p>
</li>
<li><p>A: 恩，上线未经版权所有方如知乎等的许可，我们的确是侵权了。所以，请务必知晓可能承担的后果。(貌似是挖了个坑呢😂)</p>
</li>
<li><p>Q: 为什么是Google Play，而不是几60应用商店，某度应用商店呢？</p>
</li>
<li><p>A: 瞧不上。(我不是针对在座的某一个应用商店，我是说在座的各个应用商店，除了Google Play，都是那啥)</p>
</li>
<li><p>Q: 我有问题需要探讨，怎么联系？</p>
</li>
<li><p>A:</p>
<ul>
<li>marktonymengyi#gmail.com</li>
<li><a href="https://www.zhihu.com/people/kirin-momo" target="_blank" rel="external">知乎</a></li>
<li><a href="http://weibo.com/5313690193/profile?topnav=1&amp;wvr=6" target="_blank" rel="external">微博</a></li>
<li><a href="https://github.com/TonnyL" target="_blank" rel="external">GitHub</a></li>
<li>我的个人博客地址:<a href="https://TonnyL.github.io/">https://TonnyL.github.io/</a></li>
</ul>
</li>
<li><p>Q: 最后有什么想说的？</p>
</li>
<li>A: 如果文章对你有帮助的话，请给文章点一个赞，或者给项目一个Star，土豪请随意打赏，集齐30块钱我想要买本关于Git的书😂。(如果有大牛有实习机会的话，请推荐一下我呀)(文笔不好，还请多包涵)</li>
</ul>
<p>感谢您的阅读~~~</p>
<p>本文由<a href="http://www.jianshu.com/u/49606f4d970f" target="_blank" rel="external">TonnyL</a>原创，转载请注明作者及出处。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[使用RenderScript实现高斯模糊(毛玻璃/磨砂)效果]]></title>
      <url>http://tonnyl.github.io/2017/01/12/%E4%BD%BF%E7%94%A8RenderScript%E5%AE%9E%E7%8E%B0%E9%AB%98%E6%96%AF%E6%A8%A1%E7%B3%8A-%E6%AF%9B%E7%8E%BB%E7%92%83-%E7%A3%A8%E7%A0%82-%E6%95%88%E6%9E%9C/</url>
      <content type="html"><![CDATA[<p>搞事情，实现Instagram对话框背景模糊效果<br><a id="more"></a></p>
<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>逛ins的时候，偶然发现，instagram的对话框设计的很有意思，如下图：</p>
<img src="/2017/01/12/使用RenderScript实现高斯模糊-毛玻璃-磨砂-效果/ins.jpeg" alt="instagram" title="instagram">
<p>它的dialog的背景竟然是毛玻璃效果的，在我看来真漂亮，恩，对话框和迪丽热巴都漂亮😂。看到这么好的效果，当然就要开始搞事情了，自己动手实现差不多的效果。最终的实现效果如下图：</p>
<img src="/2017/01/12/使用RenderScript实现高斯模糊-毛玻璃-磨砂-效果/demo.png" alt="效果" title="效果">
<img src="/2017/01/12/使用RenderScript实现高斯模糊-毛玻璃-磨砂-效果/demo1.jpeg" alt="手动调节" title="手动调节">
<p>分别实现了对话框背景的虚化和手动调节虚化程度。</p>
<h3 id="实现方法对比"><a href="#实现方法对比" class="headerlink" title="实现方法对比"></a>实现方法对比</h3><p>最开始想要实现毛玻璃效果时，我是一脸懵逼的，不知道如何下手。幸亏，有万能的Google。搜索之后发现常见的实现方法有4种，分别是：</p>
<ul>
<li>RenderScript</li>
<li>Java算法</li>
<li>NDK算法</li>
<li>openGL</li>
</ul>
<p>处理一整张图片这么大计算量的工作，openGL的性能最好，而用java实现肯定是最差的了。而RenderScript和NDK的性能相当，但是你懂得，NDK和openGL我无可奈何，综合考虑，RenderScript应该是最适合的。</p>
<p>但并不是说RenderScript就是完全没有问题的：</p>
<ol>
<li>模糊半径(radius)越大，性能要求越高，模糊半径不能超过25，所以并不能得到模糊度非常高的图片。</li>
<li>ScriptIntrinsicBlur在API 17时才被引入，如果需要在Android 4.2以下的设备上实现，就需要引入RenderScript Support Library，当然，安装包体积会相应的增大。</li>
</ol>
<h3 id="RenderScript实现"><a href="#RenderScript实现" class="headerlink" title="RenderScript实现"></a>RenderScript实现</h3><p>首先在<code>app</code>目录下<code>build.gradle</code>文件中添加如下代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">defaultConfig &#123;</div><div class="line">        applicationId &quot;io.github.marktony.gaussianblur&quot;</div><div class="line">        minSdkVersion 19</div><div class="line">        targetSdkVersion 25</div><div class="line">        versionCode 1</div><div class="line">        versionName &quot;1.0&quot;</div><div class="line">        renderscriptTargetApi 19</div><div class="line">        renderscriptSupportModeEnabled true</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>RenderScriptIntrinsics提供了一些可以帮助我们快速实现各种图片处理的操作类，例如，<code>ScriptIntrinsicBlur</code>，可以简单高效实现    高斯模糊效果。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> io.github.marktony.gaussianblur;</div><div class="line"></div><div class="line"><span class="keyword">import</span> android.content.Context;</div><div class="line"><span class="keyword">import</span> android.graphics.Bitmap;</div><div class="line"><span class="keyword">import</span> android.support.annotation.IntRange;</div><div class="line"><span class="keyword">import</span> android.support.annotation.NonNull;</div><div class="line"><span class="keyword">import</span> android.support.v8.renderscript.Allocation;</div><div class="line"><span class="keyword">import</span> android.support.v8.renderscript.Element;</div><div class="line"><span class="keyword">import</span> android.support.v8.renderscript.RenderScript;</div><div class="line"><span class="keyword">import</span> android.support.v8.renderscript.ScriptIntrinsicBlur;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RenderScriptGaussianBlur</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> RenderScript renderScript;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RenderScriptGaussianBlur</span><span class="params">(@NonNull Context context)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.renderScript = RenderScript.create(context);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Bitmap <span class="title">gaussianBlur</span><span class="params">(@IntRange(from = <span class="number">1</span>, to = <span class="number">25</span>)</span> <span class="keyword">int</span> radius, Bitmap original) </span>&#123;</div><div class="line">        Allocation input = Allocation.createFromBitmap(renderScript, original);</div><div class="line">        Allocation output = Allocation.createTyped(renderScript, input.getType());</div><div class="line">        ScriptIntrinsicBlur scriptIntrinsicBlur = ScriptIntrinsicBlur.create(renderScript, Element.U8_4(renderScript));</div><div class="line">        scriptIntrinsicBlur.setRadius(radius);</div><div class="line">        scriptIntrinsicBlur.setInput(input);</div><div class="line">        scriptIntrinsicBlur.forEach(output);</div><div class="line">        output.copyTo(original);</div><div class="line">        <span class="keyword">return</span> original;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然后就可以直接使用RenderScriptGaussianBlur，愉快地根据SeekBar的值，实现不同程度的模糊了。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> io.github.marktony.gaussianblur;</div><div class="line"></div><div class="line"><span class="keyword">import</span> android.content.DialogInterface;</div><div class="line"><span class="keyword">import</span> android.graphics.Bitmap;</div><div class="line"><span class="keyword">import</span> android.graphics.BitmapFactory;</div><div class="line"><span class="keyword">import</span> android.support.v7.app.AlertDialog;</div><div class="line"><span class="keyword">import</span> android.support.v7.app.AppCompatActivity;</div><div class="line"><span class="keyword">import</span> android.os.Bundle;</div><div class="line"><span class="keyword">import</span> android.util.Log;</div><div class="line"><span class="keyword">import</span> android.view.View;</div><div class="line"><span class="keyword">import</span> android.view.Window;</div><div class="line"><span class="keyword">import</span> android.view.WindowManager;</div><div class="line"><span class="keyword">import</span> android.widget.FrameLayout;</div><div class="line"><span class="keyword">import</span> android.widget.ImageView;</div><div class="line"><span class="keyword">import</span> android.widget.LinearLayout;</div><div class="line"><span class="keyword">import</span> android.widget.SeekBar;</div><div class="line"><span class="keyword">import</span> android.widget.TextView;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> ImageView imageView;</div><div class="line">    <span class="keyword">private</span> ImageView container;</div><div class="line">    <span class="keyword">private</span> LinearLayout layout;</div><div class="line">    <span class="keyword">private</span> TextView textViewProgress;</div><div class="line">    <span class="keyword">private</span> RenderScriptGaussianBlur blur;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line"></div><div class="line">        imageView = (ImageView) findViewById(R.id.imageView);</div><div class="line">        container = (ImageView) findViewById(R.id.container);</div><div class="line"></div><div class="line">        container.setVisibility(View.GONE);</div><div class="line"></div><div class="line">        layout = (LinearLayout) findViewById(R.id.layout);</div><div class="line"></div><div class="line">        layout.setVisibility(View.VISIBLE);</div><div class="line"></div><div class="line">        SeekBar seekBar = (SeekBar) findViewById(R.id.seekBar);</div><div class="line">        textViewProgress = (TextView) findViewById(R.id.textViewProgress);</div><div class="line">        TextView textViewDialog = (TextView) findViewById(R.id.textViewDialog);</div><div class="line">        blur = <span class="keyword">new</span> RenderScriptGaussianBlur(MainActivity.<span class="keyword">this</span>);</div><div class="line"></div><div class="line">        seekBar.setMax(<span class="number">25</span>);</div><div class="line">        seekBar.setOnSeekBarChangeListener(<span class="keyword">new</span> SeekBar.OnSeekBarChangeListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onProgressChanged</span><span class="params">(SeekBar seekBar, <span class="keyword">int</span> progress, <span class="keyword">boolean</span> fromUser)</span> </span>&#123;</div><div class="line">                textViewProgress.setText(String.valueOf(progress));</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStartTrackingTouch</span><span class="params">(SeekBar seekBar)</span> </span>&#123;</div><div class="line"></div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStopTrackingTouch</span><span class="params">(SeekBar seekBar)</span> </span>&#123;</div><div class="line">                <span class="keyword">int</span> radius = seekBar.getProgress();</div><div class="line">                <span class="keyword">if</span> (radius &lt; <span class="number">1</span>) &#123;</div><div class="line">                    radius = <span class="number">1</span>;</div><div class="line">                &#125;</div><div class="line">                Bitmap bitmap = BitmapFactory.decodeResource(getResources(), R.drawable.image);</div><div class="line">                imageView.setImageBitmap(blur.gaussianBlur(radius, bitmap));</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        textViewDialog.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line"></div><div class="line">                container.setVisibility(View.VISIBLE);</div><div class="line"></div><div class="line">                layout.setDrawingCacheEnabled(<span class="keyword">true</span>);</div><div class="line">                layout.setDrawingCacheQuality(View.DRAWING_CACHE_QUALITY_LOW);</div><div class="line"></div><div class="line">                Bitmap bitmap = layout.getDrawingCache();</div><div class="line"></div><div class="line">                container.setImageBitmap(blur.gaussianBlur(<span class="number">25</span>, bitmap));</div><div class="line"></div><div class="line">                layout.setVisibility(View.INVISIBLE);</div><div class="line"></div><div class="line">                AlertDialog dialog = <span class="keyword">new</span> AlertDialog.Builder(MainActivity.<span class="keyword">this</span>).create();</div><div class="line">                dialog.setTitle(<span class="string">"Title"</span>);</div><div class="line">                dialog.setMessage(<span class="string">"Message"</span>);</div><div class="line">                dialog.setButton(DialogInterface.BUTTON_POSITIVE, <span class="string">"OK"</span>, <span class="keyword">new</span> DialogInterface.OnClickListener() &#123;</div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(DialogInterface dialog, <span class="keyword">int</span> which)</span> </span>&#123;</div><div class="line">                        dialog.dismiss();</div><div class="line">                    &#125;</div><div class="line">                &#125;);</div><div class="line">                dialog.setButton(DialogInterface.BUTTON_NEGATIVE, <span class="string">"Cancel"</span>, <span class="keyword">new</span> DialogInterface.OnClickListener() &#123;</div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(DialogInterface dialog, <span class="keyword">int</span> which)</span> </span>&#123;</div><div class="line"></div><div class="line">                    &#125;</div><div class="line">                &#125;);</div><div class="line">                dialog.setOnCancelListener(<span class="keyword">new</span> DialogInterface.OnCancelListener() &#123;</div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCancel</span><span class="params">(DialogInterface dialog)</span> </span>&#123;</div><div class="line"></div><div class="line">                    &#125;</div><div class="line">                &#125;);</div><div class="line"></div><div class="line">                dialog.setOnCancelListener(<span class="keyword">new</span> DialogInterface.OnCancelListener() &#123;</div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCancel</span><span class="params">(DialogInterface dialog)</span> </span>&#123;</div><div class="line">                        container.setVisibility(View.GONE);</div><div class="line">                        layout.setVisibility(View.VISIBLE);</div><div class="line">                    &#125;</div><div class="line">                &#125;);</div><div class="line"></div><div class="line">                dialog.show();</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在代码里做了一些view的可见性的操作，比较简单，相信你能看懂的。和instagram中dialog的实现有一点不同的是，我没有截取整个页面的bitmap，只是截取了actionbar下的内容，如果一定要实现一样的效果，调整一下页面的布局就可以了。这里不多说了。</p>
<p>是不是很简单呢？</p>
<h3 id="轮子"><a href="#轮子" class="headerlink" title="轮子"></a>轮子</h3><p>除了RenderScript外，还有一些优秀的轮子：</p>
<ul>
<li><a href="https://github.com/500px/500px-android-blur" target="_blank" rel="external">500px-android-blur</a></li>
<li><a href="https://github.com/wasabeef/Blurry" target="_blank" rel="external">Blurry</a></li>
<li><a href="https://github.com/kikoso/android-stackblur" target="_blank" rel="external">android-stackblur</a></li>
<li><a href="https://github.com/paveldudka/blurring/blob/master/app/src/main/java/com/paveldudka/util/FastBlur.java" target="_blank" rel="external">FastBlur</a>:Java算法实现</li>
</ul>
<p><a href="https://github.com/patrickfav/BlurTestAndroid" target="_blank" rel="external">BlurTestAndroid</a>对不同类库的实现方式、采取的算法和所耗费的时间做了统计和比较，你也可以下载它的demo app，自行测试。</p>
<img src="/2017/01/12/使用RenderScript实现高斯模糊-毛玻璃-磨砂-效果/BlurTestAndroid.png" alt="BlurTestAndroid" title="BlurTestAndroid">
<p>示例代码在这里：<a href="https://github.com/TonnyL/GaussianBlur" target="_blank" rel="external">GaussianBlur</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[我的2016]]></title>
      <url>http://tonnyl.github.io/2017/01/10/%E6%88%91%E7%9A%842016/</url>
      <content type="html"><![CDATA[<p>开源，博客，数码，电影与电视剧。<br><a id="more"></a><br>时间走着走着，我读完了大三第一个学期，距离公元2016年也已经过去了10天，是时候对过去的一年做一个总结了。本来还想着1号的时候写这篇文章的，结果，正式应了那句话：</p>
<blockquote>
<p>在让自己失望这件事情上，我从没让自己失望过。</p>
</blockquote>
<p>一拖就拖到了10号才开始动笔，不对，动键盘，正式的对过去一年进行一个尽量完整的总结（以下所有的统计日期均为截止至2017年1月10日）。</p>
<h3 id="项目"><a href="#项目" class="headerlink" title="项目"></a>项目</h3><p>说到项目就不得不说<a href="https://github.com/TonnyL" target="_blank" rel="external">GitHub</a>, 虽然在15年的时候注册了账号，但是基本上没有提交有价值的东西，真正开始用心的维护还是在16年。</p>
<img src="/2017/01/10/我的2016/github_contribution.png" alt="GitHub Contributions" title="GitHub Contributions">
<p>一共有422次contribution。</p>
<p>star比较多的项目:</p>
<img src="/2017/01/10/我的2016/github_pop_repos.png" alt="GitHub pop repos" title="GitHub pop repos">
<p>所有的项目一共收获535个star(从无到有)，被fork140次(从无到有)，follower96(从无到有)。</p>
<p>其中比较在我看来比较优秀的有：</p>
<ul>
<li><a href="https://github.com/TonnyL/PaperPlane" target="_blank" rel="external">纸飞机(知乎小报 PaperPlane)</a>,采用MVP架构，集合了知乎日报、果壳精选和豆瓣一刻的综合性阅读客户端，在<a href="https://play.google.com/store/apps/details?id=com.marktony.zhihudaily" target="_blank" rel="external">Google Play</a>上下载量为13354次，综合评分4.62（满分5）；<a href="http://app.mi.com/detail/312703?ref=search" target="_blank" rel="external">小米应用商店</a>下载量为12602次；<a href="http://app.flyme.cn/apps/public/detail?package_name=com.marktony.zhihudaily" target="_blank" rel="external">魅族应用商店</a>下载量为5208，综合评分9.6（满分为10）；<a href="http://www.coolapk.com/apk/com.marktony.zhihudaily" target="_blank" rel="external">酷市场</a>下载量为4.3万，综合评分4.5（满分为5）。</li>
</ul>
<img src="/2017/01/10/我的2016/paper_plane.png" alt="Paper Plane" title="Paper Plane">
<ul>
<li><a href="https://github.com/TonnyL/zhuanlan" target="_blank" rel="external">知乎专栏APP及API分析</a>，由于版权问题，APP已经停止维护，API分析部分可以查看<a href="https://github.com/TonnyL/zhuanlan/wiki" target="_blank" rel="external">wiki</a>或者<a href="https://TonnyL.github.io/2016/05/14/%E7%9F%A5%E4%B9%8E%E4%B8%93%E6%A0%8FAPI%E5%88%86%E6%9E%90/">我的博客</a></li>
<li><a href="https://github.com/TonnyL/FanfouHandpick" target="_blank" rel="external">饭否精选</a>,使用Kotlin开发的饭否精选客户端。这个项目主要是练手，尝鲜使用Kotlin，现阶段在项目中使用Kotlin的可能性还是蛮小的。</li>
<li><a href="https://github.com/TonnyL/Translator" target="_blank" rel="external">简单翻译</a></li>
<li><a href="https://github.com/TonnyL/Reader" target="_blank" rel="external">Reader</a>：内容包含了糗事百科，煎蛋，和内涵段子</li>
</ul>
<p>所有项目均由我自己完成设计，编码，测试，上线及迭代维护工作。</p>
<h3 id="博客"><a href="#博客" class="headerlink" title="博客"></a>博客</h3><ul>
<li><a href="https://TonnyL.github.io">Tonny’s Blog</a>，使用GitHub Pages和Hexo搭建的博客，所有文章都首发于此，也是在16年中才搭建完成，之前一直使用的是<a href="https://github.com/A-limon/pacman" target="_blank" rel="external">Pacman</a>主题，年底前换了<a href="https://github.com/viosey/hexo-theme-material" target="_blank" rel="external">Material</a>主题，感觉美观了很多(谁让我是Google的粉丝呢)。一共完成了21篇文章。</li>
</ul>
<img src="/2017/01/10/我的2016/Tonny%27sBlog.png" alt="Tonny's Blog" title="Tonny's Blog">
<ul>
<li><p><a href="http://www.jianshu.com/u/49606f4d970f" target="_blank" rel="external">简书-TonnyL</a>:半年时间，一共写了10篇文章，17898个字，收获了195个喜欢，64个粉丝。</p>
</li>
<li><p><a href="https://gold.xitu.io/user/582c81cb128fe10069509b49" target="_blank" rel="external">稀土掘金-Tonny</a>:使用时间一个月，分享6篇文章，收获734个喜欢。</p>
</li>
</ul>
<h3 id="设备"><a href="#设备" class="headerlink" title="设备"></a>设备</h3><ul>
<li>电脑：啊哈哈哈哈，终于在今年十月份的时候，把原来的华硕A550卖了，买了现在的MBP，原来的华硕的真的太厚了，而且重，带着走太不方便了。第一次拿到MBP的时候，真的不由自主的感叹，原来生产力工具是可以这么薄的。当然，换电脑的代价就是吃了一个学期的土（手动微笑脸）。</li>
<li>键盘：阿米洛VA87M茶轴，大概5月份的时候，卖掉了之前RK68，没有方向键的键盘，用着太别扭。</li>
<li>手机：一加3。还在分期中。</li>
</ul>
<p>（求土豪不喷，我穷逼一个。）</p>
<h3 id="读书"><a href="#读书" class="headerlink" title="读书"></a>读书</h3><p>由于我不喜欢看电子书，所以书基本上都是看的纸质的书（买不起Kindle）。大概看了：</p>
<ul>
<li>第一行代码Android，入门必备，年末的时候又入手了第二版的，巩固基础还是很有必要的。</li>
<li>Android开发艺术探索，提升，还在研读。</li>
<li>Thinking in Java，巩固基础与提升都靠他，Java界的金坷垃。</li>
</ul>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>看了一些电影和电视剧。</p>
<ul>
<li>北京遇上西雅图之不二情书，虽然还是单身狗一个，还是和同学一起去看了这部电影，汤唯好帅！</li>
</ul>
<img src="/2017/01/10/我的2016/buerqingshu.jpg" alt="不二情书" title="不二情书">
<ul>
<li>驴得水，笑着笑着就哭的电影。</li>
</ul>
<img src="/2017/01/10/我的2016/lvdeshui.jpg" alt="驴得水" title="驴得水">
<ul>
<li>The Big Bang Theory S10,Shelton都和Amy在一起了，我还是没女朋友。</li>
</ul>
<img src="/2017/01/10/我的2016/tbbt.jpg" alt="生活大爆炸" title="生活大爆炸">
<ul>
<li>Westworld S1，HBO出品，必属精品。烧脑的电视剧，而且Deloris好漂亮啊。不过我觉得有点坑爹的，我喜欢的Halsey怎么说没就没了呢？不过好消息是，Halsey会在S2回归，这才稍微安慰了一下我受伤的心灵。</li>
</ul>
<img src="/2017/01/10/我的2016/westworld.jpg" alt="西部世界" title="西部世界">
<ul>
<li>请回答1988，暑假的时候才看完，我的评价是，神剧。真的神，感觉他们不是生活在双门洞，而是生活在我身边。代入感太强，还有各种神细节，各种不做作的煽情，感动地流泪。看完了副作用也挺明显的，那就是现在我逢人就安利这部剧（微笑脸）。</li>
</ul>
<img src="/2017/01/10/我的2016/qinghuida1988.jpg" alt="请回答1988" title="请回答1988">
<ul>
<li>辩护人，这不是16年出品的电影，但是真的对我的启发太大了。精品。</li>
</ul>
<img src="/2017/01/10/我的2016/bianhuren.jpg" alt="辩护人" title="辩护人">
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><blockquote>
<p>革命尚未成功，同志仍需努力。</p>
</blockquote>
<h3 id="小目标"><a href="#小目标" class="headerlink" title="小目标"></a>小目标</h3><p>2017年，先给自己定一个小目标，比如，减肥5kg（微笑脸）。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Lambda在Android中的使用]]></title>
      <url>http://tonnyl.github.io/2017/01/06/Lambda%E5%9C%A8Android%E4%B8%AD%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<p>极简主义。<br><a id="more"></a></p>
<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>Android支持完整的Java7特性，而升级到Android Nougat(API Level 24)之后，支持了Java8语言的一部分功能：</p>
<ul>
<li><a href="https://docs.oracle.com/javase/tutorial/java/IandI/defaultmethods.html" target="_blank" rel="external">默认和静态接口方法</a></li>
<li><a href="https://docs.oracle.com/javase/tutorial/java/javaOO/lambdaexpressions.html" target="_blank" rel="external">Lambda表达式</a>(在 API 级别 23 及更低版本中也可用)</li>
<li><a href="https://docs.oracle.com/javase/tutorial/java/annotations/repeating.html" target="_blank" rel="external">重复注解</a></li>
<li><a href="https://docs.oracle.com/javase/tutorial/java/javaOO/methodreferences.html" target="_blank" rel="external">方法引用</a>(在 API 级别 23 及更低版本中也可用)</li>
<li><a href="https://docs.oracle.com/javase/tutorial/java/annotations/type_annotations.html" target="_blank" rel="external">类型注解</a>(在 API 级别 23 及更低版本中也可用)</li>
</ul>
<h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><p>使用这一部分支持的功能需要一个名为<a href="https://source.android.com/source/jack.html" target="_blank" rel="external">Jack</a>的新编译。而Jack要求Android Studio 2.1或更高，所以，没有升级到2.1或以上的童鞋，需要先升级才能支持使用Jack哟。</p>
<blockquote>
<p><a href="https://developer.android.com/tools/building/building-studio.html#instant-run" target="_blank" rel="external">Instant Run</a>目前不能应用于Jack</p>
</blockquote>
<p>在<code>app</code>目录下<code>build.gradle</code>文件下添加：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">android &#123;</div><div class="line">  ...</div><div class="line">  defaultConfig &#123;</div><div class="line">    ...</div><div class="line">    jackOptions &#123;</div><div class="line">      enabled true</div><div class="line">    &#125;</div><div class="line">    // 在更老的版本中，使用</div><div class="line">    // useJack true</div><div class="line">    // 可以达到同样的效果</div><div class="line">  &#125;</div><div class="line">  compileOptions &#123;</div><div class="line">    sourceCompatibility JavaVersion.VERSION_1_8</div><div class="line">    targetCompatibility JavaVersion.VERSION_1_8</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Lambda表达式"><a href="#Lambda表达式" class="headerlink" title="Lambda表达式"></a>Lambda表达式</h3><p>Lambda的语法格式如下:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">(arg1, arg2...) -&gt; &#123; body &#125;</div><div class="line"></div><div class="line">(type1 arg1, type2 arg2...) -&gt; &#123; body &#125;</div></pre></td></tr></table></figure>
<p>在未使用Lambda表达式之前，我们设置监听器的代码是这样的:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">fab.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">        <span class="comment">// blah, blah</span></div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>而使用Lambda表达式，代码是这样的:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">fab.setOnClickListener(v -&gt; &#123;</div><div class="line">	<span class="comment">// blah, blah            </span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>是不是更简洁了呢？</p>
<p>我们查看一下<code>OnClickListener</code>的源码，发现这个接口中只有一个待实现的方法。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Interface definition for a callback to be invoked when a view is clicked.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OnClickListener</span> </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Called when a view has been clicked.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> v The view that was clicked.</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>像这种只有一个待实现方法的接口，都可以使用Lambda表达式进行简化。当然，我们也可以自定义接口，然后用Lambda表达式进行实现。</p>
<h3 id="方法引用"><a href="#方法引用" class="headerlink" title="方法引用"></a>方法引用</h3><p>有时会遇到这样的情况，Lambda表达式什么都没有做，仅仅是调用了已经存在的方法。这种情况下，代码就能进一步精简了。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">fab.setOnClickListener( view2 -&gt; showSnackBar(view2));</div><div class="line"></div><div class="line">private void showSnackBar(View view) &#123;</div><div class="line">        Snackbar.make(view, &quot;blah, blah&quot;, Snackbar.LENGTH_SHORT).show();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>使用方法引用之后：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">fab.setOnClickListener(this::showSnackBar);</div></pre></td></tr></table></figure>
<h3 id="上下文推断"><a href="#上下文推断" class="headerlink" title="上下文推断"></a>上下文推断</h3><p>下面来实现一些例子来了解Lambda的上下文推断。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TestOp</span> </span>&#123;</div><div class="line">   <span class="function">String <span class="title">operate</span> <span class="params">(String s, <span class="keyword">int</span> i)</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 使用Lambda表达式进行实现</span></div><div class="line"><span class="comment">// 通过上下文，lambda表达式可以推断出s为String类型，而i为int类型</span></div><div class="line"><span class="comment">// 返回值为String</span></div><div class="line">TestOp myOp = (s,i) -&gt; s + i;</div></pre></td></tr></table></figure>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>Lambda表达式使用还是很方便的，能够减少编写和维护的代码数量。但是，这种极简主义的写法也并不是所有人都能接受的。对于我而言，技多不压身，学习一下，提高姿势还是挺有必要的。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[提升体验-Chrome Custom Tabs]]></title>
      <url>http://tonnyl.github.io/2017/01/05/%E6%8F%90%E5%8D%87%E4%BD%93%E9%AA%8C-Chrome-Custom-Tabs/</url>
      <content type="html"><![CDATA[<p>使用Chrome Custom Tabs加载网页可以有效的提升用户的体验<br><a id="more"></a></p>
<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>文章比较长，先放项目地址:<a href="https://github.com/TonnyL/PaperPlane" target="_blank" rel="external">PaperPlane</a></p>
<p>俗话说，没图说个那啥，先看实际效果。<br><img src="/2017/01/05/提升体验-Chrome-Custom-Tabs/telegram.gif" alt="telegram" title="telegram"><br><img src="/2017/01/05/提升体验-Chrome-Custom-Tabs/paper_plane.gif" alt="paper plane" title="paper plane"></p>
<h3 id="什么是Custom-Tabs"><a href="#什么是Custom-Tabs" class="headerlink" title="什么是Custom Tabs?"></a>什么是Custom Tabs?</h3><p>所有的APP开发者都面临这样一个选择，当用户点击一个URL时，是应该用浏览器打开还是应该用应用内置的WebView打开呢？</p>
<p>两个选项都面临着一些问题。通过浏览器打开是一个非常重的上下文切换，并且是无法定制的。而WebView不能和浏览器共享数据并且需要需要手动去处理更多的场景。</p>
<p>Chrome Custom Tabs让APP在进行网页浏览时更多的控制权限，在不采用WebView的情况下，这既能保证Native APP和网页之间流畅的切换，又允许APP定制Chrome的外观和操作。可定义的内容如下：</p>
<ul>
<li>toolbar的颜色</li>
<li>进场和退场动画</li>
<li>给Chrome的toolbar、overflow menu和bottom toolbar添加自定义操作</li>
</ul>
<p>并且，Chrome Custom Tabs允许开发者对Chrome进行预启动和网页内容的预加载，以此提升加载的速度。<br><img src="/2017/01/05/提升体验-Chrome-Custom-Tabs/performance.gif" alt="preformance" title="preformance"></p>
<h3 id="Chrome-Custom-Tabs-VS-WebView-我应该什么时候用？"><a href="#Chrome-Custom-Tabs-VS-WebView-我应该什么时候用？" class="headerlink" title="Chrome Custom Tabs VS WebView, 我应该什么时候用？"></a>Chrome Custom Tabs VS WebView, 我应该什么时候用？</h3><p>如果页面的内容是由我们自己控制的，可以和Android组件进行交互，那么,WebView是一个好的选择，如果我们的应用需要打开外部的网站，那么推荐使用Chrome Custom Tabs，原因如下：</p>
<ul>
<li>导入非常简单。不需要编写额外的代码来管理请求，授予权限或者存储cookie</li>
<li>定制UI：<ul>
<li>Toolbar 颜色</li>
<li>动作按钮 (Action Button)</li>
<li>定制菜单项</li>
<li>定制进场退场动画</li>
<li>Bottom Toolbar</li>
</ul>
</li>
<li>导航感知：浏览器通知回调接口通知应用网页的导航情况</li>
<li>安全性：浏览器使用了Google’s Safe Browsing，用于保护用户和设备免受危险网站的侵害</li>
<li>性能优化：<ul>
<li>浏览器会在后台进行预热，避免了应用占用大量资源的情况</li>
<li>提前向浏览器发送可能的URL，提高了页面加载速度</li>
</ul>
</li>
<li>生命周期管理：在用户与Custom Tabs进行交互时，浏览器会将应用标示为前台应用，避免了应用被系统所回收</li>
<li>共享cookie数据和权限，这样，用户在已经授权过的网站，就不需要重新登录或者授权权限了</li>
<li>如果用户开启了数据节省功能，在这里仍然可以从中受益</li>
<li>同步的自动补全功能</li>
<li>仅仅需要点击一下左上角按钮就可以直接返回原应用</li>
<li>想要在Lollipop之前的设备上最新引入的浏览器(Auto updating WebView),而不是旧版本的WebView</li>
</ul>
<h3 id="什么时候可用？"><a href="#什么时候可用？" class="headerlink" title="什么时候可用？"></a>什么时候可用？</h3><p>从Chrome 45版本开始，所有的Chrome用户都可以使用这项功能，目前仅支持Android系统。</p>
<h3 id="开发指南"><a href="#开发指南" class="headerlink" title="开发指南"></a>开发指南</h3><p>完整的示例可以查看<a href="https://github.com/GoogleChrome/custom-tabs-client" target="_blank" rel="external">https://github.com/GoogleChrome/custom-tabs-client</a>。包含了定制UI、连接后台服务、处理应用和Custom Tab Activity生命周期的可复用的类。</p>
<p>第一步当然是将<a href="http://developer.android.com/tools/support-library/features.html#custom-tabs" target="_blank" rel="external"> Custom Tabs Support Library </a>添加到工程中来。打开<code>build.gradle</code>文件，添加support library的依赖。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">dependencies &#123;</div><div class="line">    ...</div><div class="line">    compile &apos;com.android.support:customtabs:23.3.0&apos;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>一旦Support Library添加项目成功了，我们就有两种可能的定制操作了：</p>
<ul>
<li>定制UI和与Chrome Custom Tabs的交互</li>
<li>使页面加载更快速，保持应用激活</li>
</ul>
<p>UI的定制是通过使用<a href="http://developer.android.com/reference/android/support/customtabs/CustomTabsIntent.html" target="_blank" rel="external"> CustomTabsIntent </a>和<a href="http://developer.android.com/reference/android/support/customtabs/CustomTabsIntent.Builder.html" target="_blank" rel="external"> CustomTabsIntent.Builder</a>类完成的；而速度的提升则是通过使用<a href="http://developer.android.com/reference/android/support/customtabs/CustomTabsClient.html" target="_blank" rel="external"> CustomTabsClient </a>链接Custom Tabs服务，预热Chrome和让Chrome知晓将要打开的URL实现的。</p>
<h4 id="打开一个Chrome-Custom-Tab"><a href="#打开一个Chrome-Custom-Tab" class="headerlink" title="打开一个Chrome Custom Tab"></a>打开一个Chrome Custom Tab</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 使用CustomTabsIntent.Builder配置CustomTabsIntent</span></div><div class="line"><span class="comment">// 准备完成后，调用CustomTabsIntent.Builder.build()方法创建一个CustomTabsIntent</span></div><div class="line"><span class="comment">// 并通过CustomTabsIntent.launchUrl()方法加载希望加载的url</span></div><div class="line"></div><div class="line">String url = ¨https:<span class="comment">//github.com/TonnyL¨;</span></div><div class="line">CustomTabsIntent.Builder builder = <span class="keyword">new</span> CustomTabsIntent.Builder();</div><div class="line">CustomTabsIntent customTabsIntent = builder.build();</div><div class="line">customTabsIntent.launchUrl(<span class="keyword">this</span>, Uri.parse(url));</div></pre></td></tr></table></figure>
<h4 id="配置地址栏的颜色"><a href="#配置地址栏的颜色" class="headerlink" title="配置地址栏的颜色"></a>配置地址栏的颜色</h4><p>Chrome Custom Tabs一个很重要的功能就是我们能够改变地址栏的颜色，使之和我们应用的颜色协调。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 改变toolbar的背景色。colorInt就是想要指定的int值</span></div><div class="line"></div><div class="line">builder.setToolbarColor(colorInt);</div></pre></td></tr></table></figure>
<h4 id="配置定制化的action-button"><a href="#配置定制化的action-button" class="headerlink" title="配置定制化的action button"></a>配置定制化的action button</h4><p>作为应用的开发者，我们对呈现在用户眼前的Chrome Custom Tab内的Action Button拥有完全的控制权。</p>
<p>在大部分的情况下，用户会执行最基础的操作像分享，或者是其他公共的Activity。</p>
<p>Action Button被表示为一个action button的图标和用户点击action button之后Chrome将要执行的pendingIntent。图标的高度一般为24dp，宽度一般为24-48dp。</p>
<img src="/2017/01/05/提升体验-Chrome-Custom-Tabs/tumblr_action.png" alt="actions" title="actions">
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 向toolbar添加一个Action Button</span></div><div class="line"><span class="comment">// ‘icon’是一张位图(Bitmap)，作为action button的图片资源使用</span></div><div class="line"></div><div class="line"><span class="comment">// 'description'是一个字符串，作为按钮的无障碍描述所使用</span></div><div class="line"></div><div class="line"><span class="comment">// 'pendingIntent' 是一个PendingIntent，当action button或者菜单项被点击时调用。</span></div><div class="line"><span class="comment">// 在url作为data被添加之后，Chrome 会调用PendingIntent#send()方法。</span></div><div class="line"><span class="comment">// 客户端应用会通过调用Intent#getDataString()获取到URL</span></div><div class="line"></div><div class="line"><span class="comment">// 'tint'是一个布尔值，定义了Action Button是否应该被着色</span></div><div class="line"></div><div class="line">builder.setActionButton(icon, description, pendingIntent, tint);</div></pre></td></tr></table></figure>
<h4 id="配置定制化菜单"><a href="#配置定制化菜单" class="headerlink" title="配置定制化菜单"></a>配置定制化菜单</h4><p>Chrome浏览器拥有非常全面的action菜单，用户在浏览器内操作非常顺畅。然而，对于我们自己的应用，可能就不适合了。</p>
<p>Chrome Custom Tabs顶部有三个横向排列的图标，分别是“前进”、”页面信息”和”刷新“。在菜单的底部分别是”查找页面”和“在浏览器中打开”。</p>
<p>作为开发者，我们最多可以在顶部横向图标和底部菜单之间添加5个自定义菜单选项。</p>
<p>菜单项通过调用<a href="http://developer.android.com/reference/android/support/customtabs/CustomTabsIntent.Builder.html#addMenuItem(java.lang.String, android.app.PendingIntent" target="_blank" rel="external">CustomTabsIntent.Builder#addMenuItem</a>)添加，title和用户点击菜单选项后Chrome调用的pendingIntent需要作为参数被传入。</p>
<img src="/2017/01/05/提升体验-Chrome-Custom-Tabs/twitter_menu.png" alt="menu" title="menu">
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">builder.addMenuItem(menuItemTitle, menuItemPendingIntent);</div></pre></td></tr></table></figure>
<h4 id="配置进场和退场动画"><a href="#配置进场和退场动画" class="headerlink" title="配置进场和退场动画"></a>配置进场和退场动画</h4><p>许多的Android都会在Activity之间切换时使用自定义的视图进入和退出动画。Chrome Custom Tabs也一样，我们可以改变进入和退出动画，以此保持Chrome Custom Tabs和应用其他内容的协调性和一致性。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">builder.setStartAnimations(<span class="keyword">this</span>, R.anim.slide_in_right, R.anim.slide_out_left);</div><div class="line">builder.setExitAnimations(<span class="keyword">this</span>, R.anim.slide_in_left, R.anim.slide_out_right);</div></pre></td></tr></table></figure>
<h4 id="预热Chrome，提高页面加载速度"><a href="#预热Chrome，提高页面加载速度" class="headerlink" title="预热Chrome，提高页面加载速度"></a>预热Chrome，提高页面加载速度</h4><p>默认情况下，当<a href="http://developer.android.com/reference/android/support/customtabs/CustomTabsIntent.html#launchUrl(android.app.Activity, android.net.Uri" target="_blank" rel="external"> CustomTabsIntent#launchUrl </a>)被调用时会激活Chrome，加载URL。这会花费我们宝贵的时间并且影响流畅度。</p>
<p>Chrome团队了解用户对于流畅体验的渴望，所以他们在Chrome中提供了一个Service使我们的APP能够连接并且预热浏览器和原生组件。他们也把这种能力分享给了我们普通开发者，开发者能够告知Chrome用户访问页面的可能性。然后，Chrome就能完成如下的操作：</p>
<ul>
<li>主域名的DNS预解析</li>
<li>最有可能加载的资源的DNS预解析</li>
<li>包括HTTPS/TLS验证在内的预连接</li>
</ul>
<p>预热Chrome的步骤如下：</p>
<ul>
<li>使用<a href="http://developer.android.com/reference/android/support/customtabs/CustomTabsClient.html#bindCustomTabsService(android.content.Context, java.lang.String, android.support.customtabs.CustomTabsServiceConnection" target="_blank" rel="external">CustomTabsClient#bindCustomTabsService</a>)连接service</li>
<li>一旦service连接成功，后台调用<a href="http://developer.android.com/reference/android/support/customtabs/CustomTabsClient.html#warmup(long" target="_blank" rel="external"> CustomTabsClient#warmup</a>)启动Chrome</li>
<li>调用<a href="http://developer.android.com/reference/android/support/customtabs/CustomTabsClient.html#newSession(android.support.customtabs.CustomTabsCallback" target="_blank" rel="external"> CustomTabsClient#newSession </a>)创建一个新的session.这个session被用作所有的API请求</li>
<li>我们可以在创建session时选择性的添加一个<a href="http://developer.android.com/reference/android/support/customtabs/CustomTabsCallback.html" target="_blank" rel="external"> CustomTabsCallback</a>作为参数，这样我们就能知道页面是否被加载完成</li>
<li>通过<a href="http://developer.android.com/reference/android/support/customtabs/CustomTabsSession.html#mayLaunchUrl(android.net.Uri, android.os.Bundle, java.util.List&lt;android.os.Bundle" target="_blank" rel="external"> CustomTabsSession#mayLaunchUrl</a>)告知Chrome用户最有可能加载的页面</li>
<li>调用<a href="http://developer.android.com/reference/android/support/customtabs/CustomTabsIntent.Builder.html" target="_blank" rel="external"> CustomTabsIntent.Builder </a>构造方法，并传入已经创建好的<a href="http://developer.android.com/reference/android/support/customtabs/CustomTabsSession.html" target="_blank" rel="external">CustomTabsSession</a>作为参数传入</li>
</ul>
<h4 id="连接Chrome服务"><a href="#连接Chrome服务" class="headerlink" title="连接Chrome服务"></a>连接Chrome服务</h4><p><a href="("> CustomTabsClient#bindCustomTabsService </a><a href="http://developer.android.com/reference/android/support/customtabs/CustomTabsClient.html#bindCustomTabsService(android.content.Context" target="_blank" rel="external">http://developer.android.com/reference/android/support/customtabs/CustomTabsClient.html#bindCustomTabsService(android.content.Context</a>, java.lang.String, android.support.customtabs.CustomTabsServiceConnectio)) 方法简化了连接Custom Tabs服务的过程。</p>
<p>创建一个继承自<a href="http://developer.android.com/reference/android/support/customtabs/CustomTabsServiceConnection.html" target="_blank" rel="external">CustomTabsServiceConnection</a>的类并使用<a href="http://developer.android.com/reference/android/support/customtabs/CustomTabsServiceConnection.html#onCustomTabsServiceConnected(android.content.ComponentName, android.support.customtabs.CustomTabsClient" target="_blank" rel="external">onCustomTabsServiceConnected </a>)方法获取<a href="http://developer.android.com/reference/android/support/customtabs/CustomTabsClient.html" target="_blank" rel="external"> CustomTabsClient</a>的实例。在下一步中会用到此实例：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 官方示例</span></div><div class="line"><span class="comment">// 客户端需要连接的Chrome的包名，取决于channel的名称</span></div><div class="line"><span class="comment">// Stable(发行版) = com.android.chrome</span></div><div class="line"><span class="comment">// Beta(测试版) = com.chrome.beta</span></div><div class="line"><span class="comment">// Dev(开发版) = com.chrome.dev</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String CUSTOM_TAB_PACKAGE_NAME = <span class="string">"com.android.chrome"</span>;  <span class="comment">// Change when in stable</span></div><div class="line"></div><div class="line">CustomTabsServiceConnection connection = <span class="keyword">new</span> CustomTabsServiceConnection() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCustomTabsServiceConnected</span><span class="params">(ComponentName name, CustomTabsClient client)</span> </span>&#123;</div><div class="line">        mCustomTabsClient = client;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceDisconnected</span><span class="params">(ComponentName name)</span> </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"><span class="keyword">boolean</span> ok = CustomTabsClient.bindCustomTabsService(<span class="keyword">this</span>, mPackageNameToBind, connection);</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 我的示例</span></div><div class="line"><span class="keyword">package</span> com.marktony.zhihudaily.customtabs;</div><div class="line"></div><div class="line"><span class="keyword">import</span> android.support.customtabs.CustomTabsServiceConnection;</div><div class="line"><span class="keyword">import</span> android.content.ComponentName;</div><div class="line"><span class="keyword">import</span> android.support.customtabs.CustomTabsClient;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.lang.ref.WeakReference;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by Lizhaotailang on 2016/9/4.</div><div class="line"> * Implementation for the CustomTabsServiceConnection that avoids leaking the</div><div class="line"> * ServiceConnectionCallback</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServiceConnection</span> <span class="keyword">extends</span> <span class="title">CustomTabsServiceConnection</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">// A weak reference to the ServiceConnectionCallback to avoid leaking it.</span></div><div class="line">    <span class="keyword">private</span> WeakReference&lt;ServiceConnectionCallback&gt; mConnectionCallback;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ServiceConnection</span><span class="params">(ServiceConnectionCallback connectionCallback)</span> </span>&#123;</div><div class="line">        mConnectionCallback = <span class="keyword">new</span> WeakReference&lt;&gt;(connectionCallback);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCustomTabsServiceConnected</span><span class="params">(ComponentName name, CustomTabsClient client)</span> </span>&#123;</div><div class="line">        ServiceConnectionCallback connectionCallback = mConnectionCallback.get();</div><div class="line">        <span class="keyword">if</span> (connectionCallback != <span class="keyword">null</span>) connectionCallback.onServiceConnected(client);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceDisconnected</span><span class="params">(ComponentName name)</span> </span>&#123;</div><div class="line">        ServiceConnectionCallback connectionCallback = mConnectionCallback.get();</div><div class="line">        <span class="keyword">if</span> (connectionCallback != <span class="keyword">null</span>) connectionCallback.onServiceDisconnected();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="预热浏览器"><a href="#预热浏览器" class="headerlink" title="预热浏览器"></a>预热浏览器</h4><p><a href="http://developer.android.com/reference/android/support/customtabs/CustomTabsClient.html#warmup(long" target="_blank" rel="external">boolean warmup(long flags)</a>)</p>
<p>预热浏览器进程并加重原生库文件。预热是异步进行的，返回值表示请求是否被接收。多个成功的请求都会返回true。</p>
<p><code>true</code>代表着成功。</p>
<h4 id="创建新的tab-sessioin"><a href="#创建新的tab-sessioin" class="headerlink" title="创建新的tab sessioin"></a>创建新的tab sessioin</h4><p><a href="http://developer.android.com/reference/android/support/customtabs/CustomTabsClient.html#newSession(android.support.customtabs.CustomTabsCallback" target="_blank" rel="external">boolean newSession(CustomTabsCallback callback)</a>)</p>
<p>session用于在连续请求中链接mayLaunchUrl方法。CustomTabsIntent和tab互相联系。这里所提供的回调和已经创建成功的session相关。通过这个回调，任何关于已经成功创建的session的更新都会被接收到。返回session是否被成功创建。多个具有相同CustomTabsCallback或者null值的请求都会返回false。</p>
<h4 id="告知Chrome用户可能打开的链接"><a href="#告知Chrome用户可能打开的链接" class="headerlink" title="告知Chrome用户可能打开的链接"></a>告知Chrome用户可能打开的链接</h4><p><a href="http://developer.android.com/reference/android/support/customtabs/CustomTabsSession.html#mayLaunchUrl(android.net.Uri, android.os.Bundle, java.util.List&lt;android.os.Bundle" target="_blank" rel="external">boolean mayLaunchUrl(Uri url, Bundle extras, List otherLikelyBundles)</a>)</p>
<p>CustomTabsSession方法告知浏览器未来可能导航到的url。<a href="http://developer.android.com/reference/android/support/customtabs/CustomTabsClient.html#warmup(long" target="_blank" rel="external">warmup()</a>)方法应该先被调用。最有可能的url应该最先被指出。也可以选择性的提供可能加载的url的列表。列表中的数据被认为被加载的可能性小于最初的那一个，而且必须按照优先级降序排列。这些额外的url可能被忽略掉。所有之前对于这个方法的调用都会被去优先化。返回操作是否成功完成。</p>
<h4 id="Custom-Tabs连接回调"><a href="#Custom-Tabs连接回调" class="headerlink" title="Custom Tabs连接回调"></a>Custom Tabs连接回调</h4><p><a href="http://developer.android.com/reference/android/support/customtabs/CustomTabsCallback.html#onNavigationEvent(int, android.os.Bundle" target="_blank" rel="external">void onNavigationEvent(int navigationEvent, Bundle extras)</a>)</p>
<p>在custom tab中，导航事件发生时被调用。‘navigationEvent int’是关于页面内的6个状态值之一。6个状态值定义如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">* 页面开始加载时被发送</div><div class="line">*/</div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> NAVIGATION_STARTED = <span class="number">1</span>;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line">* 页面完成加载时被发送</div><div class="line">*/</div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> NAVIGATION_FINISHED = <span class="number">2</span>;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line">* 由于错误tab不能完成加载时被发送</div><div class="line">*/</div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> NAVIGATION_FAILED = <span class="number">3</span>;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line">* 在加载完成之前，加载因为用户动作例如点击了另外一个链接或者刷新页面</div><div class="line">* 加载被中止时被发送</div><div class="line">*/</div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> NAVIGATION_ABORTED = <span class="number">4</span>;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line">* tab状态变为可见时发送</div><div class="line">*/</div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TAB_SHOWN = <span class="number">5</span>;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line">* tab状态变为不可见时发送</div><div class="line">*/</div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TAB_HIDDEN = <span class="number">6</span>;</div></pre></td></tr></table></figure>
<h4 id="如果用户没有安装最新版本的Chrome，会发生什么呢？"><a href="#如果用户没有安装最新版本的Chrome，会发生什么呢？" class="headerlink" title="如果用户没有安装最新版本的Chrome，会发生什么呢？"></a>如果用户没有安装最新版本的Chrome，会发生什么呢？</h4><p>Custom Tabs通过带有key Extras的 ACTION_VIEW Intent来定制UI。这就意味着将要打开的页面会通过系统浏览器或者用户默认浏览器打开。</p>
<p>如果用户已经安装了Chrome并且是默认浏览器，它会自动的获取EXTRAS的值并提供一个定制化的UI。其他的浏览器使用Intent extras提供相同的定制UI也是有可能的。</p>
<h4 id="怎样检测Chrome是否支持Chrome-Custom-Tabs"><a href="#怎样检测Chrome是否支持Chrome-Custom-Tabs" class="headerlink" title="怎样检测Chrome是否支持Chrome Custom Tabs?"></a>怎样检测Chrome是否支持Chrome Custom Tabs?</h4><p>所有支持Chrome Custom Tabs的Chrome浏览器都暴露了一个service。为了检测是否支持Chrome Custom Tabs，可以尝试着绑定service，如果成功的话，那么Customs Tabs可以成功的使用。</p>
<h3 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h3><p>启用Chrome Custom Tabs后,我们看到了各种不同质量界别的实现效果。这里介绍一组实现优秀集成的最佳实践。</p>
<h4 id="连接Custome-Tabs-Service并发起预热"><a href="#连接Custome-Tabs-Service并发起预热" class="headerlink" title="连接Custome Tabs Service并发起预热"></a>连接Custome Tabs Service并发起预热</h4><p>连接到Custom Tabs Service并预加载Chrome之后，通过Custom Tabs打开链接 <strong>最多可以节省700ms</strong> 。</p>
<p>在我们打算启用Custom Tabs的Activity的 <a href="http://developer.android.com/reference/android/app/Activity.html#onStart(" target="_blank" rel="external">onStart()</a>) 方法中连接 Custom Tabs service。连接成功后，调用<a href="http://developer.android.com/reference/android/support/customtabs/CustomTabsClient.html#warmup%28long%29" target="_blank" rel="external">warmup()</a>方法。</p>
<p>Custom Tabs作为一个非常低优先级的进程，这也就意味着 <strong>它不会对我们的应用不会有任何的负面的影响</strong>，但是当加载链接时，会获得非常好的启动性能。</p>
<h4 id="内容预渲染"><a href="#内容预渲染" class="headerlink" title="内容预渲染"></a>内容预渲染</h4><p>预渲染让内容打开非常迅速。所以，如果用户 <strong>至少有50%的可能性</strong> 打开某个链接，调用<a href="http://developer.android.com/reference/android/support/customtabs/CustomTabsSession.html#mayLaunchUrl%28android.net.Uri,%20android.os.Bundle,%20java.util.List%3Candroid.os.Bundle%3E%29" target="_blank" rel="external">mayLaunchUrl()</a><br>方法。</p>
<p>调用<a href="http://developer.android.com/reference/android/support/customtabs/CustomTabsSession.html#mayLaunchUrl%28android.net.Uri,%20android.os.Bundle,%20java.util.List%3Candroid.os.Bundle%3E%29" target="_blank" rel="external">mayLaunchUrl()</a><br>方法方法能使Custom Tabs预获取主页面所支持的内容并预渲染。这会最大程度的加快页面的加载速度。但是会不可避免的有 <strong>一点流量和电量的消耗</strong>。</p>
<p>Custom Tabs非常的智能，能够感知用户是否在使用收费的网络或者设备电量不足，预渲染对设备的整体性能有负面的影响，在这样的场景下，Custom Tabs就不会进行预获取或者预渲染。所以，不用担心应用的性能问题。</p>
<h4 id="当Custom-Tabs没有安装时，提供备选方案"><a href="#当Custom-Tabs没有安装时，提供备选方案" class="headerlink" title="当Custom Tabs没有安装时，提供备选方案"></a>当Custom Tabs没有安装时，提供备选方案</h4><p>尽管Custom Tabs对于大多数用户都是适用的，仍然有一些场景不适用，例如设备上没有安装支持Custom Tabs的浏览器或者是设备上的浏览器版本不支持Custom Tabs。</p>
<p><strong>确保提供了备选方案以提供好的应用体验</strong>。打开默认浏览器或者引入WebView都是不错的选择。</p>
<h4 id="将我们的应用作为referrer-引荐来源"><a href="#将我们的应用作为referrer-引荐来源" class="headerlink" title="将我们的应用作为referrer(引荐来源)"></a>将我们的应用作为referrer(引荐来源)</h4><p>通常，对于网站而言，追用访问的来源非常地重要。当加载了Custom Tabs时，通过设置referrer，让他们知晓我们正在给他们提高访问量。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">intent.putExtra(Intent.EXTRA_REFERRER,</div><div class="line">        Uri.parse(Intent.URI_ANDROID_APP_SCHEME + <span class="string">"//"</span> + context.getPackageName()));</div></pre></td></tr></table></figure>
<h4 id="添加定制动画"><a href="#添加定制动画" class="headerlink" title="添加定制动画"></a>添加定制动画</h4><p>定制的动画能够使我们的应用切换到网页内容时更加地顺畅。 确保进场动画和出厂动画是反向的，这样能够帮助用户理解跳转的关系。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//设置定制的进入/退出动画</span></div><div class="line"> CustomTabsIntent.Builder intentBuilder = <span class="keyword">new</span> CustomTabsIntent.Builder();</div><div class="line"> intentBuilder.setStartAnimations(<span class="keyword">this</span>, R.anim.slide_in_right, R.anim.slide_out_left);</div><div class="line"> intentBuilder.setExitAnimations(<span class="keyword">this</span>, android.R.anim.slide_in_left,</div><div class="line">     android.R.anim.slide_out_right);</div><div class="line"></div><div class="line"> <span class="comment">//打开Custom Tab        </span></div><div class="line"> intentBuilder.build().launchUrl(context, Uri.parse(<span class="string">"https://github.com/TonnyL"</span>));</div></pre></td></tr></table></figure>
<h4 id="为Action-Button选择一个icon"><a href="#为Action-Button选择一个icon" class="headerlink" title="为Action Button选择一个icon"></a>为Action Button选择一个icon</h4><p>添加一个Action Button能够使用户更加理解APP的功能。但是，如果没有好的icon代表Action Button将要执行的操作，有必要创建一个带操作文字描述的位图。</p>
<p>牢记位图的最大尺寸为高度24dp，宽度48dp。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">  String shareLabel = getString(R.string.label_action_share);</div><div class="line">  Bitmap icon = BitmapFactory.decodeResource(getResources(),</div><div class="line">          android.R.drawable.ic_menu_share);</div><div class="line"></div><div class="line">  <span class="comment">// 为我们的BroadCastReceiver创建一个PendingIntent</span></div><div class="line">  Intent actionIntent = <span class="keyword">new</span> Intent(</div><div class="line">          <span class="keyword">this</span>.getApplicationContext(), ShareBroadcastReceiver.class);</div><div class="line">  PendingIntent pendingIntent =</div><div class="line">          PendingIntent.getBroadcast(getApplicationContext(), <span class="number">0</span>, actionIntent, <span class="number">0</span>);	        </div><div class="line"></div><div class="line"><span class="comment">// 设置pendingIntent作为按钮被点击后将要执行的操作    </span></div><div class="line">  intentBuilder.setActionButton(icon, shareLabel, pendingIntent);</div></pre></td></tr></table></figure>
<h4 id="为其他浏览器做准备"><a href="#为其他浏览器做准备" class="headerlink" title="为其他浏览器做准备"></a>为其他浏览器做准备</h4><p>牢记用户安装的浏览器中，支持Custom Tabs的数量可能不止一个。如果有不止一个浏览器支持Custom Tabs，并且没有任何一个浏览器被设置为偏好浏览器，需要询问用户如何打开链接</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 返回支持Custom Tabs的应用的包名</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ArrayList <span class="title">getCustomTabsPackages</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">    PackageManager pm = context.getPackageManager();</div><div class="line">    <span class="comment">// Get default VIEW intent handler.</span></div><div class="line">    Intent activityIntent = <span class="keyword">new</span> Intent(Intent.ACTION_VIEW, Uri.parse(<span class="string">"http://www.example.com"</span>));</div><div class="line"></div><div class="line">    <span class="comment">// 获取所有能够处理VIEW intents的应用</span></div><div class="line">    List resolvedActivityList = pm.queryIntentActivities(activityIntent, <span class="number">0</span>);</div><div class="line">    ArrayList packagesSupportingCustomTabs = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">    <span class="keyword">for</span> (ResolveInfo info : resolvedActivityList) &#123;</div><div class="line">        Intent serviceIntent = <span class="keyword">new</span> Intent();</div><div class="line">        serviceIntent.setAction(ACTION_CUSTOM_TABS_CONNECTION);</div><div class="line">        serviceIntent.setPackage(info.activityInfo.packageName);</div><div class="line">        <span class="comment">// Check if this package also resolves the Custom Tabs service.</span></div><div class="line">        <span class="keyword">if</span> (pm.resolveService(serviceIntent, <span class="number">0</span>) != <span class="keyword">null</span>) &#123;</div><div class="line">            packagesSupportingCustomTabs.add(info);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> packagesSupportingCustomTabs;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="允许用户不使用Custom-Tabs"><a href="#允许用户不使用Custom-Tabs" class="headerlink" title="允许用户不使用Custom Tabs"></a>允许用户不使用Custom Tabs</h4><p>为应用添加一个设置选项，允许用户通过默认浏览器而不是Custom Tab打开链接。如果我们的应用在添加Custom Tabs之前，都是通过默认浏览器打开链接显得尤为重要。</p>
<h4 id="尽量让Native应用处理URL"><a href="#尽量让Native应用处理URL" class="headerlink" title="尽量让Native应用处理URL"></a>尽量让Native应用处理URL</h4><p>Native应用可以处理一些url。如果用户安装了Twitter APP，在点击tweet内的链接时，她更加希望Twitter应用能够处理这些链接。</p>
<p>在应用内打开链接之前，检查手机里有没有其他APP能够处理这些url。</p>
<h4 id="定制Toolbar的颜色"><a href="#定制Toolbar的颜色" class="headerlink" title="定制Toolbar的颜色"></a>定制Toolbar的颜色</h4><p>如果想要让用户感觉网页内容是我们应用的一部分，将toolbar的颜色设置为primaryColor。</p>
<p>如果想要让用户清楚的了解到已经离开了我们的应用，那就完全不要定义toolbar的颜色。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 设置自定义的toolbar的颜色</span></div><div class="line">CustomTabsIntent.Builder intentBuilder = <span class="keyword">new</span> CustomTabsIntent.Builder();</div><div class="line">intentBuilder.setToolbarColor(Color.BLUE);</div></pre></td></tr></table></figure>
<h4 id="增加分享按钮"><a href="#增加分享按钮" class="headerlink" title="增加分享按钮"></a>增加分享按钮</h4><p>确保在overflow菜单中添加了一个分享的操作，在大多数的情况下，用户希望能够分享当前所见网页内容的链接，Custom Tabs默认没有添加分享的按钮。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 在BroadCastReceiver中分享来自CustomTabs的内容</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceive</span><span class="params">(Context context, Intent intent)</span> </span>&#123;</div><div class="line">    String url = intent.getDataString();</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (url != <span class="keyword">null</span>) &#123;</div><div class="line">        Intent shareIntent = <span class="keyword">new</span> Intent(Intent.ACTION_SEND);</div><div class="line">        shareIntent.setType(<span class="string">"text/plain"</span>);</div><div class="line">        shareIntent.putExtra(Intent.EXTRA_TEXT, url);</div><div class="line"></div><div class="line">        Intent chooserIntent = Intent.createChooser(shareIntent, <span class="string">"Share url"</span>);</div><div class="line">        chooserIntent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);</div><div class="line"></div><div class="line">        context.startActivity(chooserIntent);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="定制关闭按钮"><a href="#定制关闭按钮" class="headerlink" title="定制关闭按钮"></a>定制关闭按钮</h4><p>自定义关闭按钮使CustomTabs看起来像应用的一部分。</p>
<p>如果希望CustomTabs在用户看来像一个Dialog, 使用’x’(叉叉)按钮。如果希望Custom Tab是用户的一部分，使用返回箭头。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//设置自定义的关闭按钮</span></div><div class="line">CustomTabsIntent.Builder intentBuilder = <span class="keyword">new</span> CustomTabsIntent.Builder();</div><div class="line">intentBuilder.setCloseButtonIcon(BitmapFactory.decodeResource(</div><div class="line">    getResources(), R.drawable.ic_arrow_back));</div></pre></td></tr></table></figure>
<h4 id="处理内部链接"><a href="#处理内部链接" class="headerlink" title="处理内部链接"></a>处理内部链接</h4><p>当监听到链接是由<a href="http://developer.android.com/reference/android/widget/TextView.html#attr_android:autoLink" target="_blank" rel="external">android:autoLink</a>生成的或者在WebView中复写了click方法，确保我们的应用处理了这些内容的链接，让CustomTabs处理外部链接。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">WebView webView = (WebView)findViewById(R.id.webview);</div><div class="line">webView.setWebViewClient(<span class="keyword">new</span> WebViewClient() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">shouldOverrideUrlLoading</span><span class="params">(WebView view, String url)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onLoadResource</span><span class="params">(WebView view, String url)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (url.startsWith(<span class="string">"http://www.example.com"</span>)) &#123;</div><div class="line">            <span class="comment">//Handle Internal Link...</span></div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="comment">//Open Link in a Custom Tab</span></div><div class="line">            Uri uri = Uri.parse(url);</div><div class="line">            CustomTabsIntent.Builder intentBuilder =</div><div class="line">                    <span class="keyword">new</span> CustomTabsIntent.Builder(mCustomTabActivityHelper.getSession());</div><div class="line">           <span class="comment">//Open the Custom Tab        </span></div><div class="line">            intentBuilder.build().launchUrl(context, url));                            </div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h4 id="处理连击"><a href="#处理连击" class="headerlink" title="处理连击"></a>处理连击</h4><p>如果希望在用户点击链接和打开CustomTabs之间做一些准备工作，确保所花费的时间不超过100ms。否则用户会认为APP没有响应，可能是试着点击链接多次。</p>
<p>如果不能避免延迟，确保我们的应用对可能的情况做好准备，当用户点击相同的链接多次时，不要多次打开CustomTab。</p>
<h3 id="低版本API"><a href="#低版本API" class="headerlink" title="低版本API"></a>低版本API</h3><p>尽管整合Custom Tabs的推荐方式是使用Custom Tabs Support Library，低API版本的系统也是可以使用的。</p>
<p>完整的Support Library的导入方法可以参见<a href="https://github.com/GoogleChrome/custom-tabs-client/tree/master/customtabs" target="_blank" rel="external">GitHub</a>,并可以做为一个起点。连接service的<a href="http://developer.android.com/guide/components/aidl.html" target="_blank" rel="external">AIDL文件</a>也被包含在其中，Chromium仓库中也包含了这些文件，而这些文件在Android Studio中是不能直接被使用的。</p>
<h4 id="在低版本API中使用Custom-Tabs的基本方法"><a href="#在低版本API中使用Custom-Tabs的基本方法" class="headerlink" title="在低版本API中使用Custom Tabs的基本方法"></a>在低版本API中使用Custom Tabs的基本方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">String url = ¨https:<span class="comment">//github.com/TonnyL¨;</span></div><div class="line">Intent intent = <span class="keyword">new</span> Intent(Intent.ACTION_VIEW, Uri.parse(url));</div><div class="line"></div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String EXTRA_CUSTOM_TABS_SESSION = <span class="string">"android.support.customtabs.extra.SESSION"</span>;</div><div class="line">Bundle extras = <span class="keyword">new</span> Bundle;</div><div class="line">extras.putBinder(EXTRA_CUSTOM_TABS_SESSION,</div><div class="line">   sessionICustomTabsCallback.asBinder() <span class="comment">/* 不需要session时设置为null */</span>);</div><div class="line">intent.putExtras(extras);</div></pre></td></tr></table></figure>
<h4 id="定制UI"><a href="#定制UI" class="headerlink" title="定制UI"></a>定制UI</h4><p>UI定制是通过向ACTION_VIEW Intent添加Extras实现的。用于定制UI的完整的extras keys的列表可以在<a href="http://developer.android.com/reference/android/support/customtabs/CustomTabsIntent.html" target="_blank" rel="external"> CustomTabsIntent docs </a>找到。下面是添加自定义的toolbar的颜色的示例：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String EXTRA_CUSTOM_TABS_TOOLBAR_COLOR = <span class="string">"android.support.customtabs.extra.TOOLBAR_COLOR"</span>;</div><div class="line">intent.putExtra(EXTRA_CUSTOM_TABS_TOOLBAR_COLOR, colorInt);</div></pre></td></tr></table></figure>
<h4 id="连接Custom-Tabs-Service"><a href="#连接Custom-Tabs-Service" class="headerlink" title="连接Custom Tabs Service"></a>连接Custom Tabs Service</h4><p>Custom Tabs service和其他Android Service的使用方法相同。接口通过AIDL创建并且代理service类也会自动创建。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">// 客户端需要连接的Chrome的包名，取决于channel的名称</div><div class="line">// Stable(发行版) = com.android.chrome</div><div class="line">// Beta(测试版) = com.chrome.beta</div><div class="line">// Dev(开发版) = com.chrome.dev</div><div class="line">public static final String CUSTOM_TAB_PACKAGE_NAME = &quot;com.chrome.dev&quot;;  // Change when in stable</div><div class="line"></div><div class="line">public static final String ACTION_CUSTOM_TABS_CONNECTION =</div><div class="line">       &quot;android.support.customtabs.action.CustomTabsService&quot;;</div><div class="line">Intent serviceIntent = new Intent(ACTION_CUSTOM_TABS_CONNECTION);</div><div class="line"></div><div class="line">serviceIntent.setPackage(CUSTOM_TAB_PACKAGE_NAME);</div><div class="line">context.bindService(serviceIntent, mServiceConnection,</div><div class="line">                    Context.BIND_AUTO_CREATE | Context.BIND_WAIVE_PRIORITY);</div></pre></td></tr></table></figure>
<h3 id="一些有用的网址"><a href="#一些有用的网址" class="headerlink" title="一些有用的网址"></a>一些有用的网址</h3><ul>
<li><a href="https://github.com/GoogleChrome/custom-tabs-client" target="_blank" rel="external">Github Demo</a></li>
<li><a href="http://stackoverflow.com/questions/tagged/chrome-custom-tabs" target="_blank" rel="external">Chrome Custom Tabs on StackOverflow</a></li>
<li>我的项目地址:<a href="https://github.com/TonnyL/PaperPlane" target="_blank" rel="external">PaperPlane</a></li>
</ul>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>如果我们的应用是面向国外用户的，那理所当然的，应该加入Chrome Custom Tabs的支持，这在很大程度上能够提升用户的体验。如果我们的应用只是面向国内用户，我的建议还是应该加上这项功能，毕竟，还是有部分用户安装了Chrome浏览器，当用户浏览到Custom Tab页面，应该也会像我一样，感觉到眼前一亮吧。</p>
<p>文章比较长，感谢阅读。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[简洁优雅地实现夜间模式]]></title>
      <url>http://tonnyl.github.io/2016/12/31/%E7%AE%80%E6%B4%81%E4%BC%98%E9%9B%85%E5%9C%B0%E5%AE%9E%E7%8E%B0%E5%A4%9C%E9%97%B4%E6%A8%A1%E5%BC%8F/</url>
      <content type="html"><![CDATA[<p>使用官方Support Library实现日间与夜间模式<br><a id="more"></a></p>
<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>Android 6.0 Marshmallow 预览版中曾经短暂出现过相关的夜间模式的功能，只是在正式版中被移除了，在Android 7.0 Nougat上，用户们再次经历了「得而复失」的遗憾，在开发者预览版中，夜间模式和暗色模式先是开启，然后有再次被移除。而在正式版中，夜间模式也没有出现。但其实相关的代码一直存在于系统中，只是默认没有被开启。如何开启这项功能，可以参考少数派的这一篇文章，<a href="http://sspai.com/35273" target="_blank" rel="external">帮你找回 Android 7.0 夜间模式的 2 款应用</a>。</p>
<p>不过，今天要介绍的主要内容并不是关于系统的夜间模式，而是如何给我们开发的APP添加夜间模式的功能。毫不夸张的说，夜间模式现在已经是阅读类App的标配了。事实上，日间模式与夜间模式就是给APP定义并应用两套不同颜色的主题。用户可以自动或者手动的开启。我们先看两个我认为实现地很优雅的例子：知乎和Twitter。</p>
<img src="/2016/12/31/简洁优雅地实现夜间模式/zhihu_twitter_nightmode.gif" alt="zhihu_twitter_nightmode" title="zhihu_twitter_nightmode">
<p>这两个APP在切换的工程中，并没有出现闪现黑屏的情况，切换也比较顺滑。我们的目标就是利用Support Library实现同样的效果。</p>
<h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><h3 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">compile &apos;com.android.support:appcompat-v7:25.1.0&apos;</div></pre></td></tr></table></figure>
<p>由于Support Library在23.2.0的版本中才添加了Theme.AppCompat.DayNight主题，所以依赖的版本必须是高于23.2.0的，并且，这个特性支持的最低SDK版本为14，所以，需要兼容Android 4.0的设备，是不能使用这个特性的，在API Level 14以下的设备会默认使用亮色主题。不过现在4.0以下的设备应该比较少了吧，毕竟微信的minSdkVersion都设置为14了。</p>
<h3 id="准备资源"><a href="#准备资源" class="headerlink" title="准备资源"></a>准备资源</h3><ol>
<li><p>让我们自己的主题继承并应用DayNight主题。</p>
 <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"AppTheme"</span> <span class="attr">parent</span>=<span class="string">"Theme.AppCompat.DayNight.DarkActionBar"</span>&gt;</span><span class="xml"></span></div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"colorPrimary"</span>&gt;</span>@color/colorPrimary<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"colorPrimaryDark"</span>&gt;</span>@color/colorPrimaryDark<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"colorAccent"</span>&gt;</span>@color/colorAccent<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!--customize your theme here--&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>新建夜间模式资源文件夹:在<code>res</code>目录下新建<code>values-night</code>文件夹，然后在此目录下新建<code>colors.xml</code>文件在夜间模式下的应用的资源。当然也可以根据需要新建<code>drawable-night</code>,<code>layout-night</code>等后缀为<code>-night</code>的夜间资源文件夹。<br>我的<code>values</code>和<code>values-night</code>目录下的<code>colors.xml</code>的内容如下:</p>
 <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="comment">&lt;!--values-colors.xml--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"colorPrimary"</span>&gt;</span>#009688<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"colorPrimaryDark"</span>&gt;</span>#00796B<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"colorAccent"</span>&gt;</span>#009688<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"textColorPrimary"</span>&gt;</span>#616161<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"viewBackground"</span>&gt;</span>@android:color/white<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></div></pre></td></tr></table></figure>
 <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="comment">&lt;!--values-night-colors.xml&gt;</span></div><div class="line">&lt;resources&gt;</div><div class="line">    &lt;color name="colorPrimary"&gt;#35464e&lt;/color&gt;</div><div class="line">    &lt;color name="colorPrimaryDark"&gt;#212a2f&lt;/color&gt;</div><div class="line">    &lt;color name="colorAccent"&gt;#212a2f&lt;/color&gt;</div><div class="line">    &lt;color name="textColorPrimary"&gt;#616161&lt;/color&gt;</div><div class="line">    &lt;color name="viewBackground"&gt;#212a2f&lt;/color&gt;</div><div class="line">&lt;/resources&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>使Activity继承自AppCompatActivity。</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="comment">// code here</span></div><div class="line">	<span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3><h4 id="静态应用"><a href="#静态应用" class="headerlink" title="静态应用"></a>静态应用</h4><p>在Application的继承类下设置初始主题。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Application</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate();</div><div class="line"></div><div class="line">		AppCompatDelegate.setDefaultNightMode(AppCompatDelegate.MODE_NIGHT_YES);</div><div class="line">		<span class="comment">// other code here</span></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里<code>AppCompatDelegate.setDefaultNightMode()</code>方法可以接受的参数值有4个：</p>
<ul>
<li>MODE_NIGHT_NO. Always use the day (light) theme(一直应用日间(light)主题).</li>
<li>MODE_NIGHT_YES. Always use the night (dark) theme(一直使用夜间(dark)主题).</li>
<li>MODE_NIGHT_AUTO. Changes between day/night based on the time of day(根据当前时间在day/night主题间切换).</li>
<li>MODE_NIGHT_FOLLOW_SYSTEM(默认选项). This setting follows the system’s setting, which is essentially MODE_NIGHT_NO(跟随系统，通常为MODE_NIGHT_NO).</li>
</ul>
<p>我们可以在任何时候调用这个方法，因为这个方法是静态的。但是这个值并不是一直存在的，每次在开启进程时需要重新设置。在上面的代码中，我是在<code>onCreate()</code>方法中设置的，网上也有大神建议在Activity或者Application的<strong>static</strong>代码块中设置。如下所示：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Application</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">static</span> &#123;</div><div class="line">	    AppCompatDelegate.setDefaultNightMode(AppCompatDelegate.MODE_NIGHT_YES);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate();</div><div class="line"></div><div class="line">		<span class="comment">// other code here</span></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="动态应用"><a href="#动态应用" class="headerlink" title="动态应用"></a>动态应用</h4><p>虽然上面的静态应用的设置非常简单，但是这种方式的应用场景还是太少了。我们更多的还是需要动态的根据需要动态的切换。</p>
<ol>
<li><p>检测当前主题模式</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> mode = getResources().getConfiguration().uiMode &amp; Configuration.UI_MODE_NIGHT_MASK;</div></pre></td></tr></table></figure>
</li>
<li><p>设置主题</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>(mode == Configuration.UI_MODE_NIGHT_YES) &#123;</div><div class="line">	AppCompatDelegate.setDefaultNightMode(AppCompatDelegate.MODE_NIGHT_NO);</div><div class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span>(mode == Configuration.UI_MODE_NIGHT_NO) &#123;</div><div class="line">	AppCompatDelegate.setDefaultNightMode(AppCompatDelegate.MODE_NIGHT_YES);</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">	<span class="comment">// blah blah</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">recreate();</div></pre></td></tr></table></figure>
<p> 在调用<code>recreate()</code>方法之前，还可以创建一些动画进行过渡。而且，众所周知，调用<code>recreate()</code>需要对一些数据进行保存，例如fragment，CheckBox,RadioBox等。如下所示:</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainFragment</span> <span class="keyword">extends</span> <span class="title">Fragment</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">   	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(@Nullable Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">       	<span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line"></div><div class="line">   	 	<span class="keyword">if</span> (savedInstanceState != <span class="keyword">null</span>) &#123;</div><div class="line">   	 		FragmentManager manager = getChildFragmentManager();</div><div class="line">			doubanMomentFragment = (DoubanMomentFragment) manager.getFragment(savedInstanceState, <span class="string">"douban"</span>);</div><div class="line">   	 	&#125; <span class="keyword">else</span> &#123;</div><div class="line">   	 		doubanMomentFragment = DoubanMomentFragment.newInstance();</div><div class="line">   	 	&#125;</div><div class="line">   	&#125;</div><div class="line"></div><div class="line">   	<span class="meta">@Override</span></div><div class="line">   	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSaveInstanceState</span><span class="params">(Bundle outState)</span> </span>&#123;</div><div class="line">      	 <span class="keyword">super</span>.onSaveInstanceState(outState);</div><div class="line">      	 FragmentManager manager = getChildFragmentManager();</div><div class="line">      	 manager.putFragment(outState, <span class="string">"douban"</span>, doubanMomentFragment);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p> 我们也可以把主题的值存储到SharedPreference中，已便于应用在下一次启动时自动应用主题。</p>
</li>
</ol>
<h4 id="Q-amp-A"><a href="#Q-amp-A" class="headerlink" title="Q&amp;A"></a>Q&amp;A</h4><ul>
<li><p>Q:系统默认的颜色不合我的口味怎么办？</p>
<p>A:使用主题属性,例如:<code>textColor:?android:attr/textColorPrimary</code>,<code>color:?attr/colorControlNormal</code>等。</p>
</li>
<li><p>Q:为什么我的WebView颜色没有变化？</p>
<p>A:因为WebView不能使用主题属性。WebView的颜色实际上取决于网页内容颜色。网页的默认背景色是白色，所以尽管设置了主题为<code>AppCompatDelegate.MODE_NIGHT_YES</code>，网页仍然是白色，所以看起来就很不搭了。所以，网页的内容和背景色等资源也需要适配了。</p>
</li>
<li><p>Q:为什么不直接设置为<code>MODE_NIGHT_AUTO</code>呢？</p>
<p>A:因为使用<code>MODE_NIGHT_AUTO</code>需要请求坐标权限，获取系统的位置。你肯定会说了，这尼玛不是坑爹吗？如果程序已经授予了坐标权限(location permission)(如果你的target SDK为23或者更高，需要考虑运行时权限)，AppCompat会试着去获取上次保存的坐标，根据坐标来计算日出与日落的时间。如果程序没有位置权限或者LocationManager没有存储上次坐标的信息呢？系统或默认设置为早上6点钟为日出，下午10点为日落。用户调整系统时间，当前的主题也会随之改变。如果我们不希望用户在设定主题后，主题还会随着时间改变,<code>MODE_NIGHT_AUTO</code>就不适用了。</p>
</li>
</ul>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>本项目代码<a href="https://github.com/TonnyL/PaperPlane" target="_blank" rel="external">PaperPlane</a> .<br>运行效果</p>
<img src="/2016/12/31/简洁优雅地实现夜间模式/paper_plane.gif" alt="Paper Plane" title="Paper Plane">
<p>在Android 6.0及以下的设备上，本项目运行时会有切换的过渡动画效果，但是不支持Android 7.0及以上的设备。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[适配Android 7.1 Nougat新特性]]></title>
      <url>http://tonnyl.github.io/2016/12/29/%E9%80%82%E9%85%8DAndroid-7-1-Nougat%E6%96%B0%E7%89%B9%E6%80%A7/</url>
      <content type="html"><![CDATA[<p>老司机带你吃牛轧糖<br><a id="more"></a></p>
<h3 id="What’s-new-in-Android-7-1-Nougat"><a href="#What’s-new-in-Android-7-1-Nougat" class="headerlink" title="What’s new in Android 7.1 Nougat?"></a>What’s new in Android 7.1 Nougat?</h3><p>Android 7.1 Nougat 已经推出有一段时间，相信大多数人和我一样，并没有用上最新的系统，但是，总有一群走在时代的前列线上的Geek们，勇于尝鲜，艰苦奋斗，为刷新版本号贡献自己的力量。好吧，实际上就是我还没有用上7.1，有些眼馋了。那么，和开发者息息相关的有哪些新特性呢？</p>
<img src="/2016/12/29/适配Android-7-1-Nougat新特性/android_nougat.png" alt="Android 7.1 Nougat" title="Android 7.1 Nougat">
<p>本次主要介绍3个新特性:<strong>App Shortcuts</strong>, <strong>Round Icon Resource</strong> 和 <strong>Image Keyboard Support</strong>。所有的新特性可以访问谷歌开发者中文博客的文章<a href="http://developers.googleblog.cn/2016/12/android-711-nougat_20.html" target="_blank" rel="external">欢迎使用Android 7.1.1 Nougat</a>。</p>
<h3 id="App-Shortcuts"><a href="#App-Shortcuts" class="headerlink" title="App Shortcuts"></a>App Shortcuts</h3><p>作为一个密切关注Android发展的伪Geek，在7.1正式版未发布之前，通过网上的一些爆料文章，我就了解到了这一新功能。实际上，这个功能刚开始出现时，我还以为Google Pixel要上压感屏了呢，事实证明，的确是我想多了。</p>
<p>App Shortcuts允许用户直接在启动器中显示一些操作，让用户立即执行应用的深层次的功能。触发这一功能的操作就是「长按」。这一功能类似于iOS中的「3D Touch」。</p>
<p>下面通过一张GIF，直观的感受一下App Shortcuts是怎样的。（由于我的一加3并没有升级到最新的7.1，还只是7.0，所以我安装了Nova Launcher来体验。）</p>
<img src="/2016/12/29/适配Android-7-1-Nougat新特性/app_shortcuts.gif" alt="App Shortcuts" title="App Shortcuts">
<p>长按图标，收到震动后松手，如果能够看到图标上弹出了支持的跳转操作，说明成功的呼出了Shortcuts功能，如果不支持这一功能，在Nova Launcher上弹出的就是卸载或者移除操作，在Pixel Launcher上不会出现弹出菜单，显示的是常见的长按操作。长按弹出的操作，可以将这个操作已快捷方式图标的形式直接放置在主屏上。如果长按主图标不松手，就可以调整位置了。</p>
<p>目前，一个应用最多可以支持 <strong>5</strong> 个Shortcut,可以通过<a href="https://developer.android.com/reference/android/content/pm/ShortcutManager.html#getMaxShortcutCountPerActivity(" target="_blank" rel="external">getMaxShortcutCountPerActivity</a>)查看Launcher最多支持Shortcut的数量。每一个Shortcut都对应着一个或者多个intent，当用户选择某一个Shortcut时，应该做出特定的动作。下面是一些将一些特定的动作作为Shortcuts的例子：</p>
<ul>
<li><p>在地图APP中，指引用户至最常用的位置</p>
</li>
<li><p>在聊天APP中，发送信息至某个好友</p>
</li>
<li><p>在多媒体APP中，播放下一个电视节目</p>
</li>
<li><p>在游戏APP中，加载至上次保存的地方</p>
</li>
</ul>
<p>App Shortcut可以分为两种不同的类型： Static Shortcuts（静态快捷方式） 和 Dynamic Shortcuts（动态快捷方式）。</p>
<ul>
<li>Static Shortcuts：在打包到apk的资源文件中定义，所以，直到下一次更新版本时才能改变静态快捷方式的详细说明。</li>
<li>Dynamic Shortcuts：通过ShortcutManager API在运行时发布，在运行时，应用可以发布，升级和移除快捷方式。</li>
</ul>
<h4 id="Using-Static-Shortcuts"><a href="#Using-Static-Shortcuts" class="headerlink" title="Using Static Shortcuts"></a>Using Static Shortcuts</h4><p>创建Static Shortcuts分为以下几步：</p>
<p>1.在工程的manifest文件 (AndroidManifest.xml)下，找到 intent filter设置为 <strong>android.intent.action.MAIN</strong> 和 <strong>android.intent.category.LAUNCHER</strong> 的Activity。</p>
<p>2.在次Activity下添加<meta-data>标签，引用定义shortcuts的资源文件。</meta-data></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">activity</span></span></div><div class="line">        <span class="attr">android:name</span>=<span class="string">".homepage.MainActivity"</span></div><div class="line">        <span class="attr">android:configChanges</span>=<span class="string">"orientation|keyboardHidden|screenSize|screenLayout"</span></div><div class="line">        <span class="attr">android:label</span>=<span class="string">"@string/app_name"</span></div><div class="line">        <span class="attr">android:theme</span>=<span class="string">"@style/AppTheme.NoActionBar"</span>&gt;</div><div class="line">        <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.MAIN"</span> /&gt;</span></div><div class="line"></div><div class="line">            <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.LAUNCHER"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">meta-data</span></span></div><div class="line">            <span class="attr">android:name</span>=<span class="string">"android.app.shortcuts"</span></div><div class="line">            <span class="attr">android:resource</span>=<span class="string">"@xml/shortcuts"</span> /&gt;</div><div class="line">    <span class="tag">&lt;/<span class="name">activity</span>&gt;</span></div></pre></td></tr></table></figure>
<p>3.创建新的资源文件<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">```xml</div><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class="line">&lt;shortcuts xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;</div><div class="line"></div><div class="line">    &lt;shortcut</div><div class="line">        android:enabled=&quot;true&quot;</div><div class="line">        android:icon=&quot;@drawable/ic_search_circle&quot;</div><div class="line">        android:shortcutId=&quot;search_bookmarks&quot;</div><div class="line">        android:shortcutShortLabel=&quot;@string/search_bookmarks&quot;</div><div class="line">        android:shortcutLongLabel=&quot;@string/search_bookmarks&quot;&gt;</div><div class="line"></div><div class="line">        &lt;intent</div><div class="line">            android:action=&quot;android.intent.action.VIEW&quot;</div><div class="line">            android:targetPackage=&quot;com.marktony.zhihudaily&quot;</div><div class="line">            android:targetClass=&quot;com.marktony.zhihudaily.search.SearchActivity&quot; /&gt;</div><div class="line"></div><div class="line">		&lt;!--如果你的一个shortcut关联着多个intent，你可以在这里继续添</div><div class="line">			加。最后一个intent决定着用户在加载这个shortcut时会看到什么--&gt;</div><div class="line"></div><div class="line">        &lt;categories android:name=&quot;android.shortcut.conversation&quot; /&gt;</div><div class="line"></div><div class="line">    &lt;/shortcut&gt;</div><div class="line"></div><div class="line">	&lt;!--在这里添加更多的shortcut--&gt;</div><div class="line"></div><div class="line">&lt;/shortcuts&gt;</div></pre></td></tr></table></figure></p>
<p><strong>shortcut</strong>下标签的含义：</p>
<ul>
<li><p>enabled:见名知意，shortcut是否可用。如果你决定让这个static shortcut不在可用的话，可直接将其设置为 <strong>false</strong> ，或者直接从 <strong>shortcuts</strong> 标签中移除。</p>
</li>
<li><p>icon:显示在左边的图标，可用使用<em>Vector drawable</em>。</p>
</li>
<li><p>shortcutDisabledMessage:当禁用此shortcut后，它仍然会出现在用户长按应用图标后的快捷方式列表里，也可以被拖动并固定到桌面上，但是它会呈现灰色并且用户点击时会弹出Toast这个标签所定义的内容。</p>
</li>
<li><p>shortcutLongLabel:当启动器有足够多的空间时，会显示这个标签所定义的内容。</p>
</li>
<li><p>shortcutShortLabel:shortcut的简要说明，是必需字段。当shortcut被添加到桌面上时，显示的也是这个字段。</p>
</li>
<li><p>intent:shortcut关联的一个或者多个intent，当用户点击shortcut时被打开。</p>
</li>
<li><p>shortcutId:shortcut的唯一标示id，若存在具有相同shortcutId的shortcut，则只显示一个。</p>
</li>
</ul>
<p>到这里，最简单的shortcut就添加成功了。运行包含上面的文件的项目，点击shortcut就可以直接进入 <strong>SearchActivity</strong>，当按下back键时，直接就退出了应用。如果希望不退出应用，而是进入 <strong>MainActivity</strong> 时，应该怎么办呢？不用着急，在shortcut继续添加intent就可以了。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">shortcuts</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">shortcut</span></span></div><div class="line">        <span class="attr">android:enabled</span>=<span class="string">"true"</span></div><div class="line">        <span class="attr">android:icon</span>=<span class="string">"@drawable/ic_search_circle"</span></div><div class="line">        <span class="attr">android:shortcutId</span>=<span class="string">"search_bookmarks"</span></div><div class="line">        <span class="attr">android:shortcutShortLabel</span>=<span class="string">"@string/search_bookmarks"</span></div><div class="line">        <span class="attr">android:shortcutLongLabel</span>=<span class="string">"@string/search_bookmarks"</span>&gt;</div><div class="line"></div><div class="line">		<span class="tag">&lt;<span class="name">intent</span></span></div><div class="line">    			<span class="attr">android:action</span>=<span class="string">"android.intent.action.MAIN"</span></div><div class="line">    			<span class="attr">android:targetClass</span>=<span class="string">"com.marktony.zhihudaily.homepage.MainActivity"</span></div><div class="line">		    <span class="attr">android:targetPackage</span>=<span class="string">"com.marktony.zhihudaily"</span> /&gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">intent</span></span></div><div class="line">            <span class="attr">android:action</span>=<span class="string">"android.intent.action.VIEW"</span></div><div class="line">            <span class="attr">android:targetPackage</span>=<span class="string">"com.marktony.zhihudaily"</span></div><div class="line">            <span class="attr">android:targetClass</span>=<span class="string">"com.marktony.zhihudaily.search.SearchActivity"</span> /&gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">categories</span> <span class="attr">android:name</span>=<span class="string">"android.shortcut.conversation"</span> /&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;/<span class="name">shortcut</span>&gt;</span></div><div class="line"></div><div class="line">  	<span class="comment">&lt;!--在这里添加更多的shortcut--&gt;</span></div><div class="line"></div><div class="line"> <span class="tag">&lt;/<span class="name">shortcuts</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="Using-Dynamic-Shortcuts"><a href="#Using-Dynamic-Shortcuts" class="headerlink" title="Using Dynamic Shortcuts"></a>Using Dynamic Shortcuts</h4><p>动态快捷方式应该和应用内的特定的、上下文敏感的action链接。这些action应该可以在用户的几次使用之间、甚至是在应用运行过程中被改变。好的候选action包括打电话给特定的人、导航至特定的地方、或者展示当前游戏的分数。</p>
<p><a href="https://developer.android.com/reference/android/content/pm/ShortcutManager.html" target="_blank" rel="external">ShortcutManager</a> API允许我们在动态快捷方式上完成下面的操作：</p>
<ul>
<li><p>发布:使用setDynamicShortcuts()重新定义整个动态快捷方式列表，或者是使用addDynamicShortcuts()向已存在的动态快捷方式列表中添加快捷方式。</p>
</li>
<li><p>更新:使用updateShortcuts()方法。</p>
</li>
<li><p>移除:使用removeDynamicShortcuts()方法移除特定动态快捷方式或者使用removeAllDynamicShortcuts()移除所有动态快捷方式。</p>
</li>
</ul>
<p>下面是在MainActivity的onCreate()中创建动态快捷方式的例子：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line"></div><div class="line">    ...</div><div class="line"></div><div class="line">    ShortcutManager shortcutManager = getSystemService(ShortcutManager.class);</div><div class="line"></div><div class="line">    ShortcutInfo webShortcut = <span class="keyword">new</span> ShortcutInfo.Builder(<span class="keyword">this</span>, <span class="string">"shortcut_web"</span>)</div><div class="line">            .setShortLabel(<span class="string">"github"</span>)</div><div class="line">            .setLongLabel(<span class="string">"Open Tonny's github web site"</span>)</div><div class="line">            .setIcon(Icon.createWithResource(<span class="keyword">this</span>, R.drawable.ic_dynamic_shortcut))</div><div class="line">            .setIntent(<span class="keyword">new</span> Intent(Intent.ACTION_VIEW, Uri.parse(<span class="string">"https://TonnyL.github.io"</span>)))</div><div class="line">            .build();</div><div class="line"></div><div class="line">    shortcutManager.setDynamicShortcuts(Collections.singletonList(webShortcut));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>也可以为动态快捷方式创建返回栈。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line"></div><div class="line">    ...</div><div class="line"></div><div class="line">    ShortcutInfo dynamicShortcut = <span class="keyword">new</span> ShortcutInfo.Builder(<span class="keyword">this</span>, <span class="string">"shortcut_dynamic"</span>)</div><div class="line">            .setShortLabel(<span class="string">"Dynamic"</span>)</div><div class="line">            .setLongLabel(<span class="string">"Open dynamic shortcut"</span>)</div><div class="line">            .setIcon(Icon.createWithResource(<span class="keyword">this</span>, R.drawable.ic_dynamic_shortcut_2))</div><div class="line">            .setIntents(</div><div class="line">                    <span class="keyword">new</span> Intent[]&#123;</div><div class="line">                            <span class="keyword">new</span> Intent(Intent.ACTION_MAIN, Uri.EMPTY, <span class="keyword">this</span>, MainActivity.class).setFlags(Intent.FLAG_ACTIVITY_CLEAR_TASK),</div><div class="line">                            <span class="keyword">new</span> Intent(DynamicShortcutActivity.ACTION)</div><div class="line">                    &#125;)</div><div class="line">            .build();</div><div class="line"></div><div class="line">    shortcutManager.setDynamicShortcuts(Arrays.asList(webShortcut, dynamicShortcut));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>创建一个新的空的Activity，名字叫做DynamicShortcutActivity，在manifest文件中注册。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">activity</span>  </span></div><div class="line">      <span class="attr">android:name</span>=<span class="string">".DynamicShortcutActivity"</span></div><div class="line">      <span class="attr">android:label</span>=<span class="string">"Dynamic shortcut activity"</span>&gt;</div><div class="line">      <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"com.marktony.zhihudaily.OPEN_DYNAMIC_SHORTCUT"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.DEFAULT"</span> /&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">activity</span>&gt;</span></div></pre></td></tr></table></figure>
<p>通过清除array中的排序过的intents，当我们通过创建好的shortcut进入DynamicShortcutActivity之后，按下back键，MainActivity就会被加载。</p>
<p>需要注意的是，在动态创建快捷方式之前，最好是检查一下是否超过了所允许的最大值。否则会抛出相应的异常。</p>
<h4 id="Extra-Bits"><a href="#Extra-Bits" class="headerlink" title="Extra Bits"></a>Extra Bits</h4><ul>
<li><p>当static shortcut 和 dynamic shortcut一起展示时，其出现的顺序是怎样定制呢？</p>
<p>  在 <strong>ShortcutInfo.Builder</strong> 中有一个专门的方法 <strong>setRank(int)</strong> ,通过设置不同的等级，我们就可以控制动态快捷方式的出现顺序，等级越高，出现在快捷方式列表中的位置就越高。</p>
</li>
<li><p>我们还可以设置动态快捷方式的shortLabel的字体颜色。</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">ForegroundColorSpan colorSpan = <span class="keyword">new</span> ForegroundColorSpan(getResources().getColor(android.R.color.holo_red_dark, getTheme()));</div><div class="line">   String label = <span class="string">"github"</span>;</div><div class="line">   SpannableStringBuilder colouredLabel = <span class="keyword">new</span> SpannableStringBuilder(label);</div><div class="line">   colouredLabel.setSpan(colorSpan, <span class="number">0</span>, label.length(), Spanned.SPAN_INCLUSIVE_INCLUSIVE);</div><div class="line"></div><div class="line">   ShortcutInfo webShortcut = <span class="keyword">new</span> ShortcutInfo.Builder(MainActivity.<span class="keyword">this</span>, <span class="string">"shortcut_web"</span>)</div><div class="line">           .setShortLabel(colouredLabel)</div><div class="line">           .setRank(<span class="number">1</span>)</div><div class="line">           .build();</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="App-Shortcuts-Best-Practices"><a href="#App-Shortcuts-Best-Practices" class="headerlink" title="App Shortcuts Best Practices"></a>App Shortcuts Best Practices</h4><p>当设计和创建应用的shortcuts时，应该遵守下面的指导建议：</p>
<ul>
<li><p>遵循设计规范:为了保持我们的应用和系统应用的快捷方式在视觉上一致性，应该遵守<a href="https://developer.android.com/shareables/design/app-shortcuts-design-guidelines.pdf" target="_blank" rel="external">App Shortcuts Design Guidelines</a>。</p>
</li>
<li><p>发布4个不同的快捷方式:尽管现在的API支持静态和动态总共5个快捷方式，但是为了提高shortcut的视觉效果，建议只添加4个不同的快捷方式。</p>
</li>
<li><p>限制快捷方式描述的文本长度:在Launcher中，显示快捷方式时，空间长度受到了限制。如果可能的话，应该将「short description」的文字长度控制在10个字母以内，将「long discription」的长度限制在25个字母以内。</p>
</li>
<li><p>保存shortcut和action的历史记录:创建的每一个shortcut，应该考虑到用户能够通过不同的方式完成相同的任务。在这种情况下，记得调用 <strong>reportShortcutUsed()</strong> 方法，这样，launcher就可以提高shortcut对应的actions的反应速度。</p>
</li>
<li><p>只有在shortcuts的意义存在时更新：当改变动态快捷方式时，只有在shortcut仍然保持着它的含义时，调用 <strong>updateShortcuts()</strong> 方法改变它的信息。否则，应该使用<strong>addDynamicShortcuts()</strong> 或者 <strong>setDynamicShortcuts()</strong> 创建一个具有新含义的ID的快捷方式。</p>
<p>  举个例子，如果我们已经创建了导航到一个超市的快捷方式，如果超市的名称改变了但是位置并没有变化时，只更新信息是合适的。但是如果用户开始在一个不同位置的超市购物时，最好是创建一个全新的快捷方式(而不仅仅是更新信息了)。</p>
</li>
<li><p>在备份和恢复时，动态shortcuts不应该被保存:正是因为这个原因，推荐我们在需要APP启动和重新发布动态快捷方式时，检查 <strong>getDynamicShortcuts()</strong> 的对象的数量。可以参考<a href="https://developer.android.com/guide/topics/ui/shortcuts.html#backup-and-restore" target="_blank" rel="external">Backup and Restore</a>部分的代码片段。</p>
</li>
</ul>
<h3 id="Round-Icon-Resources"><a href="#Round-Icon-Resources" class="headerlink" title="Round Icon Resources"></a>Round Icon Resources</h3><p>在Android 7.1上，Google推出了一个部分用户可能不太喜欢的特性–圆形图标。圆形图标长什么样，可以看看下面的图。</p>
<img src="/2016/12/29/适配Android-7-1-Nougat新特性/round_icon.png" alt="round icon" title="round icon">
<blockquote>
<p>同时，圆形图标规范也作为一部分内容加入到了更新说明和开发文档中。<br>应用程序现在可以定义圆形启动器图标以用于特定的移动设备之上。当启动器请求应用程序图标时，程序框架应返回 android：icon 或 android：roundIcon，视设备具体要求而定。因此，应用程序在开发时应该确保同时定义 android：icon和 android：roundIcon 两个变量。您可以使用 Image Asset Studio 来设计圆形图标。</p>
<p>您应该确保在支持新的圆形图标的设备上测试您的应用程序，以确保应用程序图标的外观无虞和实际效果。测试您的资源的一种方法是在 Google Pixel 设备上安装您的应用。您还可以通过运行 Android 模拟器并使用 Google API 模拟器系统（目标 API 等级为 25）测试您的图标。</p>
</blockquote>
<p>我们可以通过 <strong>Android Studio</strong> 自带的 <strong>Image Asset Studio</strong>设计图标。在项目的 <strong>res</strong> 目录下点击鼠标右键，选择 <strong>new</strong> –&gt; <strong>Image Asset</strong> 即可设计图标。</p>
<img src="/2016/12/29/适配Android-7-1-Nougat新特性/ImageAssetStudio.png" alt="Image Asset Studio" title="Image Asset Studio">
<p>更多关于设计应用图标的信息，可以参考<a href="https://material.google.com/style/icons.html#icons-product-icons" target="_blank" rel="external">Material Design guidelines</a>。</p>
<h3 id="Image-Keyboard-Support"><a href="#Image-Keyboard-Support" class="headerlink" title="Image Keyboard Support"></a>Image Keyboard Support</h3><p>在较早版本的Android系统中，软键盘(例如我们所熟知的Input Method Editors，或者说IME)，只能够给应用发送unicode编码的emoji，对于rich content，应用只能通过使用自建的私有的API实现发送图片的功能。而在Android 7.1中，SDK包含了一个全新的Commit Content API，输入法应用不仅可以调用此 API 实现发送图片和其他rich content，一些通讯应用（比如 Google Messenger）也可以通过此 API 来更好地处理这些来自输入法的图片、网页信息和 GIF 内容。</p>
<img src="/2016/12/29/适配Android-7-1-Nougat新特性/image-keyboard-sample.png" alt="image keyboard" title="image keyboard">
<h4 id="How-it-works"><a href="#How-it-works" class="headerlink" title="How it works"></a>How it works</h4><ol>
<li><p>当用户点击EditText时，    editor会发送一个它所能接受的 <strong>EditorInfo.contentMimeTypes</strong> MIME 内容类型的列表。</p>
</li>
<li><p>IME读取这个在软键盘中支持类型和展示内容的列表。</p>
</li>
<li><p>当用户选择一张图片后，IME调用 <strong>commitContent()</strong> 并向editor发送一个InputContentInfo。 <strong>commitContent()</strong> 方法是一个类似于 <strong>commitText()</strong> 的方法，但是是rich content的。 <strong>InputContentInfo</strong> 包含着一个表示content provider中内容的URI。然后我们的应用就可以请求相应的权限并读取URI中的内容。</p>
</li>
</ol>
<img src="/2016/12/29/适配Android-7-1-Nougat新特性/image-keyboard-diagram.png" alt="image keyboard diagram" title="image keyboard diagram">
<h4 id="Adding-Image-Support-to-Apps"><a href="#Adding-Image-Support-to-Apps" class="headerlink" title="Adding Image Support to Apps"></a>Adding Image Support to Apps</h4><p>为了接收来自IME的rich content，应用必须告诉IME它所能接收的内容类型并之指定当接收到内容后的回调方法。下面是一个怎样创建一个能够接收PNG图片的 <strong>EditText</strong> 的演示代码。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">EditText editText = <span class="keyword">new</span> EditText(<span class="keyword">this</span>) &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> InputConnection <span class="title">onCreateInputConnection</span><span class="params">(EditorInfo editorInfo)</span> </span>&#123;</div><div class="line">        <span class="keyword">final</span> InputConnection ic = <span class="keyword">super</span>.onCreateInputConnection(editorInfo);</div><div class="line">        EditorInfoCompat.setContentMimeTypes(editorInfo,</div><div class="line">                <span class="keyword">new</span> String [] &#123;<span class="string">"image/png"</span>&#125;);</div><div class="line"></div><div class="line">        <span class="keyword">final</span> InputConnectionCompat.OnCommitContentListener callback =</div><div class="line">            <span class="keyword">new</span> InputConnectionCompat.OnCommitContentListener() &#123;</div><div class="line">                <span class="meta">@Override</span></div><div class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onCommitContent</span><span class="params">(InputContentInfoCompat inputContentInfo,</span></span></div><div class="line">                        <span class="keyword">int</span> flags, Bundle opts) &#123;</div><div class="line">                    <span class="comment">// read and display inputContentInfo asynchronously</span></div><div class="line">                    <span class="keyword">if</span> (BuildCompat.isAtLeastNMR1() &amp;&amp; (flags &amp;</div><div class="line">                        InputConnectionCompat.INPUT_CONTENT_GRANT_READ_URI_PERMISSION) != <span class="number">0</span>) &#123;</div><div class="line">                        <span class="keyword">try</span> &#123;</div><div class="line">                            inputContentInfo.requestPermission();</div><div class="line">                        &#125;</div><div class="line">                        <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">                            <span class="keyword">return</span> <span class="keyword">false</span>; <span class="comment">// return false if failed</span></div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line"></div><div class="line">                    <span class="comment">// read and display inputContentInfo asynchronously.</span></div><div class="line">                    <span class="comment">// call inputContentInfo.releasePermission() as needed.</span></div><div class="line"></div><div class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;  <span class="comment">// return true if succeeded</span></div><div class="line">                &#125;</div><div class="line">            &#125;;</div><div class="line">        <span class="keyword">return</span> InputConnectionCompat.createWrapper(ic, editorInfo, callback);</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>代码还是蛮多的，解释一下。</p>
<ul>
<li><p>例子使用了support library，并且引用的是 <strong>android.support.v13.view.inputmethod</strong> 而不是 <strong>android.view.inputmethod</strong> 。</p>
</li>
<li><p>例子创建了一个 <strong>EditText</strong> 并复写了它改变 <strong>InputConnection</strong> 的 <strong>onCreateInputConnection(EditorInfo)</strong> 方法. <strong>InputConnection</strong> 是IME和正在接收输入的沟通管道。</p>
</li>
<li><p>调用 <strong>super.onCreateInputConnection()</strong> 保留了内建的行为(包括发送和接收文本)，并提供给我们一个 <strong>InputConnection</strong> 的引用。</p>
</li>
<li><p><strong>setContentMimeTypes()</strong> 向 <strong>EditorInfo</strong> 添加了一个所支持的MIME类型的列表。 需要保证在 <strong>setContentMimeTypes()</strong> 之前调用 <strong>super.onCreateInputConnection()</strong> 。</p>
</li>
<li><p>回调在IME提交内容是被执行。 <strong>onCommitContent()</strong> 方法有一个对包含了内容URI的 <strong>InputContentInfoCompat</strong> 的引用。</p>
<ul>
<li>当我们的应用运行在API Level 25或者更高并且IME设置了 <strong>INPUT_CONTENT_GRANT_READ_URI_PERMISSION</strong> flag时，我们应该请求并且释放权限。否则，我们应该在此之前就拥有content URI的访问权限，一是因为权限是由IME授权的，二是content provider不对访问进行约束。更多的信息可以访问<a href="https://developer.android.com/guide/topics/text/image-keyboard.html#adding_image_support_to_imes" target="_blank" rel="external">Adding Image Support to IMEs</a></li>
</ul>
</li>
<li><p><strong>createWrapper()</strong> 包装了inputConnection和已修改的editorInfo，新的InputConnection的回调并且返回。</p>
</li>
</ul>
<p>下面是一些实践小技巧。</p>
<ul>
<li><p>不支持rich content的Editor不应该调用 <strong>setContentTypes()</strong> 并把 <strong>EditorInfo.contentMimeTypes</strong> 设置为null。</p>
</li>
<li><p>Editor应该忽略掉在 <strong>InputConnectionInfo</strong> 中指定的MIME类型和所接收类型不通的内容。</p>
</li>
<li><p>rich content不影响也不被文本指针的位置所影响。editor在进行内容处理是可以直接忽略掉光标的位置。</p>
</li>
<li><p>在editor的 <strong>OnCommitContentListener.onCommitContent()</strong> 方法中，我们可以异步的返回true，甚至是在加载内容之前。</p>
</li>
<li><p>不同于文本内容在被提交之前可以在IME中被编辑，rich content会被立即提交。需要注意特性，如果想要提供编辑或者删除内容的能力，我们需要自己提供处理逻辑。</p>
</li>
</ul>
<p>为了测试APP，需要确保你的设备或者虚拟机的键盘能够发送rich content。你可以在Android 7.1或者更高的系统中使用Google Keyboard，或者是安装<a href="https://developer.android.com/samples/CommitContentSampleIME/index.html" target="_blank" rel="external">CommitContent IME sample</a>.</p>
<p>你可以在<a href="https://developer.android.com/samples/CommitContentSampleApp/index.html" target="_blank" rel="external">CommitContent App sample</a>获取到完整的示例代码。</p>
<h4 id="Adding-Image-Support-to-IMEs"><a href="#Adding-Image-Support-to-IMEs" class="headerlink" title="Adding Image Support to IMEs"></a>Adding Image Support to IMEs</h4><p>想要IME支持发送rich content，需要引入下面所展示的Commit Content API。</p>
<ul>
<li><p>复写 <strong>onStartInput()</strong> 或者 <strong>onStartInputView()</strong> ，并读取来自目标editor的支持内容类型列表。</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStartInputView</span><span class="params">(EditorInfo info, <span class="keyword">boolean</span> restarting)</span> </span>&#123;</div><div class="line">    String[] mimeTypes = EditorInfoCompat.getContentMimeTypes(editorInfo);</div><div class="line"></div><div class="line">    <span class="keyword">boolean</span> gifSupported = <span class="keyword">false</span>;</div><div class="line">    <span class="keyword">for</span> (String mimeType : mimeTypes) &#123;</div><div class="line">        <span class="keyword">if</span> (ClipDescription.compareMimeTypes(mimeType, <span class="string">"image/gif"</span>)) &#123;</div><div class="line">            gifSupported = <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (gifSupported) &#123;</div><div class="line">        <span class="comment">// the target editor supports GIFs. enable corresponding content</span></div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="comment">// the target editor does not support GIFs. disable corresponding content</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>当用户选择了一张图片时，将内容提交给APP。当IME有正在编辑的文本时，应该避免调用 <strong>commitContent()</strong> ，因为这样可能导致editor失去焦点。下面的代码片段展示了怎样提交一张GIF图片。</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Commits a GIF image</div><div class="line"> *</div><div class="line"> * <span class="doctag">@param</span> contentUri Content URI of the GIF image to be sent</div><div class="line"> * <span class="doctag">@param</span> imageDescription Description of the GIF image to be sent</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">commitGifImage</span><span class="params">(Uri contentUri, String imageDescription)</span> </span>&#123;</div><div class="line">    InputContentInfoCompat inputContentInfo = <span class="keyword">new</span> InputContentInfoCompat(</div><div class="line">            contentUri,</div><div class="line">            <span class="keyword">new</span> ClipDescription(imageDescription, <span class="keyword">new</span> String[]&#123;<span class="string">"image/gif"</span>&#125;));</div><div class="line">    InputConnection inputConnection = getCurrentInputConnection();</div><div class="line">    EditorInfo editorInfo = getCurrentInputEditorInfo();</div><div class="line">    Int flags = <span class="number">0</span>;</div><div class="line">    If (android.os.Build.VERSION.SDK_INT &gt;= <span class="number">25</span>) &#123;</div><div class="line">        flags |= InputConnectionCompat.INPUT_CONTENT_GRANT_READ_URI_PERMISSION;</div><div class="line">    &#125;</div><div class="line">    InputConnectionCompat.commitContent(</div><div class="line">            inputConnection, editorInfo, inputContentInfo, flags, opts);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>作为一个IME开发者，有很大可能你需要引入你自己的content provider来响应content URI请求。如果你的IME支持来自像 <strong>MediaStore</strong> 这样已经存在的content provider倒是可以例外。关于创建content provider的更多信息，可以参见 <a href="https://developer.android.com/samples/CommitContentSampleIME/index.html" target="_blank" rel="external">CommitContent IME sample</a>, [Content Provider] (<a href="https://developer.android.com/guide%20/topics/providers/content-providers.html)文档" target="_blank" rel="external">https://developer.android.com/guide%20/topics/providers/content-providers.html)文档</a>, <a href="https://developer.android.com/training/secure-file-sharing/setup-sharing.html" target="_blank" rel="external">File Provider</a>文档。</p>
</li>
<li><p>如果正在创建自己的content provider，建议不要export(将 android:export 设置为false)。通过设置 <strong>android:grandUriPermission</strong> 为true允许在provider内部进行权限授予替代。然后，你的IME在内容提交时可以授予访问content URI的权限。有两种实现的方法：</p>
<ul>
<li><p>在Android 7.1(API Level 25)或更高的系统中，当调用 <strong>commitContent</strong> 方法时，将flag参数设置为 <strong>INPUT_CONTENT_GRANT_READ_URI_PERMISSION</strong> 。然后，APP收到的 <strong>InputContentInfo</strong> 对象可以通过调用 <strong>requestPermission()</strong> 方法和 <strong>releasePermission()</strong> 请求和释放临时访问权限。</p>
</li>
<li><p>在Android 7.0(API Level 24)或者更低的系统中， <strong>INPUT_CONTENT_GRANT_READ_URI_PERMISSION</strong> 直接被忽略，所以我们需要手动的授予内容访问权限。方法就是 <strong>grantUriPermission()</strong> ,但是我们也可以引入满足自己要求的机制。</p>
</li>
</ul>
</li>
</ul>
<p>权限授予的例子，我们可以在<a href="https://developer.android.com/samples/CommitContentSampleIME/index.html" target="_blank" rel="external">CommitContent IME sample</a>中的doCommitContent()方法。</p>
<p>为了测试IME，确保我们的设备或者模拟器拥有接收rich content的的应用。我们可以在Android 7.1或者更高的系统中使用Google Messenger应用或者安装<a href="https://developer.android.com/samples/CommitContentSampleApp/index.html" target="_blank" rel="external">CommitContent App Sample</a>。</p>
<p>获取完整的示例代码，可以访问<a href="https://developer.android.com/samples/CommitContentSampleIME/index.html" target="_blank" rel="external">CommitContent IME Sample</a>。</p>
<h3 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h3><p>Google在刷新版本号的路上简直是在策马奔腾了，嘚儿驾。我们也能够看到Google的努力，Android也在变的越来越好，加油吧，小机器人。</p>
<p>本次Shortcuts部分的代码可以在我的GitHub仓库<a href="https://github.com/TonnyL/ZhiHuDaily" target="_blank" rel="external">ZhiHuDaily</a>中看到。欢迎star哟。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[JAVA深克隆与浅克隆]]></title>
      <url>http://tonnyl.github.io/2016/11/05/JAVA%E6%B7%B1%E5%85%8B%E9%9A%86%E4%B8%8E%E6%B5%85%E5%85%8B%E9%9A%86/</url>
      <content type="html"><![CDATA[<p>使用克隆可以快速构造一个和已有对象相同的副本</p>
<a id="more"></a>
<p>所有的Java类都继承自java.lang.Object,而Object类提供了一个clone方法，可以将一个Java对象复制一份。需要注意的是能够实现克隆的Java类必须实现一个标示接口Cloneable，表示这个Java类支持复制。如果一个类没有实现这个接口但是调用了clone()方法，Java编译器将抛出一个CloneNotSupportedException异常。</p>
<h3 id="什么是浅克隆和深克隆"><a href="#什么是浅克隆和深克隆" class="headerlink" title="什么是浅克隆和深克隆"></a>什么是浅克隆和深克隆</h3><p>通常情况下，一个类包含一些成员对象，在克隆对象时，根据其成员对象是否也克隆，克隆分为两种形式：深克隆和浅克隆。</p>
<h4 id="浅克隆"><a href="#浅克隆" class="headerlink" title="浅克隆"></a>浅克隆</h4><p>在浅克隆中，被复制对象的所有普通成员变量都具有与原来的对象相同的值，而所有的对其他对象的引用仍然指向原来的对象。换言之，浅克隆仅仅复制所考虑的对象，而不复制它所引用的成员对象，也就是其中的成员对象并不复制。在浅克隆中，当对象被复制时它所包含的成员对象却没有被复制。</p>
<img src="/2016/11/05/JAVA深克隆与浅克隆/shadow_copy.png" alt="浅克隆" title="浅克隆">
<p>图中obj1为原型对象，obj2为复制后的对象，containedObj1和containedObj2为成员对象。</p>
<h4 id="深克隆"><a href="#深克隆" class="headerlink" title="深克隆"></a>深克隆</h4><p>在深克隆中被复制对象的所有普通成员变量也都含有与原来的对象相同的值，除去那些引用其他对象的变量。那些引用其他对象的变量将指向被复制过来的新对象，而不再是原有的那些被引用的对象。换言之，深克隆把要复制的对象所引用的对象都复制了一遍。在深克隆中，除了对象本身被复制外，对象包含的引用也被复制，也就是其中的成员对象也被复制。</p>
<img src="/2016/11/05/JAVA深克隆与浅克隆/deep_copy.png" alt="深克隆" title="深克隆">
<h3 id="Java中clone-方法解析"><a href="#Java中clone-方法解析" class="headerlink" title="Java中clone()方法解析"></a>Java中clone()方法解析</h3><p>Java语言提供的clone()方法将对象复制了一份并返回给调用者。一般而言,clone()方法满足：</p>
<ol>
<li>对任何的对象x，都有x.clone() != x，即克隆对象与原对象不是同一个对象。</li>
<li>对任何对对象x，都有x.clone().getClass() == x.getClass()，即克隆对象与原对象的类型一样。</li>
<li>如果对象x的equals()方法定义恰当，那么x.clone().equals(x)应该成立。</li>
</ol>
<p>为了获取对象的一份拷贝，我们可以利用Object类的clone()方法，具体步骤如下：</p>
<ol>
<li>在派生类中覆盖基类的clone()方法，并声明为public。</li>
<li>在派生类的clone()方法中，调用super.clone()。</li>
<li>在派生类中实现Cloneable接口。</li>
</ol>
<p>在Java中，通过覆盖Object类的clone()方法可以实现浅克隆，如果需要实现深克隆，可以通过序列化等方式实现。</p>
<p>序列化(Serialization)就是将对象写到流的过程，写到流中的对象是原对象的一个拷贝，而原对象仍然存在与内存中。通过序列化实现的拷贝不仅可以复制对象本身，而且可以复制其引用的成员对象，因此通过序列化将对象写到一个流中，再从流里将其读出来，从而实现克隆。需要注意的是能够实现序列化的对象其类必须实现Serializable接口，否则无法实现序列化操作。</p>
<p>Java提供的Cloneable接口和Serializable接口其代码都非常简单，它们是空接口，这种空接口也称为标示接口，标示接口中没有任何方法定义，其作用就是告诉JRE这些接口的实现类是否具有某个功能，如是否支持克隆，是否支持序列化等。</p>
<h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p>下面通过两个实例分别实现浅克隆和深克隆。</p>
<h4 id="邮件浅克隆"><a href="#邮件浅克隆" class="headerlink" title="邮件浅克隆"></a>邮件浅克隆</h4><p>1.实例说明</p>
<p>由于邮件对象包含的内容较多(如发送者、接收者、标题、内容、主题、日期、附件等)，某系统现需要提供一个邮件复制功能，对于已经创建好的邮件对象，可以通过复制的方式创建一个新的邮件对象，如果要修改某部分内容，无须修改原始的邮件对象，只需要修改复制得到的邮件对象即可。在本实例中使用浅克隆实现邮件复制，复制邮件(E_mail)的同时不复制附件(Attachment)。</p>
<p>2.实例类图</p>
<img src="/2016/11/05/JAVA深克隆与浅克隆/shadow_clone_class_diagram.png" alt="浅克隆类图" title="浅克隆类图">
<p>3.实例代码及解释</p>
<p>(1) 抽象原型类Object</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> java.lang</div><div class="line">	...</div><div class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">native</span> Object <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedExceptioni</span>;</div><div class="line">	...</div></pre></td></tr></table></figure>
<p>Object作为抽象原型类，在Java中，所有的类都是Object的子类，在Object中提供克隆方法clone()，用于创建一个原型对象，其clone()方法具体实现由JVM完成，用户使用时无须关心。</p>
<p>(2) 具体原型类Email(邮件类)</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Email</span> <span class="keyword">implements</span> <span class="title">Cloneable</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="keyword">private</span> Attachment attachment = <span class="keyword">null</span>;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Email</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.attachment = <span class="keyword">new</span> Attachment();</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">clone</span><span class="params">()</span> </span>&#123;</div><div class="line">        Email clone = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            clone = (Email) <span class="keyword">super</span>.clone();</div><div class="line">        &#125; <span class="keyword">catch</span> (CloneNotSupportedException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span>  clone;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> Attachment <span class="title">getAttachment</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.attachment;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"查看邮件"</span>);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Email类是具体原型类，也是Object类的子类，在Java中，只有实现了Cloneable接口的类才能使用clone()方法来进行复制，因此Email类实现了Cloneable接口。在Email类中覆盖了Object的clone()方法，功过直接或间接调用Object的clone()方法返回一个克隆的原型对象。在Email类中定义了一个成员对象attachment，类型为Attachment。</p>
<p>4.辅助代码</p>
<p>(1) 附件类Attachment</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Attachment</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">download</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"下载附件"</span>);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>为了更好的说明深克隆和浅克隆的区别，在本实例中引入了附件类Attachment,邮件类Email与附件类是组合关联关系，在邮件类中定义一个附件类对象作为其成员对象。</p>
<p>(2) 客户端测试类Client</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        Email email, copyEmail;</div><div class="line">        email = <span class="keyword">new</span> Email();</div><div class="line">        copyEmail = (Email) email.clone();</div><div class="line">        </div><div class="line">        System.out.println(<span class="string">"email == copyEmail?"</span>);</div><div class="line">        System.out.println(email == copyEmail);</div><div class="line">        </div><div class="line">        System.out.println(<span class="string">"email.getAttachment == copyEmail.getAttachment?"</span>);</div><div class="line">        System.out.println(email.getAttachment() == copyEmail.getAttachment());</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在Client客户端测试类中，比较原型对象和复制对象是否一致，并比较其成员对象attachment的引用是否一致。</p>
<p>5.结果分析</p>
<p>编译并运行客户端测试类，输出结果如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">email == copyEmail?</div><div class="line">false</div><div class="line">email.getAttachment == copyEmail.getAttachment?</div><div class="line">true</div></pre></td></tr></table></figure>
<h4 id="邮件深克隆"><a href="#邮件深克隆" class="headerlink" title="邮件深克隆"></a>邮件深克隆</h4><p>1.实例说明</p>
<p>使用深克隆实现邮件复制，即复制邮件的同时复制附件。</p>
<p>2.实例类图</p>
<img src="/2016/11/05/JAVA深克隆与浅克隆/deep_clone_class_diagram.png" alt="深克隆类图" title="深克隆类图">
<p>3.实例代码与解释</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.io.*;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Email</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Attachment attachment = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Email</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.attachment = <span class="keyword">new</span> Attachment();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">deepClone</span><span class="params">()</span> <span class="keyword">throws</span> IOException, ClassNotFoundException, OptionalDataException </span>&#123;</div><div class="line">        </div><div class="line">        <span class="comment">// 将对象写入流中</span></div><div class="line">        ByteArrayOutputStream baos = <span class="keyword">new</span> ByteArrayOutputStream();</div><div class="line">        ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(baos);</div><div class="line">        oos.writeObject(<span class="keyword">this</span>);</div><div class="line">        </div><div class="line">        <span class="comment">// 将对象从流中读出</span></div><div class="line">        ByteArrayInputStream bais = <span class="keyword">new</span> ByteArrayInputStream(baos.toByteArray());</div><div class="line">        ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(bais);</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> ois.readObject();</div><div class="line">        </div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Attachment <span class="title">getAttachment</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.attachment;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"查看邮件"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Email作为具体原型类，由于实现的是深克隆，无须使用Object的clone()方法，因此无须实现Cloneable接口；通过序列化的方式实现深克隆，由于要将Email类型的对象写入流中，因此Email类需要实现Serializiable接口。</p>
<p>4.辅助代码</p>
<p>(1)附件类</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.io.Serializable;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Attachment</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">download</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"下载附件"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>作为Email类的对象成员，在深克隆中，Attachment类型的对象也将被写入流中，因此Attachment类也需要实现Serializiable接口。</p>
<p>(2)客户端测试类Client</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        Email email, copyEmail = <span class="keyword">null</span>;</div><div class="line">        email = <span class="keyword">new</span> Email();</div><div class="line"></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            copyEmail = (Email) email.deepClone();</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        System.out.println(<span class="string">"email == copyEmail?"</span>);</div><div class="line">        System.out.println(email == copyEmail);</div><div class="line"></div><div class="line">        System.out.println(<span class="string">"email.getAttachment == copyEmail.getAttachment?"</span>);</div><div class="line">        System.out.println(email.getAttachment() == copyEmail.getAttachment());</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>5.结果及分析</p>
<p>编译运行客户端测试类，结果如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">email == copyEmail?</div><div class="line">false</div><div class="line">email.getAttachment == copyEmail.getAttachment?</div><div class="line">false</div></pre></td></tr></table></figure>
<p>通过结果可以看出，表达式(email == copyEmail)结果为false，即通过复制得到的对象与原型对象的引用不一致，表达式(email.getAttachment() == copyEmail.getAttachment())结果为false，原型对象与克隆对象成员对象的引用不相同，说明其成员对象也复制了一份。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[macOS安装gcc教程]]></title>
      <url>http://tonnyl.github.io/2016/10/31/macOS%E5%AE%89%E8%A3%85gcc%E6%95%99%E7%A8%8B/</url>
      <content type="html"><![CDATA[<p>简单几步就可以在mac上成功安装gcc<br><a id="more"></a></p>
<p>网上的教程大多是通过安装Xcode实现安装gcc的，这种方式的花费有点太得不偿失，Xcode占据的空间是在太大，这对于128g用户简直就是噩梦。</p>
<p>还有就是通过homebrew安装，前提是你电脑上要安装了homebrew。</p>
<p>这里介绍一种简单的方法。</p>
<p>1.到<a href="https://sourceforge.net/projects/hpc/files/hpc/gcc/" target="_blank" rel="external">这里</a>下载所需要的的gcc压缩包。<br><img src="/2016/10/31/macOS安装gcc教程/website.png" alt="下载地址" title="下载地址"></p>
<p>2.下载完成后，通过terminal进入下载目录，即gcc-4.8-bin.tar.gz所在的目录。输入命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gunzip gcc-4.8-bin.tar.gz</div></pre></td></tr></table></figure></p>
<p>解压gcc-4.8-bin.tar.gz压缩包，注意只需要解压一次，在同一目录下得到gcc-4.8-bin.tar文件。</p>
<p>3.继续在terminal中输入命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo tar -xvf gcc-4.8-bin.tar</div></pre></td></tr></table></figure></p>
<p>输入密码后，自动在当前目录下生成了usr目录。cd /user/local/bin就可以看到所有的gcc相关的命令了。当然你也可以将整个目录移动到你需要的目录。<br><img src="/2016/10/31/macOS安装gcc教程/directory.png" alt="解压后的目录" title="解压后的目录"></p>
<p>4.添加gcc路径。关掉当前terminal，重新新建一个terminal。输入如下命令：<code>touch ～/.bash_profile</code>新建一个bash_profile文件，使用vi或者其他编辑器写入如下代码：<code>export PATH=&quot;/Users/lizhaotailang/Gcc/usr/local/bin:$PATH&quot;</code>,当然这是我的路径，具体的路径根据你的实际情况而定。写入完成后关闭文件。为了使文件生效，还需要在terminal输入<code>source ～／.bash_profile</code>。</p>
<p>5.查看是否生效。在terminal中输入：<code>echo $PATH</code>,如果能够在输出中看到刚刚添加的路径就说明添加成功了。或者直接输入gcc命令，如果能够看到gcc的clang错误而不是找不到文件的话，就说明配置成功了。<br><img src="/2016/10/31/macOS安装gcc教程/terminal.png" alt="路径配置" title="路径配置"></p>
<p>6.然后就可以愉快的使用gcc了。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android Studio新建Library并上传到JCenter]]></title>
      <url>http://tonnyl.github.io/2016/10/21/Android-Studio%E6%96%B0%E5%BB%BALibrary%E5%B9%B6%E4%B8%8A%E4%BC%A0%E5%88%B0JCenter/</url>
      <content type="html"><![CDATA[<p>简单实用的教程，教你如何一步一步从新建Library到上传至JCenter<br><a id="more"></a></p>
<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>在开发app的过程中，我们经常会遇到需要使用第三方库的情况，例如常用的<a href="https://github.com/square/okhttp" target="_blank" rel="external">Okhttp</a>，只需要添加一行代码到app下到gradle文件中就可以实现。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">compile &apos;com.squareup.okhttp3:okhttp:3.4.1&apos;</div></pre></td></tr></table></figure></p>
<p>这种方式使用的就是squareup上传到JCenter的Library。那么这种方式是如何实现的呢？</p>
<h3 id="Maven与JCenter"><a href="#Maven与JCenter" class="headerlink" title="Maven与JCenter"></a>Maven与JCenter</h3><p>JCenter是由<a href="https://bintray.com/" target="_blank" rel="external">bintray.com</a>维护的Maven库。在项目的根目录下的build.gradle文件中定义如下，就可以使用JCenter了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">allprojects &#123;</div><div class="line">    repositories &#123;</div><div class="line">        jcenter()</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>Maven Central<br>Maven是由<a href="https://sonatype.org/" target="_blank" rel="external">sonatype.org</a>维护的Maven仓库。<br>在使用一些开源库的时候可能会要求你在根目录下的build.gradle文件中添加如下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">allprojects &#123;</div><div class="line">    repositories &#123;</div><div class="line">        mavenCentral()</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这样就能使用mavenCentral了。</p>
<p>这两者是什么关系呢？</p>
<p>啊哈哈哈哈，没有关系（知道真相的我表情是这样的：你tm在逗我.jpg）。都是Maven仓库，只是存放的地方不一样罢了。在较老版本的Android Studio中，默认使用的是 Maven Central，不过由于它对开发者不那么的友好，后来就默认使用JCenter了。</p>
<h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><h4 id="1-注册bintray帐号"><a href="#1-注册bintray帐号" class="headerlink" title="1. 注册bintray帐号"></a>1. 注册bintray帐号</h4><p>这是当然了，要在人家的平台上发布Library当然首先得有一个帐号了。你可以创建一个全新的，也可以直接使用GitHub登录。</p>
<p>传送门—&gt;<a href="https://bintray.com/" target="_blank" rel="external">bintray官方网站</a></p>
<p>注册成功后就能看到酱的页面了。</p>
<img src="/2016/10/21/Android-Studio新建Library并上传到JCenter/bintray_personal_centre.png" alt="bintray个人中心" title="bintray个人中心">
<h4 id="2-创建新的仓库"><a href="#2-创建新的仓库" class="headerlink" title="2. 创建新的仓库"></a>2. 创建新的仓库</h4><p>点击Add New Repository, 创建一个新的仓库，type选择Maven。</p>
<img src="/2016/10/21/Android-Studio新建Library并上传到JCenter/bintray_create_new_repository.png" alt="创建新的仓库" title="创建新的仓库">
<h4 id="3-创建package"><a href="#3-创建package" class="headerlink" title="3. 创建package"></a>3. 创建package</h4><p>仓库创建成功之后就可以添加包了。进入仓库详情页，点击右下角，Add New Package。</p>
<img src="/2016/10/21/Android-Studio新建Library并上传到JCenter/bintray_add_new_package.png" alt="创建package" title="创建package">
<img src="/2016/10/21/Android-Studio新建Library并上传到JCenter/bintray_add_new_package1.png" alt="创建package" title="创建package">
<p>到这里，准备工作就完成了，现在要开始写代码了。</p>
<h3 id="创建Library"><a href="#创建Library" class="headerlink" title="创建Library"></a>创建Library</h3><ol>
<li><p>新建一个Android Project，这里和我们平时创建工程是一样的。</p>
</li>
<li><p>在项目根文件夹点击鼠标右键，new -&gt; module -&gt; Android Library。</p>
</li>
</ol>
<img src="/2016/10/21/Android-Studio新建Library并上传到JCenter/AndroidStudio_create_new_module.png" alt="创建Library" title="创建Library">
<p>创建成功后，项目结构如下所示。</p>
<img src="/2016/10/21/Android-Studio新建Library并上传到JCenter/AndroidStudio_project_structure.png" alt="项目结构" title="项目结构">
<ol>
<li>现在就可以在库目录(我这里是CircleProgressBar)下编写代码了。</li>
</ol>
<h3 id="打包文件"><a href="#打包文件" class="headerlink" title="打包文件"></a>打包文件</h3><p>之前看的教程都是通过配置炒鸡复杂(好吧，可能是我太菜了，配置了很久都没有成功…)的build.gradle的方法来实现的。这里介绍一种炒鸡炒鸡简单的方法。</p>
<p>1.找到Library下的build.gradle文件，添加如下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">ext &#123;</div><div class="line">    PUBLISH_GROUP_ID = &apos;io.github.marktony&apos;</div><div class="line">    PUBLISH_ARTIFACT_ID = &apos;circle-progress-bar&apos;</div><div class="line">    PUBLISH_VERSION = &apos;1.1&apos;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>文件末尾添加<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">apply from: &apos;https://raw.githubusercontent.com/blundell/release-android-library/master/android-release-aar.gradle&apos;</div></pre></td></tr></table></figure></p>
<img src="/2016/10/21/Android-Studio新建Library并上传到JCenter/AndroidStudio_set_gradle.png" alt="配置gradle文件" title="配置gradle文件">
<table>
<thead>
<tr>
<th>配置项</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>PUBLISH_GROUP_ID</td>
<td>开发者名称</td>
</tr>
<tr>
<td>PUBLISH_ARTIFACT_ID</td>
<td>项目名称</td>
</tr>
<tr>
<td>PUBLISH_VERSION</td>
<td>版本</td>
</tr>
</tbody>
</table>
<p>对比compile地址，可以很方便的理解：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">compile &apos;io.github.marktony:circle-progress-bar:1.1&apos;</div></pre></td></tr></table></figure></p>
<p>2.打包<br>在Android Studio的terminal中执行：</p>
<p>Windows:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gradlew clean build generateRelease</div></pre></td></tr></table></figure></p>
<p>MacOS:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./gradlew clean build generateRelease</div></pre></td></tr></table></figure></p>
<p>经过一系列的下载＋各种编译之后(第一次编译的话，建议你吃个饭或者结个婚生个娃什么的再回来(笑，大概30分钟左右)，时间比较长，要下载文件超级多，不知道是不是只有我一个人是这样。以后再编译就炒鸡快了。)就会提示你BUILD SUCCESS,还有zip包的存放路径，找到这个zip，后面会用到。</p>
<h3 id="上传文件"><a href="#上传文件" class="headerlink" title="上传文件"></a>上传文件</h3><p>回到之前bintray的网站，进入package的详情，就会看到下面的界面。</p>
<img src="/2016/10/21/Android-Studio新建Library并上传到JCenter/bintray_package_detail.png" alt="package详情" title="package详情">
<p>点击version，新建一个版本。完成后点击刚刚新建的版本，点击Upload Files，上传之前生成的zip文件，注意要选中exploding the archive选项。</p>
<p>点击Save Changes，就会有提示你是否发布，点击发布就好了。</p>
<p>如何发布到JCenter呢？</p>
<p>回到package，看到右下角Add to JCenter，点击就可以申请发布到JCenter了。</p>
<img src="/2016/10/21/Android-Studio新建Library并上传到JCenter/bintray_add_to_jcenter.png" alt="添加到JCenter" title="添加到JCenter">
<p>后面就是等待审核，一般等待几个小时就会审核通过了。</p>
<p>如果你想要让别人知道你的compile地址，可以在General栏目下分别看到Maven和Gradle的地址了。</p>
<img src="/2016/10/21/Android-Studio新建Library并上传到JCenter/bintray_compile_addr_maven.png" alt="Maven地址" title="Maven地址">
<img src="/2016/10/21/Android-Studio新建Library并上传到JCenter/bintray_compile_addr_gradle.png" alt="Gradle" title="Gradle">
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>在我看来，通过上述方法实现上传Library到JCenter的方法相较于配置复杂gradle文件的方式要简便许多，但同时使用这种方式也就意味这每次有了新的版本都要手动上传，不能通过terminal直接上传。</p>
<p>如果你对我对CirlceProgressBar项目感兴趣或者对配置文件有不解对地方，可以参考源代码</p>
<p><a href="https://github.com/marktony/CircleProgressBar" target="_blank" rel="external">https://github.com/marktony/CircleProgressBar</a></p>
<p>项目比较简单，里面也有详细的介绍，如果你觉得有用的话就给个star吧，当然页欢迎你看一看我对其他项目哦。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[重构！将Google MVP应用于已有项目]]></title>
      <url>http://tonnyl.github.io/2016/09/27/%E9%87%8D%E6%9E%84%EF%BC%81%E5%B0%86Google-MVP%E5%BA%94%E7%94%A8%E4%BA%8E%E5%B7%B2%E6%9C%89%E9%A1%B9%E7%9B%AE/</url>
      <content type="html"><![CDATA[<p>将Google官方的Android MVP架构引入到已有的项目中。<br><a id="more"></a></p>
<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>在本次项目重构之前，我的项目采用的是什么架构呢？</p>
<p>额，没有架构…或者说，不那么标准的MVC，一个页面就是一个Activity或者Fragment，各种数据，网络请求，响应都写在Activity或者Fragment–这两个不怎么标准的Controller中，代码混乱，而且长长长长长长，写代码的时候一时爽，到了维护阶段，那酸爽，不敢相信。采用新的架构迫在眉睫。</p>
<p>事实上，已经有很多的App项目采用了MVP或者MVVM等架构。由于并没有那么权威的实现，很多开发者也陷入了选择困难症，在各种架构直接摇摆不定，找不到适合自己项目架构。而Google也适时的推出了一系列官方示例用于参考。</p>
<h3 id="Google示例项目"><a href="#Google示例项目" class="headerlink" title="Google示例项目"></a>Google示例项目</h3><blockquote>
<p><a href="https://github.com/googlesamples/android-architecture" target="_blank" rel="external">Android Architecture Blueprints [beta]</a></p>
</blockquote>
<p>示例项目以一个TODO APP为例，目前仍然在进行中。本次项目重构采用的是基础版 <a href="https://github.com/googlesamples/android-architecture/tree/todo-mvp/" target="_blank" rel="external">todo-mvp</a></p>
<p>示例项目的代码组织方式和我之前以adapter, activity, fragment等组织方式不同，采用的是按照功能划分，一种功能就是一个包，包内文件以xxxactivity, xxxfragment, xxxcontract, xxxpresenter命名，xxx代表着所要实现的功能。本次项目重构两种方式均有采用。</p>
<h3 id="重构"><a href="#重构" class="headerlink" title="重构"></a>重构</h3><p>首先是仿照TODO MVP，建立两个Base接口，BaseView和BasePresenter，这两个基本接口是所有的View和Presenter的基类。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BasePresenter</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">start</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>BasePresenter中有方法start()，作用是Presenter开始获取数据并改变界面显示，调用时机为Fragment的onResume()方法中。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BaseView</span>&lt;<span class="title">T</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setPresenter</span><span class="params">(T presenter)</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">initViews</span><span class="params">(View view)</span></span>;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>BaseView中有方法setPresenter(),将Presenter示例传入view，调用时机为Presenter实现类的构造方法中，initViews()传入View实例，用于初始化界面元素，调用时机为Fragment的onCreate()方法中。</p>
<p>接着创建契约类，用于统一管理View和Presenter的所有接口。这里以知乎日报的部分为例。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ZhihuDailyContract</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="class"><span class="keyword">interface</span> <span class="title">View</span> <span class="keyword">extends</span> <span class="title">BaseView</span>&lt;<span class="title">Presenter</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">void</span> <span class="title">showError</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">void</span> <span class="title">showLoading</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">void</span> <span class="title">stopLoading</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">void</span> <span class="title">showResults</span><span class="params">(ArrayList&lt;ZhihuDailyNews.Question&gt; list)</span></span>;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">void</span> <span class="title">showNetworkError</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="class"><span class="keyword">interface</span> <span class="title">Presenter</span> <span class="keyword">extends</span> <span class="title">BasePresenter</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">void</span> <span class="title">loadPosts</span><span class="params">(<span class="keyword">long</span> date, <span class="keyword">boolean</span> clearing)</span></span>;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">void</span> <span class="title">refresh</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">void</span> <span class="title">loadMore</span><span class="params">(<span class="keyword">long</span> date)</span></span>;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">void</span> <span class="title">startReading</span><span class="params">(<span class="keyword">int</span> position)</span></span>;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">void</span> <span class="title">goToSettings</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>然后创建相应的Activity，在官方的示例项目中，Activity是作为View和Presenter的桥梁使用，用于创建View和Presenter实例。本项目由于涉及了TabLayout和ViewPager的使用，所以创建View和Presenter的部分我放到了ViewPager的Adapter中实现。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainPagerAdapter</span> <span class="keyword">extends</span> <span class="title">FragmentPagerAdapter</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> String[] titles;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Context context;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MainPagerAdapter</span><span class="params">(FragmentManager fm, Context context)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(fm);</div><div class="line">        <span class="keyword">this</span>.context = context;</div><div class="line">        titles = context.getResources().getStringArray(R.array.page_titles);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Fragment <span class="title">getItem</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (position == <span class="number">1</span>)&#123;</div><div class="line">            GuokrFragment fragment = GuokrFragment.newInstance();</div><div class="line">            <span class="keyword">new</span> GuokrPresenter(context, fragment);</div><div class="line">            <span class="keyword">return</span> fragment;</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (position == <span class="number">2</span>)&#123;</div><div class="line">            DoubanMomentFragment fragment = DoubanMomentFragment.newInstance();</div><div class="line">            <span class="keyword">new</span> DoubanMomentPresenter(context, fragment);</div><div class="line">            <span class="keyword">return</span> fragment;</div><div class="line">        &#125;</div><div class="line">        ZhihuDailyFragment fragment = ZhihuDailyFragment.newInstance();</div><div class="line">        <span class="keyword">new</span> ZhihuDailyPresenter(context, fragment);</div><div class="line">        <span class="keyword">return</span> fragment;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCount</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> titles.length;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> CharSequence <span class="title">getPageTitle</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> titles[position];</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>Fragment在示例项目中的角色为View的具体实现类。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZhihuDailyFragment</span> <span class="keyword">extends</span> <span class="title">Fragment</span></span></div><div class="line">        <span class="keyword">implements</span> <span class="title">ZhihuDailyContract</span>.<span class="title">View</span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> RecyclerView recyclerView;</div><div class="line">    <span class="keyword">private</span> SwipeRefreshLayout refresh;</div><div class="line">    <span class="keyword">private</span> FloatingActionButton fab;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> ZhihuDailyNewsAdapter adapter;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> ZhihuDailyContract.Presenter presenter;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ZhihuDailyFragment</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ZhihuDailyFragment <span class="title">newInstance</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ZhihuDailyFragment();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Nullable</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> View <span class="title">onCreateView</span><span class="params">(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        View view = inflater.inflate(R.layout.fragment_douban_zhihu_daily,container,<span class="keyword">false</span>);</div><div class="line"></div><div class="line">        initViews(view);</div><div class="line"></div><div class="line">        presenter.loadPosts(Calendar.getInstance().getTimeInMillis(), <span class="keyword">false</span>);</div><div class="line"></div><div class="line">        refresh.setOnRefreshListener(<span class="keyword">new</span> SwipeRefreshLayout.OnRefreshListener() &#123;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onRefresh</span><span class="params">()</span> </span>&#123;</div><div class="line">                presenter.refresh();</div><div class="line">            &#125;</div><div class="line"></div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        fab.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">                ...</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        <span class="keyword">return</span> view;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPresenter</span><span class="params">(ZhihuDailyContract.Presenter presenter)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (presenter != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">this</span>.presenter = presenter;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initViews</span><span class="params">(View view)</span> </span>&#123;</div><div class="line">        recyclerView = (RecyclerView) view.findViewById(R.id.rv_main);</div><div class="line">        recyclerView.setLayoutManager(<span class="keyword">new</span> LinearLayoutManager(getContext()));</div><div class="line">        recyclerView.addItemDecoration(<span class="keyword">new</span> DividerItemDecoration(getActivity(),LinearLayoutManager.VERTICAL));</div><div class="line">        refresh = (SwipeRefreshLayout) view.findViewById(R.id.refresh);</div><div class="line">        fab = (FloatingActionButton) view.findViewById(R.id.fab);</div><div class="line">        fab.setRippleColor(getResources().getColor(R.color.colorPrimaryDark));</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showError</span><span class="params">()</span> </span>&#123;</div><div class="line">        Snackbar.make(fab, R.string.loaded_failed,Snackbar.LENGTH_SHORT).show();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showLoading</span><span class="params">()</span> </span>&#123;</div><div class="line">        refresh.post(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                refresh.setRefreshing(<span class="keyword">true</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stopLoading</span><span class="params">()</span> </span>&#123;</div><div class="line">        refresh.post(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                refresh.setRefreshing(<span class="keyword">false</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showResults</span><span class="params">(ArrayList&lt;ZhihuDailyNews.Question&gt; list)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (adapter == <span class="keyword">null</span>) &#123;</div><div class="line">            adapter = <span class="keyword">new</span> ZhihuDailyNewsAdapter(getContext(), list);</div><div class="line">            adapter.setItemClickListener(<span class="keyword">new</span> OnRecyclerViewOnClickListener() &#123;</div><div class="line">                <span class="meta">@Override</span></div><div class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">OnItemClick</span><span class="params">(View v, <span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line">                    presenter.startReading(position);</div><div class="line">                &#125;</div><div class="line">            &#125;);</div><div class="line">            recyclerView.setAdapter(adapter);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            adapter.notifyDataSetChanged();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showNetworkError</span><span class="params">()</span> </span>&#123;</div><div class="line">        Snackbar.make(fab,R.string.no_network_connected,Snackbar.LENGTH_INDEFINITE)</div><div class="line">                .setAction(R.string.go_to_set, <span class="keyword">new</span> View.OnClickListener() &#123;</div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">                        presenter.goToSettings();</div><div class="line">                    &#125;</div><div class="line">                &#125;).show();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>创建Presenter。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZhihuDailyPresenter</span> <span class="keyword">implements</span> <span class="title">ZhihuDailyContract</span>.<span class="title">Presenter</span>, <span class="title">OnStringListener</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> ZhihuDailyContract.View view;</div><div class="line">    <span class="keyword">private</span> Context context;</div><div class="line">    <span class="keyword">private</span> StringModelImpl model;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> ArrayList&lt;ZhihuDailyNews.Question&gt; list = <span class="keyword">new</span> ArrayList&lt;ZhihuDailyNews.Question&gt;();</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ZhihuDailyPresenter</span><span class="params">(Context context, ZhihuDailyContract.View view)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.context = context;</div><div class="line">        <span class="keyword">this</span>.view = view;</div><div class="line">        <span class="keyword">this</span>.view.setPresenter(<span class="keyword">this</span>);</div><div class="line">        model = <span class="keyword">new</span> StringModelImpl(context);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">loadPosts</span><span class="params">(<span class="keyword">long</span> date, <span class="keyword">boolean</span> clearing)</span> </span>&#123;</div><div class="line">        view.showLoading();</div><div class="line">        <span class="keyword">if</span> (clearing) &#123;</div><div class="line">            list.clear();</div><div class="line">        &#125;</div><div class="line">        model.load(Api.ZHIHU_HISTORY + formatter.ZhihuDailyDateFormat(date), <span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">refresh</span><span class="params">()</span> </span>&#123;</div><div class="line">        list.clear();</div><div class="line">        loadPosts(Calendar.getInstance().getTimeInMillis(), <span class="keyword">true</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">loadMore</span><span class="params">(<span class="keyword">long</span> date)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (NetworkState.networkConnected(context)) &#123;</div><div class="line">            model.load(Api.ZHIHU_HISTORY + formatter.ZhihuDailyDateFormat(date), <span class="keyword">this</span>);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            view.showNetworkError();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startReading</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line">        context.startActivity(<span class="keyword">new</span> Intent(context, ZhihuDetailActivity.class)</div><div class="line">                .putExtra(<span class="string">"id"</span>,list.get(position).getId())</div><div class="line">        );</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">goToSettings</span><span class="params">()</span> </span>&#123;</div><div class="line">        context.startActivity(<span class="keyword">new</span> Intent(Settings.ACTION_SETTINGS));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSuccess</span><span class="params">(String result)</span> </span>&#123;</div><div class="line">        Gson gson = <span class="keyword">new</span> Gson();</div><div class="line">        ZhihuDailyNews post = gson.fromJson(result, ZhihuDailyNews.class);</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (ZhihuDailyNews.Question item : post.getStories()) &#123;</div><div class="line">            list.add(item);</div><div class="line">        &#125;</div><div class="line">        view.showResults(list);</div><div class="line">        view.stopLoading();</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(VolleyError error)</span> </span>&#123;</div><div class="line">        view.stopLoading();</div><div class="line">        view.showError();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>Presenter获取到了View，并通过调用setPresenter()方法将自身传入，如果需要对改变界面显示，直接调用View层的方法即可。这样Presenter就于View层实现了分离。</p>
<p>最后是Model层的实现。由于使用了Gson，数据的返回类型只需要为String类型即可。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OnStringListener</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 请求成功时回调</div><div class="line">     * <span class="doctag">@param</span> result</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onSuccess</span><span class="params">(String result)</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 请求失败时回调</div><div class="line">     * <span class="doctag">@param</span> error</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onError</span><span class="params">(VolleyError error)</span></span>;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>定义了两个方法，分别为请求成功时和请求失败时的回调。</p>
<p>然后需要一个StringModel的实现类–StringModelImpl。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringModelImpl</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Context context;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">StringModelImpl</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.context = context;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">load</span><span class="params">(String url, <span class="keyword">final</span> OnStringListener listener)</span> </span>&#123;</div><div class="line">        StringRequest request = <span class="keyword">new</span> StringRequest(url, <span class="keyword">new</span> Response.Listener&lt;String&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(String s)</span> </span>&#123;</div><div class="line">                listener.onSuccess(s);</div><div class="line">            &#125;</div><div class="line">        &#125;, <span class="keyword">new</span> Response.ErrorListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onErrorResponse</span><span class="params">(VolleyError volleyError)</span> </span>&#123;</div><div class="line">                listener.onError(volleyError);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        VolleySingleton.getVolleySingleton(context).addToRequestQueue(request);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这样，Model, View, Presenter均已实现，实现了各个层次的分离。</p>
<p>采用MVP架构进行重构，代码量上相对于原项目时有所增加的，但这种数量的增加相对于MVP架构带来的好处是显而易见的。当然这是对于代码量比较大的项目而言，平时用于练手的小项目就没有必要强项目所难，勉强的实现MVP了，这样只会增加代码量而已。</p>
<h3 id="本项目地址"><a href="#本项目地址" class="headerlink" title="本项目地址"></a>本项目地址</h3><blockquote>
<p><a href="https://github.com/marktony/ZhihuDaily" target="_blank" rel="external">纸飞机-采用MVP架构，一款集合了知乎日报、果壳精选和豆瓣一刻的综合性阅读客户端</a></p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java中的单例模式]]></title>
      <url>http://tonnyl.github.io/2016/07/19/Java%E4%B8%AD%E7%9A%84%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</url>
      <content type="html"><![CDATA[<h3 id="什么是单例模式？"><a href="#什么是单例模式？" class="headerlink" title="什么是单例模式？"></a>什么是单例模式？</h3><a id="more"></a>
<p>单例模式是一种对象创建模式，用于产生对象的一个具体实例，并且可以确保系统中一个类只能产生唯一的一个实例。</p>
<p>这样的方式能够带来两大好处：</p>
<ol>
<li>对于频繁使用的对象，可以省略创建对象所花费的时间，对于复制的对象，这样的创建方式的开销是十分值得的。</li>
<li>new的次数少了，对内存的使用频率也就下降了，当然也就减轻了GC的压力。</li>
</ol>
<h3 id="设计思想"><a href="#设计思想" class="headerlink" title="设计思想"></a>设计思想</h3><p>这种模式要解决的问题就是要保证应用中只存在一个对象。那怎样实现呢？</p>
<ol>
<li>不允许其他程序new对象</li>
<li>在该类中创建对象</li>
<li>对外需要暴露一个方法，让其他获取这个对象</li>
</ol>
<p>体现到代码中，解决办法为：</p>
<ol>
<li>私有化构造函数</li>
<li>在本类中创建一个本类对象</li>
<li>定义一个方法，能够让其他的类获取这个对象</li>
</ol>
<h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><p>1.最简单的写法为</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance = <span class="keyword">new</span> Singleton();</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> instance;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这种方式称为饿汉式。</p>
<ul>
<li>优点<ul>
<li>简单明了</li>
<li>在类加载时即完成了实例化，避免了线程同步的问题</li>
</ul>
</li>
<li>缺点<ul>
<li>没有使用懒加载</li>
<li>可能造成内存浪费</li>
</ul>
</li>
</ul>
<p>2.变种方式</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125;</div><div class="line"></div><div class="line">    <span class="keyword">static</span> &#123;</div><div class="line">        instance = <span class="keyword">new</span> Singleton();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> instance;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>相比于第一种写法，本类中将实例化对象的代码放到了static代码块中。两种方法的效果其实是一样的。所以优缺点也是一样的。</p>
<p>3.懒汉式(线程不安全)<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;  </div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance;    </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span> <span class="params">()</span></span>&#123;&#125;    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;    </div><div class="line">	<span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;        </div><div class="line">	    instance = <span class="keyword">new</span> Singleton();    </div><div class="line">	&#125;</div><div class="line">    	<span class="keyword">return</span> instance;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<ul>
<li>优点<ul>
<li>使用了懒加载</li>
</ul>
</li>
<li>缺点<ul>
<li>当有多个线程并行调用 getInstance() 的时候，就会创建多个实    例。也就是说在多线程下不能正常工作。</li>
</ul>
</li>
</ul>
<p>4.懒汉式(线程安全)<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;  </div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance;    </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span> <span class="params">()</span></span>&#123;&#125;    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;    </div><div class="line">      <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</div><div class="line">  	     instance = <span class="keyword">new</span> Singleton();    </div><div class="line">      &#125;</div><div class="line">      <span class="keyword">return</span> instance;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<ul>
<li>优点<ul>
<li>线程安全，解决了多实例问题</li>
</ul>
</li>
<li>缺点<ul>
<li>不高效。因为在任何时候只能有一个线程调用 getInstance() 方    法。但是同步操作只需要在第一次调用时才被需要，即第一次创建单例实例对象时。</li>
</ul>
</li>
</ul>
<p>5.双重校验锁<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>)&#123;</div><div class="line">            <span class="keyword">synchronized</span> (Singleton.class)&#123;</div><div class="line">                <span class="keyword">if</span> (instance == <span class="keyword">null</span>)&#123;</div><div class="line">                    instance = <span class="keyword">new</span> Singleton();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> instance;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>进行两次if(instance == null)(Double-Check)的检查可以保证线程安全。</p>
<ul>
<li>优点<ul>
<li>并发度高，提升了性能。</li>
</ul>
</li>
<li>缺点<ul>
<li>并不是绝对安全</li>
</ul>
</li>
</ul>
<p>6.内部类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span>&#123;  </div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;&#125;;  </div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonHolder</span></span>&#123;  </div><div class="line">        <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance=<span class="keyword">new</span> Singleton();  </div><div class="line">    &#125;   </div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;  </div><div class="line">        <span class="keyword">return</span> SingletonHolder.instance;  </div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这是Google公司的工程师Bob Lee写的新的懒汉单例模式。</p>
<ul>
<li>优点<ul>
<li>使用JVM本身机制保证了线程安全问题</li>
<li>由于 SingletonHolder 是私有的，除了 getInstance() 之外没有办法访问它，因此它是懒汉式的。</li>
<li>同时读取实例的时候不会进行同步，没有性能缺陷。</li>
<li>不依赖jdk版本。</li>
</ul>
</li>
</ul>
<p>这种方式也是《Effective Java》推荐的写法。</p>
<p>7.枚举<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">enum</span> EasySingleton&#123;</div><div class="line">    INSTANCE;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<ul>
<li>优点<ul>
<li>简单明了</li>
<li>调用简单，使用EasySingleton.INSTANCE访问实例，比getInstance()简单</li>
<li>创建枚举本身就是线程安全的，不用担心存在多个实例的问题</li>
</ul>
</li>
<li>缺点<ul>
<li>枚举类型enum在jdk1.5时才引入，所以这种方法并不适用于jdk1.5之前的版本</li>
</ul>
</li>
</ul>
<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>使用多线程并发测试。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonPatternTest</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</div><div class="line"></div><div class="line">        CountDownLatch latch = <span class="keyword">new</span> CountDownLatch(<span class="number">1</span>);</div><div class="line"></div><div class="line">        <span class="keyword">int</span> threadCount = <span class="number">1000</span>;</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; threadCount; i++)&#123;</div><div class="line">            <span class="keyword">new</span> Thread()&#123;</div><div class="line">                <span class="meta">@Override</span></div><div class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                    <span class="keyword">try</span> &#123;</div><div class="line">                        <span class="comment">// all thread to wait</span></div><div class="line">                        latch.await();</div><div class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                        e.printStackTrace();</div><div class="line">                    &#125;</div><div class="line"></div><div class="line">                    <span class="comment">// test get instance</span></div><div class="line">                    System.out.println(Singleton.getInstance().hashCode());</div><div class="line">                &#125;</div><div class="line">            &#125;.start();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// release lock, let all thread excute Singleton.getInstance() at the same time</span></div><div class="line">        latch.countDown();</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>其中CountDownLatch latch为闭锁，所有线程中都用latch.await();等待锁释放，待所有线程初始化完成使用latch.countDown();释放锁，从而达到线程并发执行Singleton.getInstance()的效果。</p>
<p>结果为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">2016228077</div><div class="line">2016228077</div><div class="line">2016228077</div><div class="line">2016228077</div><div class="line">...</div></pre></td></tr></table></figure></p>
<p>Reference:</p>
<p><a href="http://blog.csdn.net/dmk877/article/details/50311791" target="_blank" rel="external">http://blog.csdn.net/dmk877/article/details/50311791</a></p>
<p><a href="http://www.trinea.cn/java/singleton/" target="_blank" rel="external">http://www.trinea.cn/java/singleton/</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Get start with Kotlin on Android]]></title>
      <url>http://tonnyl.github.io/2016/07/10/Get-start-with-Kotlin-on-Android/</url>
      <content type="html"><![CDATA[<p>本篇文章主要介绍怎样入门用Kotlin开发Android项目。示例项目地址为：<a href="https://github.com/marktony/FanfouHandpick" target="_blank" rel="external">GitHub:饭否精选</a></p>
<h3 id="什么是Kotlin？"><a href="#什么是Kotlin？" class="headerlink" title="什么是Kotlin？"></a>什么是Kotlin？</h3><p>Kotlin是由<a href="https://www.jetbrains.com/" target="_blank" rel="external">JetBrains</a>开发，基于JVM的一门新的编程语言。开发过Android的童鞋应该都知道Android Studio，它就是基于Intellij IDEA开发的，而Intellij IDEA正是由JetBrains出品。</p>
<p>对于Android开发者而言，Kotlin有两个有趣的特点：</p>
<ul>
<li>对于Java熟悉的开发者，上手Kotlin会很快，因为Kotlin非常直觉化。</li>
<li>强大的IDE支持。</li>
</ul>
<p>相比于Java7,Kotlin的优势在于：</p>
<ul>
<li>易于表现。能实实在在的少写很多代码。</li>
<li>类型安全。我们在Java中经常要防止产生<strong>NullPointerException</strong>，而使用Kotlin是空安全的。我们可以节约很多调试空异常的时间。</li>
<li>函数式。Kotlin是面向对象的语言，但是她使用很多函数式编程的概念。例如lambda表达式。</li>
<li>扩展函数。我们可以扩展类更多的特性。</li>
<li>与Java的完美互操作。我们甚至在一个项目中使用Kotlin和Java两种语言混合编程。</li>
</ul>
<h3 id="在Android项目中使用Kotlin"><a href="#在Android项目中使用Kotlin" class="headerlink" title="在Android项目中使用Kotlin"></a>在Android项目中使用Kotlin</h3><p>首先当然是要配置开发环境了。从Intellij 15开始，Kotlin插件是默认安装的。但是Android Studio中可能就要我们手动配置了。</p>
<p>打开 <strong>Android Studio</strong> 进入 <strong>Preferences</strong> 的 <strong>plugin</strong> 栏，选择 <strong>Install JetBrains Plugin</strong>,在搜索框中输入 <strong>Kotlin</strong>,然后就能看到Kotlin插件了，点击安装即可。</p>
<p>环境配置好后，就可以动手写项目了。按照平时我们新建Android项目的步骤，新建一个项目。然后点击Android Studio的菜单 <strong>Code</strong> 的 <strong>Convert Java File to Kotlin File</strong>,java文件就自动的转换为了Kotlin文件。是不是很简单呢。</p>
<h3 id="印象"><a href="#印象" class="headerlink" title="印象"></a>印象</h3><p>我并没有用Kotlin进行Android开发的经验，这次的项目也主要是作为练手使用。给我的感觉就是省事儿，能减少很多不必要的代码。可以不用写很多的findViewById了。设置监听器也方便了很多了。<br>Talk is cheap, show you the code.</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> : <span class="type">AppCompatActivity</span></span>() &#123;</div><div class="line"></div><div class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreate</span><span class="params">(savedInstanceState: <span class="type">Bundle</span>?)</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState)</div><div class="line">        setContentView(R.layout.activity_main)</div><div class="line"></div><div class="line">        textView.text = <span class="string">"Hello Kotlin"</span></div><div class="line"></div><div class="line">        textView.setOnClickListener &#123;</div><div class="line">          Snackbar.make(fab,<span class="string">"Hello Snackbar"</span>,Snackbar.LENGTH_SHORT)</div><div class="line">        &#125;</div><div class="line"></div><div class="line">  &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上手印象不错，以后有机会会尝试使用Kotlin！</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Fragment生命周期探索]]></title>
      <url>http://tonnyl.github.io/2016/06/13/Fragment%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E6%8E%A2%E7%B4%A2/</url>
      <content type="html"><![CDATA[<p>Fragment和Activity类似，也有自己的生命周期，并且fragment的生命周期和activity的生命周期特别相似。<br><a id="more"></a></p>
<p>Activity的生命周期由四种状态，运行、暂停、停止、和销毁，类似的，Fragment也有这四种状态，只是在一些细小的地方有所不同。</p>
<p>Fragment生命周期图(来自Android官网)</p>
<img src="/2016/06/13/Fragment生命周期探索/fragment_lifecycle.png" alt="fragment_lifecycle" title="fragment_lifecycle">
<p>下面直接通过工程来认识Fragment的生命周期</p>
<p>首先新建FragmentDemo工程。</p>
<p>MainActivity.java</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">package</span> com.marktony.fragmentdemo;</div><div class="line"></div><div class="line"><span class="keyword">import</span> android.support.v4.app.FragmentManager;</div><div class="line"><span class="keyword">import</span> android.support.v4.app.FragmentTransaction;</div><div class="line"><span class="keyword">import</span> android.support.v7.app.AppCompatActivity;</div><div class="line"><span class="keyword">import</span> android.os.Bundle;</div><div class="line"><span class="keyword">import</span> android.util.Log;</div><div class="line"><span class="keyword">import</span> android.view.View;</div><div class="line"><span class="keyword">import</span> android.widget.Button;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Button btnAddFragment;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> FragmentManager fragmentManager;</div><div class="line">    <span class="keyword">private</span> FragmentTransaction fragmentTransaction;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"MainActivity"</span>;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line"></div><div class="line">        initViews();</div><div class="line"></div><div class="line">        initData();</div><div class="line"></div><div class="line">        btnAddFragment.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">                MyFragment fragment = <span class="keyword">new</span> MyFragment();</div><div class="line">                fragmentTransaction.replace(R.id.container,fragment);</div><div class="line">                fragmentTransaction.commit();</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        Log.d(TAG,<span class="string">"onCreate"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initData</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">        fragmentManager = getSupportFragmentManager();</div><div class="line">        fragmentTransaction = fragmentManager.beginTransaction();</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initViews</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">        btnAddFragment = (Button) findViewById(R.id.btn_add_fragment);</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>代码很简单，加载相应的布局，通过监听button的点击事件，加载fragment。</p>
<p>activity_main.xml</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">RelativeLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></div><div class="line">    <span class="attr">android:id</span>=<span class="string">"@+id/container"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:paddingBottom</span>=<span class="string">"@dimen/activity_vertical_margin"</span></div><div class="line">    <span class="attr">android:paddingLeft</span>=<span class="string">"@dimen/activity_horizontal_margin"</span></div><div class="line">    <span class="attr">android:paddingRight</span>=<span class="string">"@dimen/activity_horizontal_margin"</span></div><div class="line">    <span class="attr">android:paddingTop</span>=<span class="string">"@dimen/activity_vertical_margin"</span></div><div class="line">    <span class="attr">tools:context</span>=<span class="string">"com.marktony.fragmentdemo.MainActivity"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">Button</span></span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/btn_add_fragment"</span></div><div class="line">        <span class="attr">android:text</span>=<span class="string">"add_fragment"</span>/&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<p>MyFragment.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.marktony.fragmentdemo;</div><div class="line"></div><div class="line"><span class="keyword">import</span> android.content.Context;</div><div class="line"><span class="keyword">import</span> android.os.Bundle;</div><div class="line"><span class="keyword">import</span> android.support.annotation.Nullable;</div><div class="line"><span class="keyword">import</span> android.support.v4.app.Fragment;</div><div class="line"><span class="keyword">import</span> android.util.Log;</div><div class="line"><span class="keyword">import</span> android.view.LayoutInflater;</div><div class="line"><span class="keyword">import</span> android.view.View;</div><div class="line"><span class="keyword">import</span> android.view.ViewGroup;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by lizhaotailang on 2016/6/13.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyFragment</span> <span class="keyword">extends</span> <span class="title">Fragment</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"MY_FRAGMENT"</span>;</div><div class="line"></div><div class="line">    <span class="comment">// empty constructor</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyFragment</span><span class="params">()</span></span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAttach</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onAttach(context);</div><div class="line"></div><div class="line">        Log.d(TAG,<span class="string">"onAttach"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(@Nullable Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line"></div><div class="line">        Log.d(TAG,<span class="string">"onCreate"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Nullable</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> View <span class="title">onCreateView</span><span class="params">(LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState)</span> </span>&#123;</div><div class="line"></div><div class="line">        Log.d(TAG,<span class="string">"onCreateView"</span>);</div><div class="line"></div><div class="line">        <span class="keyword">return</span> inflater.inflate(R.layout.fragment_my,container,<span class="keyword">false</span>);</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onActivityCreated</span><span class="params">(@Nullable Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onActivityCreated(savedInstanceState);</div><div class="line"></div><div class="line">        Log.d(TAG,<span class="string">"onActivityCreated"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStart</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onStart();</div><div class="line"></div><div class="line">        Log.d(TAG,<span class="string">"onStart"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResume</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onResume();</div><div class="line"></div><div class="line">        Log.d(TAG,<span class="string">"onResume"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPause</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onPause();</div><div class="line"></div><div class="line">        Log.d(TAG,<span class="string">"onPause"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStop</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onStop();</div><div class="line"></div><div class="line">        Log.d(TAG,<span class="string">"onStop"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDestroyView</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onDestroyView();</div><div class="line"></div><div class="line">        Log.d(TAG,<span class="string">"onDestroyView"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onDestroy();</div><div class="line"></div><div class="line">        Log.d(TAG,<span class="string">"onDestroy"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDetach</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onDetach();</div><div class="line"></div><div class="line">        Log.d(TAG,<span class="string">"onDetach"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>MyFragment中复写了一些方法，每个方法被调用时打印日志。</p>
<p>ok，大功告成，现在就跑到手机上。</p>
<p>观察打印日志，可以看到:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">com.marktony.fragmentdemo D/MainActivity: onCreate</div></pre></td></tr></table></figure></p>
<p>按下按钮时<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">com.marktony.fragmentdemo D/MY_FRAGMENT: onAttach</div><div class="line">com.marktony.fragmentdemo D/MY_FRAGMENT: onCreate</div><div class="line">com.marktony.fragmentdemo D/MY_FRAGMENT: onCreateView</div><div class="line">com.marktony.fragmentdemo D/MY_FRAGMENT: onActivityCreated</div><div class="line">com.marktony.fragmentdemo D/MY_FRAGMENT: onStart</div><div class="line">com.marktony.fragmentdemo D/MY_FRAGMENT: onResume</div></pre></td></tr></table></figure></p>
<p>此时按下home键<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">com.marktony.fragmentdemo D/MY_FRAGMENT: onPause</div><div class="line">com.marktony.fragmentdemo D/MY_FRAGMENT: onStop</div></pre></td></tr></table></figure></p>
<p>重新回到应用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">com.marktony.fragmentdemo D/MY_FRAGMENT: onStart</div><div class="line">com.marktony.fragmentdemo D/MY_FRAGMENT: onResume</div></pre></td></tr></table></figure></p>
<p>按下back键，此时fragment和activity均被销毁。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">com.marktony.fragmentdemo D/MY_FRAGMENT: onPause</div><div class="line">com.marktony.fragmentdemo D/MY_FRAGMENT: onStop</div><div class="line">com.marktony.fragmentdemo D/MY_FRAGMENT: onDestroyView</div><div class="line">com.marktony.fragmentdemo D/MY_FRAGMENT: onDestroy</div><div class="line">com.marktony.fragmentdemo D/MY_FRAGMENT: onDetach</div></pre></td></tr></table></figure></p>
<p>观察日志，不难发现。</p>
<p>当fragment被创建时，会依次经历以下状态：</p>
<ul>
<li>onAttach()</li>
<li>onCreate()</li>
<li>onCreateView()</li>
<li>onActivityCreated()</li>
</ul>
<p>当fragment处于可见状态时，会经历</p>
<ul>
<li>onStart()</li>
<li>onResume()</li>
</ul>
<p>不可见时，经历了</p>
<ul>
<li>onPause()</li>
<li>onStop()</li>
</ul>
<p>当fragment被销毁时（或相应的activity被销毁时）</p>
<ul>
<li>onPause()</li>
<li>onStop()</li>
<li>onDestroyView()</li>
<li>onDestroy()</li>
<li>onDetach()</li>
</ul>
<p>由此可见，fragment的生命周期和activity的生命周期真的非常的相似，只是增加了一些新的状态。</p>
<p>在fragment中也是可以通过onSaveInstanceState()方法保存数据的，因为进入停止状态的fragment可能由于系统内存不足而被回收，保存下来数据可以在onCreate(),onCreateView(),onActivityCreate()三个方法中重新得到，他们都含有一个Bundle类型的saveInstanceState参数。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[GitHub Pages现在支持Https了]]></title>
      <url>http://tonnyl.github.io/2016/06/10/GitHub-Pages%E7%8E%B0%E5%9C%A8%E6%94%AF%E6%8C%81Https%E4%BA%86/</url>
      <content type="html"><![CDATA[<p>HTTPS for GitHub Pages<br><a id="more"></a></p>
<p>数以百万计的人用<a href="https://pages.github.com/" target="_blank" rel="external">GitHub Pages</a>来支持他们的网站，这些网站每天也会有数以百万计的访问量，为了更好的支持这些GitHub Pages站点，也为了在互联网中增加HTTPS的使用范围，GitHub Pages现在官方支持所有   <code>&lt;username&gt;.github.io</code> 站点了。HTTPS提供的加密层，可以防止他人窥探或篡改指向您的Pages站点。</p>
<p>你现在就可以访问 <code>*.github.io</code>站点，强制你的站点使用HTTPS。如果你使用了HTTPS，任何HTTP请求都会被直接重定向为HTTPS请求。</p>
<img src="/2016/06/10/GitHub-Pages现在支持Https了/github_pages_now_support_https.png" alt="github_pages_now_support_https" title="github_pages_now_support_https">
<p>从2016年6月9日开始，所有的新建GitHub Pages站点都会被强制使用HTTPS。同时为了使已经存在的站点能够强制使用HTTPS，你可以访问你的站点的仓库，点击<a href="https://help.github.com/articles/securing-your-github-pages-site-with-https/" target="_blank" rel="external">Pages HTTPS documentation</a>来获取更多的信息。</p>
<p>开启GitHub Pages HTTPS的方法：</p>
<p>如上面所说，对于在2016年6月9日之后开通的，以 <code>&lt;username&gt;.github.io</code> 为域名的站点，将自动开启HTTPS。</p>
<p>对于在9日之前开通的站点，可以用下面的方法开启：</p>
<p>step 1. 在GitHub主站，进入到pages的库(repository)<br>step 2. 在你的仓库名称下，点击Settings</p>
<img src="/2016/06/10/GitHub-Pages现在支持Https了/repo-actions-settings.png" alt="repo-actions-settings" title="repo-actions-settings">
<p>step 3. 在“GitHub Pages”下，选择Enforce HTTPS</p>
<img src="/2016/06/10/GitHub-Pages现在支持Https了/enforce-https-checkbox.png" alt="enforce-https-checkbox" title="enforce-https-checkbox">
<p>嗯，听到这个消息，我也是在第一时间把博客升级到了HTTPS，不信你看！</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[实现RecyclerView的item的滑动删除]]></title>
      <url>http://tonnyl.github.io/2016/05/28/%E5%AE%9E%E7%8E%B0RecyclerView%E7%9A%84item%E7%9A%84%E6%BB%91%E5%8A%A8%E5%88%A0%E9%99%A4/</url>
      <content type="html"><![CDATA[<p>利用ItemTouchHelper实现recycler view item的侧滑删除<br><a id="more"></a></p>
<h3 id="关于ItemTouchHelper"><a href="#关于ItemTouchHelper" class="headerlink" title="关于ItemTouchHelper"></a>关于ItemTouchHelper</h3><p>官方文档的解释：</p>
<blockquote>
<p>This is a utility class to add swipe to dismiss and drag &amp; drop support to RecyclerView.</p>
</blockquote>
<p>从文档不难看出，ItemTouchHelper是一个用于在RecyclerView中实现滑动删除和拖拽的工具类。</p>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><ul>
<li>修改build.gradle文件，添加依赖。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">compile &apos;com.android.support:recyclerview-v7:23.4.0&apos;</div></pre></td></tr></table></figure>
<ul>
<li>构建object与Adapter</li>
</ul>
<p>这里假设我已经构建好了实体类CodeLanguage和adapter，在构建adapter时，需要添加一个方法。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line">   mMovies.remove(position);</div><div class="line">   notifyItemRemoved(position);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>创建ItemTouchHelper.SimpleCallback子类</li>
</ul>
<p>为了处理拖动和滑动事件，需要创建ItemTouchHelper.SimpleCallback的实现类。这里，只对滑动事件感兴趣，这是我们的callback.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CodeLanguageItemTouchHelper</span> <span class="title">extens</span> <span class="title">ItemTouchHelper</span>.<span class="title">SimpleCallback</span></span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> CodeLanguageAdapter adapter;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">CodeLanguageItemTouchHelper</span><span class="params">(CodeLanguageAdapter adapter)</span></span>&#123;</div><div class="line">      <span class="keyword">super</span>(ItemTouchHelper.UP | ItemTouchHelper.DOWN, ItemTouchHelper.LEFT | ItemTouchHelper.RIGHT);</div><div class="line">      <span class="keyword">this</span>.adapter = adapter;</div><div class="line">   &#125;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	* If you don't support drag &amp; drop, this method will never be called.</div><div class="line">    * 如果不支持拖拽，那么这个方法就不会被执行。</div><div class="line">	* <span class="doctag">@param</span> recyclerView The RecyclerView to which ItemTouchHelper is attached to. ItemTouchHelper需要附加到的RecyclerView</div><div class="line">	* <span class="doctag">@param</span> viewHolder The ViewHolder which is being dragged by the user. 拖动的ViewHolder</div><div class="line">	* <span class="doctag">@param</span> target The ViewHolder over which the currently active item is being dragged. 目标位置的ViewHolder</div><div class="line">	* <span class="doctag">@return</span> True if the viewHolder has been moved to the adapter position of target. viewHolder是否被移动到目标位置</div><div class="line">	*/</div><div class="line">   <span class="meta">@Override</span></div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onMove</span><span class="params">(RecyclerView recyclerView, RecyclerView.ViewHolder viewHolder, RecyclerView.ViewHolder target)</span> </span>&#123;</div><div class="line">      <span class="keyword">return</span> <span class="keyword">false</span>;  </div><div class="line">   &#125;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	* Called when a ViewHolder is swiped by the user.</div><div class="line">	* If you don't support swiping, this method will never be called.</div><div class="line">	* 如果不支持滑动，方法不会被执行。</div><div class="line">	* <span class="doctag">@param</span> viewHolder The ViewHolder which has been swiped by the user.</div><div class="line">	* <span class="doctag">@param</span> direction  The direction to which the ViewHolder is swiped.</div><div class="line">	*					It is one of UP, DOWN, LEFT or RIGHT.</div><div class="line">	*					If your getMovementFlags(RecyclerView, ViewHolder) method returned relative flags instead of LEFT / RIGHT;</div><div class="line">	*					`direction` will be relative as well. (START or END).</div><div class="line">	*/</div><div class="line">   <span class="meta">@Override</span></div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSwiped</span><span class="params">(RecyclerView.ViewHolder viewHolder, <span class="keyword">int</span> direction)</span> </span>&#123;</div><div class="line">      <span class="comment">//Remove item</span></div><div class="line">      adapter.remove(viewHolder.getAdapterPosition());</div><div class="line">   &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>CodeLanguageItemTouchHelper默认的构造方法需要传入两个参数。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line">* Creates a Callback for the given drag and swipe allowance.</div><div class="line">* <span class="doctag">@param</span> dragDirs 表示拖拽的方向，有六个类型的值：LEFT、RIGHT、START、END、UP、DOWN</div><div class="line">* <span class="doctag">@param</span> swipeDirs 表示滑动的方向，有六个类型的值：LEFT、RIGHT、START、END、UP、DOWN</div><div class="line">*/</div><div class="line">ItemTouchHelper.SimpleCallback(<span class="keyword">int</span> dragDirs, <span class="keyword">int</span> swipeDirs)</div></pre></td></tr></table></figure>
<p>CodeLanguageItemTouchHelper默认需要实现两个方法onMove(),onSwiped()，onMove()是对拖拽的实现，onSwiped()是对滑动的实现。</p>
<ul>
<li>将ItemTouchHelper添加至RecyclerView</li>
</ul>
<p>创建好自己的ItemTouchHelper类后，将它附加到RecyclerView就很简单了。在Activity或者Fragment的onCreate()方法中：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ItemTouchHelper.Callback callback = <span class="keyword">new</span> MovieTouchHelper(adapter);</div><div class="line">ItemTouchHelper helper = <span class="keyword">new</span> ItemTouchHelper(callback);</div><div class="line">helper.attachToRecyclerView(codeLanguageRecyclerView);</div></pre></td></tr></table></figure>
<p>现在所有的工作已经完成。我们现在还没有添加动画，默认的动画系统已经添加。现在就可以使用了。</p>
<p>示例project在这里：<a href="https://github.com/TonnyL/zhuanlan" target="_blank" rel="external">GitHub</a>，与上述项目稍有不同。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[关于知乎专栏ID的一些说明]]></title>
      <url>http://tonnyl.github.io/2016/05/27/%E5%85%B3%E4%BA%8E%E7%9F%A5%E4%B9%8E%E4%B8%93%E6%A0%8FID%E7%9A%84%E4%B8%80%E4%BA%9B%E8%AF%B4%E6%98%8E/</url>
      <content type="html"><![CDATA[<p>对什么是知乎专栏ID以及如何在知乎专栏App中添加喜欢的专栏的一些方法。<br><a id="more"></a></p>
<h3 id="什么是知乎专栏ID？"><a href="#什么是知乎专栏ID？" class="headerlink" title="什么是知乎专栏ID？"></a>什么是知乎专栏ID？</h3><p>知乎专栏id是由若干字符组成，是一个知乎专栏的唯一标识。如 <strong>wooyun</strong> 是知乎用户 <strong>fenggou</strong> 的专栏 <strong>乌云君</strong> 的id。</p>
<h3 id="怎样获取知乎专栏的ID？"><a href="#怎样获取知乎专栏的ID？" class="headerlink" title="怎样获取知乎专栏的ID？"></a>怎样获取知乎专栏的ID？</h3><ul>
<li>PC用户通过浏览器浏览网站时，进入某用户的主页时，可以看到浏览器显示的URL，如图所示，红色线条所指处wooyun即为ID。</li>
</ul>
<img src="/2016/05/27/关于知乎专栏ID的一些说明/zhihu_id_pc.png" alt="zhihu_id_pc.png" title="">
<ul>
<li>Android客户端麻烦一些，进入到用户的主页后，如果该用户有开通知乎专栏，进入TA的专栏。</li>
</ul>
<p>点击TA的文章。</p>
<img src="/2016/05/27/关于知乎专栏ID的一些说明/zhihu_id_android_0.png" alt="zhihu_id_android_0.png" title="">
<p>进入TA的专栏。</p>
<img src="/2016/05/27/关于知乎专栏ID的一些说明/zhihu_id_android_1.png" alt="zhihu_id_android_1.png" title="">
<p>点击分享按钮。</p>
<img src="/2016/05/27/关于知乎专栏ID的一些说明/zhihu_id_android_2.png" alt="zhihu_id_android_2.png" title="">
<p>然后选择复制到粘贴板。</p>
<img src="/2016/05/27/关于知乎专栏ID的一些说明/zhihu_id_android_3.png" alt="zhihu_id_android_3.png" title="">
<p>粘贴至知乎专栏App的自定义页面。点击添加按钮，粘贴至dialog中。</p>
<img src="/2016/05/27/关于知乎专栏ID的一些说明/zhihu_id_android_4.png" alt="zhihu_id_android_4.png" title="">
<p>删除不需要的部分，只留下id部分。现在就可以点击确定添加了。</p>
<img src="/2016/05/27/关于知乎专栏ID的一些说明/zhihu_id_android_5.png" alt="zhihu_id_android_5.png" title="">
<h3 id="什么时候能够更加简单的添加ID？"><a href="#什么时候能够更加简单的添加ID？" class="headerlink" title="什么时候能够更加简单的添加ID？"></a>什么时候能够更加简单的添加ID？</h3><p>好吧，现在添加id的步骤确实有点麻烦，后面我会想办法把添加id的步骤精简一些。预计下一版会实现。</p>
<h3 id="需要注意的事项"><a href="#需要注意的事项" class="headerlink" title="需要注意的事项"></a>需要注意的事项</h3><p>建议总添加ID不要超过20个，添加过多的栏目时可能造成初始化页面时，加载时间过长。</p>
<h3 id="最后说一句"><a href="#最后说一句" class="headerlink" title="最后说一句"></a>最后说一句</h3><p>项目目前已经开源到GitHub,项目地址<a href="https://github.com/marktony/zhuanlan" target="_blank" rel="external">知乎专栏GitHub</a>,欢迎感兴趣的同学fork+star，定制属于自己的知乎专栏App。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Tips]]></title>
      <url>http://tonnyl.github.io/2016/05/19/Tips/</url>
      <content type="html"><![CDATA[<p>那些我自己踩过的坑!</p>
<a id="more"></a>
<ul>
<li><p>SwipeRefreshLayout setRefreshing()方法失败<br>解决方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">swipeRefreshLayout.post(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">        swipeRefreshLayout.setRefreshing(<span class="keyword">true</span>);</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
</li>
<li><p>Recyclerview与SwipeRefreshLayout滑动事件冲突<br>界面中同时有这两种view时，滑动时间便冲突了。知乎android客户端设置界面在无网络连接时，也存在同样的滑动事件冲突的问题，但是它的布局应该是SwipeRefreshLayout和ScrollView冲突。<br>解决方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">recyclerView.setOnScrollListener(<span class="keyword">new</span> RecyclerView.OnScrollListener() &#123;</div><div class="line">           <span class="meta">@Override</span></div><div class="line">           <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onScrolled</span><span class="params">(RecyclerView recyclerView, <span class="keyword">int</span> dx, <span class="keyword">int</span> dy)</span> </span>&#123;</div><div class="line">               <span class="keyword">super</span>.onScrolled(recyclerView, dx, dy);</div><div class="line"></div><div class="line">               <span class="comment">// 确保只有当RecyclerView的item滑动到最上面的一个时RefreshLayout才能下拉</span></div><div class="line">               refreshLayout.setEnabled(linearLayoutManager.findFirstVisibleItemPosition() == <span class="number">0</span>);</div><div class="line">           &#125;</div><div class="line">       &#125;);</div></pre></td></tr></table></figure>
</li>
<li><p>应用退出时网络请求未完成导致失去context<br>这么说可能不是特别清楚，具体的描述应该是：当网络请求仍在进行时，退出应用，这是失去context，某些适配器没有适配完成，导致应用直接崩溃。<br>在知乎专栏的过程中，fragment中的内容全部为recyclerview，而且全部是在网络请求下完成的。第一版的时候我遇到的问题就是上述描述的这样，在网络请求没有完全完成时，退出应用，recyclerview的适配还没有完成，之后直接导致set text on a null object。<br>我的解决方法是：给所有volley网络请求设置TAG，然后在fragment的onStop()方法中取消请求。<br>示例代码:</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyFragment</span> <span class="keyword">extends</span> <span class="title">Fragment</span></span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> RequestQueue queue;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String	 TAG = <span class="string">"TAG"</span>;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(@Nullable Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">		<span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">		queue = Volley.newRequestQueue(getActivity().getApplicationContext());</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Nullable</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> View <span class="title">onCreateView</span><span class="params">(LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        View view = inflater.inflate(R.layout.my_fragment,container,<span class="keyword">false</span>);</div><div class="line"></div><div class="line">        JsonObjectRequest request = <span class="keyword">new</span> JsonObjectRequest(Request.Method.GET, <span class="string">"my url"</span>, <span class="keyword">new</span> Response.Listener&lt;JSONObject&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(JSONObject jsonObject)</span> </span>&#123;</div><div class="line">                <span class="comment">// code</span></div><div class="line">        &#125;, <span class="keyword">new</span> Response.ErrorListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onErrorResponse</span><span class="params">(VolleyError volleyError)</span> </span>&#123;</div><div class="line">               <span class="comment">// code</span></div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        request.setTag(TAG);</div><div class="line">        queue.add(request);</div><div class="line"></div><div class="line">         <span class="meta">@Override</span></div><div class="line">    	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStop</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onStop();</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (queue != <span class="keyword">null</span>)&#123;</div><div class="line">            queue.cancelAll(TAG);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>去除字符串中的html部分<br>在Android中通过一行代码即可搞定。<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">newString = android.text.Html.fromHtml(oldString).toString();</div></pre></td></tr></table></figure>
</li>
</ul>
<p>在java中的解决方法是：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">String newString = Jsoup.parse(html).text();</div></pre></td></tr></table></figure></p>
<p>more…</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[知乎专栏API分析]]></title>
      <url>http://tonnyl.github.io/2016/05/14/%E7%9F%A5%E4%B9%8E%E4%B8%93%E6%A0%8FAPI%E5%88%86%E6%9E%90/</url>
      <content type="html"><![CDATA[<p>知乎专栏API的简单分析<br><a id="more"></a></p>
<p>感谢知乎，提供如此出色的平台，更要感谢辛苦的专栏作者们，为我们提供了这么多的干货，最后感谢支持我的人们，谢谢你们！</p>
<h3 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h3><p>声明：以下所有API均由 <strong>知乎(Zhihu.INC)</strong> 提供，本人通过非正常手段获取。获取与共享的行为有侵犯知乎权益的嫌疑。若被告知停止使用与共享，本人将及时删除整个项目。请您知悉相关情况，遵守知乎的协议。API仅供学习交流使用，请勿用作商业用途。</p>
<h3 id="示例项目"><a href="#示例项目" class="headerlink" title="示例项目"></a>示例项目</h3><p><a href="https://github.com/TonnyL/zhuanlan" target="_blank" rel="external">知乎专栏Android</a></p>
<h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><ul>
<li>专栏的消息均以JSON格式输出</li>
<li>http method均为GET</li>
<li>JSON ARRAY 中的数据，只选取了具有代表性的部分进行展示</li>
</ul>
<h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><h4 id="获取指定专栏的信息"><a href="#获取指定专栏的信息" class="headerlink" title="获取指定专栏的信息"></a>获取指定专栏的信息</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">https://zhuanlan.zhihu.com/api/columns/专栏名</div></pre></td></tr></table></figure>
<p>例如获取知乎小管家的专栏信息<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">https://zhuanlan.zhihu.com/api/columns/zhihuadmin</div></pre></td></tr></table></figure></p>
<p>得到的信息为：</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"followersCount"</span>: <span class="number">7883</span>,</div><div class="line">  <span class="attr">"creator"</span>:</div><div class="line">    &#123;</div><div class="line">      <span class="attr">"profileUrl"</span>: <span class="string">"https://www.zhihu.com/people/zhihuadmin"</span>,</div><div class="line">      <span class="attr">"bio"</span>: <span class="string">"欢迎反馈问题和建议！"</span>,</div><div class="line">      <span class="attr">"hash"</span>: <span class="string">"3d198a56310c02c4a83efb9f4a4c027e"</span>,</div><div class="line">      <span class="attr">"uid"</span>: <span class="number">53253479858176</span>,</div><div class="line">      <span class="attr">"isOrg"</span>: <span class="literal">false</span>,</div><div class="line">      <span class="attr">"description"</span>: <span class="string">""</span>,</div><div class="line">      <span class="attr">"slug"</span>: <span class="string">"zhihuadmin"</span>,</div><div class="line">      <span class="attr">"avatar"</span>:</div><div class="line">        &#123;</div><div class="line">          <span class="attr">"id"</span>: <span class="string">"34bf96bf5584ac4b5264bd7ed4fdbc5a"</span>,</div><div class="line">          <span class="attr">"template"</span>: <span class="string">"https://pic3.zhimg.com/&#123;id&#125;_&#123;size&#125;.jpg"</span></div><div class="line">        &#125;,</div><div class="line">      <span class="attr">"name"</span>: <span class="string">"知乎小管家"</span></div><div class="line">    &#125;,</div><div class="line">    <span class="attr">"topics"</span>:</div><div class="line">      [</div><div class="line">        &#123;</div><div class="line">          <span class="attr">"url"</span>: <span class="string">"https://www.zhihu.com/topic/19552112"</span>,</div><div class="line">          <span class="attr">"id"</span>: <span class="string">"19552112"</span>,</div><div class="line">          <span class="attr">"name"</span>: <span class="string">"知乎建议反馈"</span></div><div class="line">        &#125;,</div><div class="line">      ],</div><div class="line">    <span class="attr">"activateState"</span>: <span class="string">"activated"</span>,</div><div class="line">    <span class="attr">"href"</span>: <span class="string">"/api/columns/zhihuadmin"</span>,</div><div class="line">    <span class="attr">"acceptSubmission"</span>: <span class="literal">true</span>,</div><div class="line">    <span class="attr">"firstTime"</span>: <span class="literal">false</span>,</div><div class="line">    <span class="attr">"postTopics"</span>:</div><div class="line">      [</div><div class="line">        &#123;</div><div class="line">          <span class="attr">"postsCount"</span>: <span class="number">4</span>,</div><div class="line">          <span class="attr">"id"</span>: <span class="number">2</span>,</div><div class="line">          <span class="attr">"name"</span>: <span class="string">"知乎"</span></div><div class="line">        &#125;,</div><div class="line">      ],</div><div class="line">    <span class="attr">"pendingName"</span>: <span class="string">""</span>,</div><div class="line">    <span class="attr">"avatar"</span>:</div><div class="line">      &#123;</div><div class="line">        <span class="attr">"id"</span>: <span class="string">"5a1ec50171767c4fc856f430e46297db"</span>,</div><div class="line">        <span class="attr">"template"</span>: <span class="string">"https://pic4.zhimg.com/&#123;id&#125;_&#123;size&#125;.jpg"</span></div><div class="line">      &#125;,</div><div class="line">    <span class="attr">"canManage"</span>: <span class="literal">false</span>,</div><div class="line">    <span class="attr">"description"</span>: <span class="string">"知乎社区管理团队官方专栏，不定期更新社区管理工作相关的最新消息。"</span>,  </div><div class="line">    <span class="attr">"pendingTopics"</span>: [],</div><div class="line">    <span class="attr">"nameCanEditUntil"</span>: <span class="number">0</span>,</div><div class="line">    <span class="attr">"reason"</span>: <span class="string">""</span>,</div><div class="line">    <span class="attr">"banUntil"</span>: <span class="number">0</span>,</div><div class="line">    <span class="attr">"slug"</span>: <span class="string">"zhihuadmin"</span>,</div><div class="line">    <span class="attr">"name"</span>: <span class="string">"知乎小管家说"</span>,</div><div class="line">    <span class="attr">"url"</span>: <span class="string">"/zhihuadmin"</span>,</div><div class="line">    <span class="attr">"intro"</span>: <span class="string">"知乎社区管理团队官方专栏，不定期更新社区管理工作…"</span>,  </div><div class="line">    <span class="attr">"topicsCanEditUntil"</span>: <span class="number">0</span>,</div><div class="line">    <span class="attr">"activateAuthorRequested"</span>: <span class="string">"none"</span>,</div><div class="line">    <span class="attr">"commentPermission"</span>: <span class="string">"anyone"</span>,</div><div class="line">    <span class="attr">"following"</span>: <span class="literal">false</span>,</div><div class="line">    <span class="attr">"postsCount"</span>: <span class="number">19</span>,  </div><div class="line">    <span class="attr">"canPost"</span>: <span class="literal">false</span></div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<ul>
<li>followersCount: 关注该专栏的人数</li>
<li>creator: 该专栏的创建者信息<ul>
<li>profileUrl: 知乎网的个人主页url</li>
<li>bio: 官网信息中的一句话描述</li>
<li>hash: hash值</li>
<li>uid: uid</li>
<li>isOrg: 是否为机构帐号</li>
<li>description: 描述</li>
<li>slug: slug</li>
<li>avatar: 头像信息<ul>
<li>id: id值，在拼接url时用到</li>
<li>template: url拼接模版</li>
</ul>
</li>
<li>name: 作者名称</li>
</ul>
</li>
<li>topics: 专栏话题信息<ul>
<li>url: 话题在知乎官网中的地址</li>
<li>id: 话题id</li>
<li>name: 话题名称</li>
</ul>
</li>
<li>activateState: 状态信息，是否激活</li>
<li>href: api请求地址</li>
<li>acceptSubmission: 是否接受提交文章</li>
<li>firstTime: 是否为首次提交？？？</li>
<li>postTopics: 文章话题信息<ul>
<li>postsCount: 该话题下文章数</li>
<li>id: id</li>
<li>name: 话题名称</li>
</ul>
</li>
<li>pendingName: ？？？</li>
<li>avatar: 专栏头像信息<ul>
<li>id: 头像id</li>
<li>template: url拼接模版</li>
</ul>
</li>
<li>canManage: 是否可以进行管理</li>
<li>description: 专栏信息描述</li>
<li>pendingTopics: ???话题</li>
<li>nameCanEditUntil: 距下一次修改名称的时间</li>
<li>reason: 被封禁的原因</li>
<li>banUntil: 被封禁的时间</li>
<li>slug: 专栏slug</li>
<li>url: url</li>
<li>intro: 专栏介绍信息</li>
<li>topicsCanEditUntil: 距下一次修改话题的时间</li>
<li>activateAuthorRequested: ???</li>
<li>commentPermission: 评论权限</li>
<li>following: 是否关注改专栏</li>
<li>postsCount: 专栏文章数</li>
<li>canPost: 当前帐号是否有发表文章的权限</li>
</ul>
<p>在获取图片url时，可以根据需要选择不同的尺寸。如下所示，图片质量依次增加。也可以不添加尺寸参数，默认获取最大类型。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">https://pic3.zhimg.com/34bf96bf5584ac4b5264bd7ed4fdbc5a_s.jpg</div><div class="line">https://pic3.zhimg.com/34bf96bf5584ac4b5264bd7ed4fdbc5a_m.jpg</div><div class="line">https://pic3.zhimg.com/34bf96bf5584ac4b5264bd7ed4fdbc5a_l.jpg</div><div class="line">https://pic3.zhimg.com/34bf96bf5584ac4b5264bd7ed4fdbc5a_b.jpg</div><div class="line">https://pic3.zhimg.com/34bf96bf5584ac4b5264bd7ed4fdbc5a_r.jpg</div></pre></td></tr></table></figure></p>
<h4 id="获取指定专栏的文章列表"><a href="#获取指定专栏的文章列表" class="headerlink" title="获取指定专栏的文章列表"></a>获取指定专栏的文章列表</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">https://zhuanlan.zhihu.com/api/columns/专栏名/posts?limit=数量&amp;offset=从哪里开始</div></pre></td></tr></table></figure>
<p>例如，获取知乎小管家的最新的10篇文章<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">https://zhuanlan.zhihu.com/api/columns/zhihuadmin/posts?limit=10&amp;offset=0</div></pre></td></tr></table></figure></p>
<p>其中，limit为获取的数量限制，offset为偏移量，即从哪里开始获取。<br>默认数据为limit=10，offset=0，当然你也可以根据需要定义二者的值。<br>获得的数据为:<br><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line">[</div><div class="line">  &#123;  </div><div class="line">    <span class="attr">"isTitleImageFullScreen"</span>: <span class="literal">false</span>,</div><div class="line">    <span class="attr">"rating"</span>: <span class="string">"none"</span>,</div><div class="line">    <span class="attr">"sourceUrl"</span>: <span class="string">""</span>,</div><div class="line">    <span class="attr">"publishedTime"</span>: <span class="string">"2016-10-13T14:00:49+08:00"</span>,</div><div class="line">    <span class="attr">"links"</span>:</div><div class="line">      &#123;</div><div class="line">        <span class="attr">"comments"</span>: <span class="string">"/api/posts/22921645/comments"</span></div><div class="line">      &#125;,</div><div class="line">    <span class="attr">"author"</span>:</div><div class="line">      &#123;</div><div class="line">        <span class="attr">"profileUrl"</span>: <span class="string">"https://www.zhihu.com/people/zhihuadmin"</span>,</div><div class="line">        <span class="attr">"bio"</span>: <span class="string">"欢迎反馈问题和建议！"</span>,</div><div class="line">        <span class="attr">"hash"</span>: <span class="string">"3d198a56310c02c4a83efb9f4a4c027e"</span>,</div><div class="line">        <span class="attr">"uid"</span>: <span class="number">53253479858176</span>,</div><div class="line">        <span class="attr">"isOrg"</span>: <span class="literal">false</span>,</div><div class="line">        <span class="attr">"description"</span>: <span class="string">""</span>,  </div><div class="line">        <span class="attr">"slug"</span>: <span class="string">"zhihuadmin"</span>,</div><div class="line">        <span class="attr">"avatar"</span>:</div><div class="line">          &#123;</div><div class="line">            <span class="attr">"id"</span>: <span class="string">"34bf96bf5584ac4b5264bd7ed4fdbc5a"</span>,</div><div class="line">            <span class="attr">"template"</span>: <span class="string">"https://pic3.zhimg.com/&#123;id&#125;_&#123;size&#125;.jpg"</span></div><div class="line">          &#125;,</div><div class="line">        <span class="attr">"name"</span>: <span class="string">"知乎小管家"</span></div><div class="line">      &#125;,</div><div class="line">    <span class="attr">"url"</span>: <span class="string">"/p/22921645"</span>,</div><div class="line">    <span class="attr">"title"</span>: <span class="string">"新版社区管理规定于 2016 年 10 月 13 日正式运行"</span>,</div><div class="line">    <span class="attr">"titleImage"</span>: <span class="string">"https://pic2.zhimg.com/v2-517f47cc5269b57f26ea4a25f29d8505_r.jpg"</span>,</div><div class="line">    <span class="attr">"summary"</span>: <span class="string">""</span>,</div><div class="line">    <span class="attr">"content"</span>: <span class="string">"&lt;p&gt;2016 年 9 月 13 日小管家发布了新版社区管理规定，明确了「恶意行为」的定义和违规类型，同时增加了「发布垃圾广告信息」的 3 种违规类型。在完成了为期 1 个月的试运行后&lt;b&gt;，&lt;/b&gt;&lt;b&gt;&lt;a href=\"https://www.zhihu.com/question/19790711/answer/36685915\" class=\"\" data-editable=\"true\" data-title=\"\u65b0\u7248\u793e\u533a\u7ba1\u7406\u89c4\u5b9a\"&gt;\u65b0\u7248\u793e\u533a\u7ba1\u7406\u89c4\u5b9a&lt;/a&gt;"</span>,</div><div class="line">    <span class="attr">"state"</span>: <span class="string">"published"</span>,</div><div class="line">    <span class="attr">"href"</span>: <span class="string">"/api/posts/22921645"</span>,</div><div class="line">    <span class="attr">"meta"</span>:</div><div class="line">      &#123;</div><div class="line">        <span class="attr">"previous"</span>: <span class="literal">null</span>,</div><div class="line">        <span class="attr">"next"</span>: <span class="literal">null</span></div><div class="line">      &#125;,</div><div class="line">    <span class="attr">"commentPermission"</span>: <span class="string">"anyone"</span>,</div><div class="line">    <span class="attr">"snapshotUrl"</span>: <span class="string">""</span>,</div><div class="line">    <span class="attr">"canComment"</span>: <span class="literal">false</span>,</div><div class="line">    <span class="attr">"slug"</span>: <span class="number">22921645</span>,</div><div class="line">    <span class="attr">"commentsCount"</span>: <span class="number">76</span>,</div><div class="line">    <span class="attr">"likesCount"</span>: <span class="number">436</span></div><div class="line">  &#125;,</div><div class="line">]</div></pre></td></tr></table></figure></p>
<ul>
<li>isTitleImageFullScreen: 文章标题大图是否全屏</li>
<li>rating: ???评级</li>
<li>sourceUrl: 源路径</li>
<li>publishedTime: 发表时间</li>
<li>links: 链接信息<ul>
<li>comments: 评论地址</li>
</ul>
</li>
<li>creator: 该专栏的创建者信息<ul>
<li>profileUrl: 知乎网的个人主页url</li>
<li>bio: 官网信息中的一句话描述</li>
<li>hash: hash值</li>
<li>uid: uid</li>
<li>isOrg: 是否为机构帐号</li>
<li>description: 描述</li>
<li>slug: slug</li>
<li>avatar: 头像信息<ul>
<li>id: id值，在拼接url时用到</li>
<li>template: url拼接模版</li>
</ul>
</li>
<li>name: 作者名称</li>
</ul>
</li>
<li>url: 文章网页内容获取(<a href="https://zhuanlan.zhihu.com" target="_blank" rel="external">https://zhuanlan.zhihu.com</a> + url)</li>
<li>title: 文章标题</li>
<li>titleImage: 文章标题大图url(需要注意的是,titleImage的值有可能为空)，和头像一样，也可以组合不同的尺寸参数获取不同尺寸的图片</li>
<li>summary: 文章简要信息</li>
<li>content: HTML格式的文章内容详情，可以通过WebView或者UIWebView展示内容</li>
<li>state: 文章状态(是否发表)</li>
<li>href: api请求地址</li>
</ul>
<h4 id="获取特定的文章信息"><a href="#获取特定的文章信息" class="headerlink" title="获取特定的文章信息"></a>获取特定的文章信息</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">https://zhuanlan.zhihu.com/api/posts/SLUG</div></pre></td></tr></table></figure>
<p>例如，获取知乎小管家的最新一篇文章，通过已经获得的信息，有两种方法组合url进行获取，一是通过href值，另一种就是slug值，当然，这两种方式殊途同归。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">https://zhuanlan.zhihu.com/api/posts/22921645</div></pre></td></tr></table></figure></p>
<p>获取到的信息为:<br><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"isTitleImageFullScreen"</span>: <span class="literal">false</span>,</div><div class="line">  <span class="attr">"rating"</span>: <span class="string">"none"</span>,</div><div class="line">  <span class="attr">"titleImage"</span>: <span class="string">"https://pic2.zhimg.com/v2-cab0719fdec0816c475d7b70e016cbb1_r.jpg"</span>,</div><div class="line">  <span class="attr">"links"</span>:</div><div class="line">    &#123;</div><div class="line">      <span class="attr">"comments"</span>: <span class="string">"/api/posts/22591792/comments"</span></div><div class="line">    &#125;,</div><div class="line">  <span class="attr">"reviewers"</span>: [],</div><div class="line">  <span class="attr">"topics"</span>:</div><div class="line">    [</div><div class="line">      &#123;</div><div class="line">        <span class="attr">"url"</span>: <span class="string">"https://www.zhihu.com/topic/19550887"</span>,</div><div class="line">        <span class="attr">"id"</span>: <span class="string">"19550887"</span>,</div><div class="line">        <span class="attr">"name"</span>: <span class="string">"知乎社区"</span></div><div class="line">      &#125;,</div><div class="line">    ],</div><div class="line">  <span class="attr">"titleImageSize"</span>:</div><div class="line">    &#123;</div><div class="line">      <span class="attr">"width"</span>: <span class="number">0</span>,</div><div class="line">      <span class="attr">"height"</span>: <span class="number">0</span></div><div class="line">    &#125;,</div><div class="line">  <span class="attr">"href"</span>: <span class="string">"/api/posts/22591792"</span>,</div><div class="line">  <span class="attr">"excerptTitle"</span>: <span class="string">""</span>,</div><div class="line">  <span class="attr">"author"</span>:</div><div class="line">    &#123;</div><div class="line">      <span class="attr">"profileUrl"</span>: <span class="string">"https://www.zhihu.com/people/zhihuadmin"</span>,</div><div class="line">      <span class="attr">"bio"</span>: <span class="string">"欢迎反馈问题和建议！"</span>,</div><div class="line">      <span class="attr">"hash"</span>: <span class="string">"3d198a56310c02c4a83efb9f4a4c027e"</span>,</div><div class="line">      <span class="attr">"uid"</span>: <span class="number">53253479858176</span>,</div><div class="line">      <span class="attr">"isOrg"</span>: <span class="literal">false</span>,</div><div class="line">      <span class="attr">"description"</span>: <span class="string">""</span>,</div><div class="line">      <span class="attr">"badge"</span>:</div><div class="line">        &#123;</div><div class="line">          <span class="attr">"identity"</span>:</div><div class="line">            &#123;</div><div class="line">              <span class="attr">"description"</span>: <span class="string">"知乎官方帐号"</span></div><div class="line">            &#125;,</div><div class="line">          <span class="attr">"best_answerer"</span>: <span class="literal">null</span></div><div class="line">        &#125;,</div><div class="line">      <span class="attr">"slug"</span>: <span class="string">"zhihuadmin"</span>,</div><div class="line">      <span class="attr">"avatar"</span>:</div><div class="line">        &#123;</div><div class="line">          <span class="attr">"id"</span>: <span class="string">"34bf96bf5584ac4b5264bd7ed4fdbc5a"</span>,</div><div class="line">          <span class="attr">"template"</span>: <span class="string">"https://pic3.zhimg.com/&#123;id&#125;_&#123;size&#125;.jpg"</span></div><div class="line">        &#125;,</div><div class="line">      <span class="attr">"name"</span>: <span class="string">"知乎小管家"</span></div><div class="line">    &#125;,</div><div class="line">  <span class="attr">"column"</span>:</div><div class="line">    &#123;</div><div class="line">      <span class="attr">"slug"</span>: <span class="string">"zhihuadmin"</span>,</div><div class="line">      <span class="attr">"name"</span>: <span class="string">"知乎小管家说"</span></div><div class="line">    &#125;,</div><div class="line">  <span class="attr">"tipjarState"</span>: <span class="string">"inactivated"</span>,</div><div class="line">  <span class="attr">"content"</span>: <span class="string">"&lt;p&gt;今天，小管家和大家分享一下站内「不规范转载」行为的处理情况。&lt;/p&gt;&lt;br&gt;"</span>,</div><div class="line">  <span class="attr">"state"</span>: <span class="string">"published"</span>,</div><div class="line">  <span class="attr">"sourceUrl"</span>: <span class="string">""</span>,</div><div class="line">  <span class="attr">"pageCommentsCount"</span>: <span class="number">34</span>,</div><div class="line">  <span class="attr">"canComment"</span>: <span class="literal">true</span>,</div><div class="line">  <span class="attr">"snapshotUrl"</span>: <span class="string">""</span>,</div><div class="line">  <span class="attr">"slug"</span>: <span class="number">22591792</span>,</div><div class="line">  <span class="attr">"publishedTime"</span>: <span class="string">"2016-09-23T17:33:56+08:00"</span>,</div><div class="line">  <span class="attr">"url"</span>: <span class="string">"/p/22591792"</span>,</div><div class="line">  <span class="attr">"title"</span>: <span class="string">"知乎小管家工作笔记：不规范转载？不可以！"</span>,</div><div class="line">  <span class="attr">"lastestLikers"</span>:</div><div class="line">    [</div><div class="line">      &#123;</div><div class="line">        <span class="attr">"profileUrl"</span>: <span class="string">"https://www.zhihu.com/people/su-shu-95-98"</span>,</div><div class="line">        <span class="attr">"bio"</span>: <span class="string">"一个无法用一句话描述的人"</span>,</div><div class="line">        <span class="attr">"hash"</span>: <span class="string">"a6975d974fb22609a31dbbdec6f375e3"</span>,</div><div class="line">        <span class="attr">"uid"</span>: <span class="number">657690756534505472</span>,</div><div class="line">        <span class="attr">"isOrg"</span>: <span class="literal">false</span>,</div><div class="line">        <span class="attr">"description"</span>: <span class="string">"你说什么都对。"</span>,</div><div class="line">        <span class="attr">"slug"</span>: <span class="string">"su-shu-95-98"</span>,</div><div class="line">        <span class="attr">"avatar"</span>:</div><div class="line">          &#123;</div><div class="line">            <span class="attr">"id"</span>: <span class="string">"888129f4afd91083c0cfd156e6889438"</span>,</div><div class="line">            <span class="attr">"template"</span>: <span class="string">"https://pic1.zhimg.com/&#123;id&#125;_&#123;size&#125;.jpg"</span></div><div class="line">          &#125;,</div><div class="line">        <span class="attr">"name"</span>: <span class="string">"苏舒"</span></div><div class="line">      &#125;,</div><div class="line">    ],</div><div class="line">  <span class="attr">"summary"</span>: <span class="string">"&lt;img src=\"https://pic1.zhimg.com/v2-4f2228e8f8292ec30c373488afa2bd48_200x112.jpg\" data-rawwidth=\"920\" data-rawheight=\"638\" class=\"origin_image inline-img zh-lightbox-thumb\" data-original=\"https://pic1.zhimg.com/v2-4f2228e8f8292ec30c373488afa2bd48_r.jpg\"&gt;今天，小管家和大家分享一下站内「不规范转载」行为的处理情况。 年初我们发布了..."</span>,</div><div class="line">  <span class="attr">"reviewingCommentsCount"</span>: <span class="number">0</span>,</div><div class="line">  <span class="attr">"meta"</span>:</div><div class="line">    &#123;</div><div class="line">      <span class="attr">"previous"</span>:</div><div class="line">        &#123;</div><div class="line">          <span class="attr">"isTitleImageFullScreen"</span>: <span class="literal">false</span>,</div><div class="line">          <span class="attr">"rating"</span>: <span class="string">"none"</span>,</div><div class="line">          <span class="attr">"titleImage"</span>: <span class="string">"https://pic2.zhimg.com/517f47cc5269b57f26ea4a25f29d8505_r.jpg"</span>,</div><div class="line">          <span class="attr">"links"</span>:</div><div class="line">            &#123;</div><div class="line">              <span class="attr">"comments"</span>: <span class="string">"/api/posts/22434253/comments"</span></div><div class="line">            &#125;,</div><div class="line">          <span class="attr">"topics"</span>:</div><div class="line">            [</div><div class="line">              &#123;</div><div class="line">                <span class="attr">"url"</span>: <span class="string">"https://www.zhihu.com/topic/19550887"</span>,</div><div class="line">                <span class="attr">"id"</span>: <span class="string">"19550887"</span>,</div><div class="line">                <span class="attr">"name"</span>: <span class="string">"知乎社区"</span></div><div class="line">              &#125;,            </div><div class="line">            ],</div><div class="line">          <span class="attr">"href"</span>: <span class="string">"/api/posts/22434253"</span>,</div><div class="line">          <span class="attr">"excerptTitle"</span>: <span class="string">""</span>,</div><div class="line">          <span class="attr">"author"</span>:</div><div class="line">            &#123;</div><div class="line">              <span class="attr">"profileUrl"</span>: <span class="string">"https://www.zhihu.com/people/zhihuadmin"</span>,</div><div class="line">              <span class="attr">"bio"</span>: <span class="string">"欢迎反馈问题和建议！"</span>,</div><div class="line">              <span class="attr">"hash"</span>: <span class="string">"3d198a56310c02c4a83efb9f4a4c027e"</span>,</div><div class="line">              <span class="attr">"uid"</span>: <span class="number">53253479858176</span>,</div><div class="line">              <span class="attr">"isOrg"</span>: <span class="literal">false</span>,</div><div class="line">              <span class="attr">"description"</span>: <span class="string">""</span>,</div><div class="line">              <span class="attr">"slug"</span>: <span class="string">"zhihuadmin"</span>,</div><div class="line">              <span class="attr">"avatar"</span>:</div><div class="line">                &#123;</div><div class="line">                  <span class="attr">"id"</span>: <span class="string">"34bf96bf5584ac4b5264bd7ed4fdbc5a"</span>,</div><div class="line">                  <span class="attr">"template"</span>: <span class="string">"https://pic3.zhimg.com/&#123;id&#125;_&#123;size&#125;.jpg"</span></div><div class="line">                &#125;,</div><div class="line">              <span class="attr">"name"</span>: <span class="string">"知乎小管家"</span></div><div class="line">            &#125;,</div><div class="line">          <span class="attr">"column"</span>:</div><div class="line">            &#123;</div><div class="line">              <span class="attr">"slug"</span>: <span class="string">"zhihuadmin"</span>,</div><div class="line">              <span class="attr">"name"</span>: <span class="string">"知乎小管家说"</span></div><div class="line">            &#125;,</div><div class="line">          <span class="attr">"content"</span>: <span class="string">"题下发布相同回答；&lt;/p&gt;&lt;img src=\"https://pic2.zhimg.com/a86dbedbeb67a26b33252ee4e8e886a9_b.png\" data-rawwidth=\"469\" data-rawheight=\"348\" class=\"origin_image zh-lightbox-thumb\" width=\"469\" data-original=\"https://pic2.zhimg.com/a86dbedbeb67a26b33252ee4e8e886a9_r.png\"&gt;&lt;br&gt;"</span>,</div><div class="line">          <span class="attr">"state"</span>: <span class="string">"published"</span>,</div><div class="line">          <span class="attr">"sourceUrl"</span>: <span class="string">""</span>,</div><div class="line">          <span class="attr">"pageCommentsCount"</span>: <span class="number">0</span>,</div><div class="line">          <span class="attr">"canComment"</span>: <span class="literal">true</span>,</div><div class="line">          <span class="attr">"snapshotUrl"</span>: <span class="string">""</span>,</div><div class="line">          <span class="attr">"slug"</span>: <span class="number">22434253</span>,</div><div class="line">          <span class="attr">"publishedTime"</span>: <span class="string">"2016-09-13T17:34:29+08:00"</span>,</div><div class="line">          <span class="attr">"url"</span>: <span class="string">"/p/22434253"</span>,</div><div class="line">          <span class="attr">"title"</span>: <span class="string">"新版社区管理规范于今日试运行"</span>,</div><div class="line">          <span class="attr">"summary"</span>: <span class="string">"社区管理规范是知友共识的总结，也是社区健康发展的基石。近期，我们不断收到知友们反馈新的扰乱社区秩序的行为，如集赞爆照、点赞抽奖、评论区发布乱码、刷赞刷粉、恶意营销、回答隐藏淘宝链接..."</span>,</div><div class="line">          <span class="attr">"reviewingCommentsCount"</span>: <span class="number">0</span>,</div><div class="line">          <span class="attr">"meta"</span>:</div><div class="line">            &#123;</div><div class="line">              <span class="attr">"previous"</span>: <span class="literal">null</span>,</div><div class="line">              <span class="attr">"next"</span>: <span class="literal">null</span></div><div class="line">            &#125;,</div><div class="line">          <span class="attr">"commentPermission"</span>: <span class="string">"anyone"</span>,</div><div class="line">          <span class="attr">"commentsCount"</span>: <span class="number">0</span>,</div><div class="line">          <span class="attr">"likesCount"</span>: <span class="number">0</span></div><div class="line">        &#125;,</div><div class="line">      <span class="attr">"next"</span>: <span class="literal">null</span></div><div class="line">    &#125;,</div><div class="line">  <span class="attr">"commentPermission"</span>: <span class="string">"anyone"</span>,</div><div class="line">  <span class="attr">"commentsCount"</span>: <span class="number">34</span>,</div><div class="line">  <span class="attr">"likesCount"</span>: <span class="number">241</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<ul>
<li>isTitleImageFullScreen: 文章标题大图是否全屏</li>
<li>rating: ???评级</li>
<li>titleImage: 文章标题大图url(需要注意的是,titleImage的值有可能为空)，和头像一样，也可以组合不同的尺寸参数获取不同尺寸的图片</li>
<li>links: 链接信息<ul>
<li>comments: 评论获取地址</li>
</ul>
</li>
<li>reviewers: 复审人(在我请求的这么多次中，并没有成功获得过此项对应的值。不排除此项返回具体值的可能性。推测为creator类型。)</li>
<li>topics: 专栏话题信息<ul>
<li>url: 话题在知乎官网中的地址</li>
<li>id: 话题id</li>
<li>name: 话题名称</li>
</ul>
</li>
<li>titleImageSize:<ul>
<li>width 宽度</li>
<li>height 高度</li>
</ul>
</li>
<li>href: api请求地址</li>
<li>excerptTitle: 引用(摘录)标题</li>
<li>author:<ul>
<li>profileUrl: 知乎网的个人主页url</li>
<li>bio: 官网信息中的一句话描述</li>
<li>hash: hash值</li>
<li>uid: uid</li>
<li>isOrg: 是否为机构帐号</li>
<li>description: 描述</li>
<li>badge 徽章，即认证信息<ul>
<li>identity 官方帐号<ul>
<li>description 认证详情描述</li>
</ul>
</li>
<li>best_answerer 优秀回答者</li>
</ul>
</li>
<li>slug: slug</li>
<li>avatar: 头像信息<ul>
<li>id: id值，在拼接url时用到</li>
<li>template: url拼接模版</li>
</ul>
</li>
<li>name: 作者名称</li>
</ul>
</li>
<li>column: 所属专栏<ul>
<li>slug slug</li>
<li>name 专栏名称</li>
</ul>
</li>
<li>tipjarState: 打赏信息</li>
<li>content: HTML格式的内容信息详情</li>
<li>state: 文章状态，是否发布</li>
<li>sourceUrl: 源地址</li>
<li>pageCommentsCount: 评论数</li>
<li>canComment: 是否可以评论</li>
<li>snapshotUrl: 短网址?</li>
<li>slug: 文章的slug</li>
<li>publishedTime: 文章发表时间</li>
<li>url: url地址</li>
<li>title: 文章标题</li>
<li>lastestLikers: 最近点赞的用户<ul>
<li>profileUrl: 知乎网的个人主页url</li>
<li>bio: 官网信息中的一句话描述</li>
<li>hash: hash值</li>
<li>uid: uid</li>
<li>isOrg: 是否为机构帐号</li>
<li>description: 描述</li>
<li>slug: slug</li>
<li>avatar: 头像信息<ul>
<li>id: id值，在拼接url时用到</li>
<li>template: url拼接模版</li>
</ul>
</li>
<li>name: 作者名称</li>
</ul>
</li>
<li>summary”: 文章简要信息</li>
<li>reviewingCommentsCount: 审查中的评论数量</li>
<li>meta: meta<ul>
<li>previous 上一篇文章的信息，json结构和上面的内容相同</li>
<li>next 下一篇文章的信息</li>
</ul>
</li>
<li>commentPermission: 评论权限</li>
<li>commentsCount: 评论数量</li>
<li>likesCount: 赞的数量</li>
</ul>
<p>在认证信息中，目前只发现有两种类型，identity官方帐号和best_answerer优秀回答者，由于知乎小管家只是官方帐号，并不是优秀回答者，这里选取优秀回答者<a href="https://www.zhihu.com/people/aton" target="_blank" rel="external">苏莉安</a>的信息进行分析。<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">"badge":</div><div class="line">  &#123;</div><div class="line">    "identity": null,</div><div class="line">    "best_answerer":</div><div class="line">      &#123;</div><div class="line">        "topics": [],</div><div class="line">        "description": "优秀回答者"</div><div class="line">      &#125;</div><div class="line">  &#125;</div></pre></td></tr></table></figure></p>
<ul>
<li>identity 官方帐号</li>
<li>best_answerer 优秀回答者<ul>
<li>topics 话题</li>
<li>description 描述信息</li>
</ul>
</li>
</ul>
<h4 id="获取评论列表"><a href="#获取评论列表" class="headerlink" title="获取评论列表"></a>获取评论列表</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">https://zhuanlan.zhihu.com/api/posts/文章slug/comments?limit=数量限制&amp;offset=偏移量</div></pre></td></tr></table></figure>
<p>这里拼接url的方法和获取文章列表时的方法时一样的，不再赘述。例如获取文章slug为22591792的前30条评论。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">https://zhuanlan.zhihu.com/api/posts/22591792/comments?limit=30&amp;offset=0</div></pre></td></tr></table></figure></p>
<p>获取到的信息为<br><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">[</div><div class="line">  &#123;</div><div class="line">    <span class="attr">"content"</span>: <span class="string">"小管家棒棒哒！支持~"</span>,</div><div class="line">    <span class="attr">"liked"</span>: <span class="literal">false</span>,</div><div class="line">    <span class="attr">"href"</span>: <span class="string">"/api/posts/22591792/comments/169039008"</span>,</div><div class="line">    <span class="attr">"inReplyToCommentId"</span>: <span class="number">0</span>,</div><div class="line">    <span class="attr">"reviewing"</span>: <span class="literal">false</span>,</div><div class="line">    <span class="attr">"author"</span>:</div><div class="line">      &#123;</div><div class="line">        <span class="attr">"profileUrl"</span>: <span class="string">"https://www.zhihu.com/people/fei-xiao-gui"</span>, <span class="attr">"bio"</span>: <span class="string">"心中有爱 脚下有风 所以我跑得快~"</span>,</div><div class="line">        <span class="attr">"hash"</span>: <span class="string">"41cd5c7249081389da3a523b3cb0629b"</span>, <span class="attr">"uid"</span>: <span class="number">28048833380352</span>,</div><div class="line">        <span class="attr">"isOrg"</span>: <span class="literal">false</span>,</div><div class="line">        <span class="attr">"description"</span>: <span class="string">"品学兼优~"</span>,</div><div class="line">        <span class="attr">"slug"</span>: <span class="string">"fei-xiao-gui"</span>,</div><div class="line">        <span class="attr">"avatar"</span>:</div><div class="line">          &#123;</div><div class="line">            <span class="attr">"id"</span>: <span class="string">"a061ebdd61bb57c81b3206dda51418fc"</span>, <span class="attr">"template"</span>: <span class="string">"https://pic1.zhimg.com/&#123;id&#125;_&#123;size&#125;.jpg"</span></div><div class="line">          &#125;,</div><div class="line">        <span class="attr">"name"</span>: <span class="string">"菲小桂"</span></div><div class="line">      &#125;,</div><div class="line">    <span class="attr">"createdTime"</span>: <span class="string">"2016-09-23T17:35:54+08:00"</span>,</div><div class="line">    <span class="attr">"featured"</span>: <span class="literal">false</span>,</div><div class="line">    <span class="attr">"id"</span>: <span class="number">169039008</span>,</div><div class="line">    <span class="attr">"likesCount"</span>: <span class="number">1</span></div><div class="line">  &#125;</div><div class="line">]</div></pre></td></tr></table></figure></p>
<ul>
<li>content: 评论内容</li>
<li>liked: 是否给这条评论点过赞</li>
<li>href: 该条评论的详情地址</li>
<li>inReplyToCommentId: 所回复的评论的id</li>
<li>reviewing: 是否正在被审查中</li>
<li>author: 评论的作者<ul>
<li>profileUrl: 知乎网的个人主页url</li>
<li>bio: 官网信息中的一句话描述</li>
<li>hash: hash值</li>
<li>uid: uid</li>
<li>isOrg: 是否为机构帐号</li>
<li>description: 描述</li>
<li>slug: slug</li>
<li>avatar: 头像信息<ul>
<li>id: id值，在拼接url时用到</li>
<li>template: url拼接模版</li>
</ul>
</li>
<li>name: 作者名称</li>
</ul>
</li>
<li>createdTime: 评论创建时间</li>
<li>featured: ???是否为精彩评论</li>
<li>id: 该条评论的id</li>
<li>likesCount: 获得的赞的数量</li>
</ul>
<p>对他人评论的回复数据有些许的不同，inReplyToCommentId的值不为0，json数据中增加了inReplyToUser字段，内容为author类型。这里不再具体分析。</p>
<h4 id="获取点赞信息"><a href="#获取点赞信息" class="headerlink" title="获取点赞信息"></a>获取点赞信息</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">https://zhuanlan.zhihu.com/api/posts/22591792/likers?limit=获取数量&amp;offset=偏移量</div></pre></td></tr></table></figure>
<p>例如，获取文章slug为22591792的最新20个点赞的人的信息，author类型。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">https://zhuanlan.zhihu.com/api/posts/22591792/likers?limit=20&amp;offset=0</div></pre></td></tr></table></figure></p>
<p>url的拼接方法和上面获取文章信息时方法相同，不再赘述。</p>
<p>最后还是放上自己的示例项目地址：<br><a href="https://github.com/TonnyL/zhuanlan" target="_blank" rel="external">知乎专栏Android</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java中类成员的初始化]]></title>
      <url>http://tonnyl.github.io/2016/05/12/Java%E4%B8%AD%E7%B1%BB%E6%88%90%E5%91%98%E7%9A%84%E5%88%9D%E5%A7%8B%E5%8C%96/</url>
      <content type="html"><![CDATA[<p>如果一个类的基本成员变量，在没有进行初始化的情况下，那么它的默认值是多少呢？<br><a id="more"></a></p>
<p>在Java中，类的某个成员变量是基本数据类型，即使没有进行初始化，Java也会确保它获得一个默认值。OK, talk is cheap, show me the code:</p>
<pre><code>public class InitialTest {

    private int anInt;
    private long aLong;
    private short aShort;
    private char aChar;
    private float aFloat;
    private double aDouble;
    private boolean aBoolean;
    private byte aByte;
    private InitialTest reference;

    public static void main(String args[]){

        InitialTest initialTest = new InitialTest();
        System.out.println(&quot;Boolean &quot; + initialTest.aBoolean);
        System.out.println(&quot;Byte &quot; + initialTest.aByte);
        System.out.println(&quot;Char &quot; + initialTest.aChar);
        System.out.println(&quot;Short &quot; +initialTest.aShort);
        System.out.println(&quot;Int &quot; + initialTest.anInt);
        System.out.println(&quot;Long &quot; + initialTest.aLong);
        System.out.println(&quot;Float &quot; + initialTest.aFloat);
        System.out.println(&quot;Double &quot; + initialTest.aDouble);
        System.out.print(&quot;Reference &quot; + initialTest.reference);

    }

}
</code></pre><p>我们编写了一个简单的测试类，可以很轻松的看出作用是什么。下面是运行结果</p>
<pre><code>Boolean false
Byte 0
Char  
Short 0
Int 0
Long 0
Float 0.0
Double 0.0
Reference null
</code></pre><p>结果已经很明显了。如下表所示：</p>
<table>
<thead>
<tr>
<th style="text-align:left">基本类型</th>
<th style="text-align:left">默认值</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">boolean</td>
<td style="text-align:left">false</td>
</tr>
<tr>
<td style="text-align:left">char</td>
<td style="text-align:left">‘\u0000’(null)</td>
</tr>
<tr>
<td style="text-align:left">byte</td>
<td style="text-align:left">(byte)0</td>
</tr>
<tr>
<td style="text-align:left">short</td>
<td style="text-align:left">(short)0</td>
</tr>
<tr>
<td style="text-align:left">int</td>
<td style="text-align:left">0</td>
</tr>
<tr>
<td style="text-align:left">long</td>
<td style="text-align:left">0</td>
</tr>
<tr>
<td style="text-align:left">float</td>
<td style="text-align:left">0.0</td>
</tr>
<tr>
<td style="text-align:left">double</td>
<td style="text-align:left">0.0</td>
</tr>
<tr>
<td style="text-align:left">reference</td>
<td style="text-align:left">null</td>
</tr>
</tbody>
</table>
<p>当变量作为类的成员使用时，Java才会确保给定默认值，以确保那些基本成员变量得到初始化(C++中没有此功能),防止程序产生错误。但是，这些初始值对于你的程序可能是不正确的，所以最好明确的对变量进行初始化。</p>
<p>但是上述确保初始化的方法并不适用于“局部变量”(即非类成员)，因此当我把代码改成下面的样子时，IDE就会提示错误了：</p>
<pre><code>public static void main(String args[]){
    InitialTest initialTest = new InitialTest();
    System.out.println(&quot;Boolean &quot; + initialTest.aBoolean);
    System.out.println(&quot;Byte &quot; + initialTest.aByte);
    System.out.println(&quot;Short &quot; +initialTest.aShort);
    System.out.println(&quot;Char &quot; + initialTest.aChar);
    System.out.println(&quot;Int &quot; + initialTest.anInt);
    System.out.println(&quot;Long &quot; + initialTest.aLong);
    System.out.println(&quot;Float &quot; + initialTest.aFloat);
    System.out.println(&quot;Double &quot; + initialTest.aDouble);
    System.out.print(&quot;Reference &quot; + initialTest.reference);
    int i;
    System.out.println(&quot;another int is &quot; + i);
}
</code></pre><p>IDEA提示错误：</p>
<pre><code>Variable &apos;i&apos; might not have been initialized
</code></pre><p>如果不是在IDE中编辑的，那么在编译的时候也会提示你这个错误，告诉你这个变量没有进行初始化。C++编辑器会对未初始化变量给予一个警告，而非错误。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Activity的四种启动模式]]></title>
      <url>http://tonnyl.github.io/2016/05/11/Activity%E7%9A%84%E5%9B%9B%E7%A7%8D%E5%90%AF%E5%8A%A8%E6%A8%A1%E5%BC%8F/</url>
      <content type="html"><![CDATA[<p>浅析Android中Activity的四种启动模式:standard,singleTop,singleTask,singleInstance<br><a id="more"></a></p>
<p>启动模式一共有上述的四种，可以在AndroidManifest.xml文件中通过给<ctivity>标签指定android:launchMode属性来选择启动模式。</ctivity></p>
<h3 id="standard"><a href="#standard" class="headerlink" title="standard"></a>standard</h3><p>standard是Activity默认的启动模式，在不进行显示指定的情况下，所有Activity都会自动的使用这种模式。Android使用返回栈来管理Activity,在standard模式下，每当启动一个新的Activity,它就会在返回栈中入栈，并处于栈顶的位置。对于使用standard模式的Activity,系统不会在乎这个Activity是否已经在返回栈中，每次启动都会创建一个新的Activity实例。</p>
<p>现在通过实践来体会一下standard模式，首先是新建一个ActivityTest项目，修改MainActivity的onCreate()中代码，如下所示：</p>
<pre><code>@Override
protected void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);

    Log.d(&quot;Mainactivity&quot;,this.toString());

    Button btn1 = (Button) findViewById(R.id.btn1);

    btn1.setOnClickListener(new View.OnClickListener() {
        @Override
        public void onClick(View v) {
            Intent intent = new Intent(MainActivity.this,MainActivity.class);
            startActivity(intent);
        }
    });

}
</code></pre><p>代码很简单，在MainActivity的基础上启动MainActivity，从逻辑上讲没什么意义，不过我们在于研究standard模式，因此我们也就不去追究实际的用途了。另外我们还在onCreate()中添加了一句打印日志信息，打印当前Activity的实例。</p>
<p>现在运行程序，然后再MainActivity界面连续点击两次按钮，观察LogCat中打印的日志信息。</p>
<pre><code>MainActivity: com.marktony.applicationtest.MainActivity@5e658bb
MainActivity: com.marktony.applicationtest.MainActivity@cfae411
MainActivity: com.marktony.applicationtest.MainActivity@b0e0bac
</code></pre><p>从打印信息中可以很清楚的看到，每次点击按钮就会创建一个新的MainActivity的实例，此时返回栈中也会存在三个MainActivity的实例，因此想要完全退出应用，必须点击三次返回键。</p>
<h3 id="singleTop"><a href="#singleTop" class="headerlink" title="singleTop"></a>singleTop</h3><p>在某些情况下，你可能会觉得standard模式不太合理。activity明明已经在栈顶了，为什么再次启动时还要创建一个新的Activity实例呢？这时singleTop模式就派上用场了。当Activity的启动模式被指定为singleTop时，在启动Activity时如果发现返回栈的栈顶已经是该Activity，则可以认为直接使用它，不创建新的实例。</p>
<p>下面看实例,修改AndroidManifest.xml中的MainActivity的启动模式为singleTop:</p>
<pre><code>&lt;activity android:name=&quot;.MainActivity&quot;
    android:launchMode=&quot;singleTop&quot;&gt;
    &lt;intent-filter&gt;
        &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt;

        &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;
    &lt;/intent-filter&gt;
&lt;/activity&gt;
</code></pre><p>重新运行程序，通过LogCat查看日志信息，我们可以看到已经创建了一个新的Activity实例。</p>
<pre><code>MainActivity: com.marktony.applicationtest.MainActivity@5e658bb
</code></pre><p>之后不管点击多少次按钮，都不会有新的打印信息出现，因为目前Activity已经处于返回栈的栈顶，每当想要再启动一个MainActivity时都会直接使用栈顶的Activity，因此MainActivity也只会有一个实例，仅按一次返回键即可退出程序。</p>
<p>不过当MainActivity不在栈顶时，这是再启动MainActivity，还是会创建新的实例，下面来实验一下。修改MainActivity中的代码，如下所示：</p>
<pre><code>@Override
protected void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    setContentView(R.layout.activity_main);

    Log.d(&quot;MainActivity&quot;,this.toString());

    Button btn1 = (Button) findViewById(R.id.btn1);

    btn1.setOnClickListener(new View.OnClickListener() {
        @Override
        public void onClick(View v) {
            Intent intent = new Intent(MainActivity.this,SecondActivity.class);
            startActivity(intent);
        }
    });
}
</code></pre><p>这次我们点击按钮启动的是SecondActivity。然后修改SecondActivity中onCreate()方法中的代码，如下所示：</p>
<pre><code>@Override
protected void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    setContentView(R.layout.activity_second);

    Button btn2 = (Button) findViewById(R.id.btn2);
    btn2.setOnClickListener(new View.OnClickListener() {
        @Override
        public void onClick(View v) {
            Intent intent = new
            Intent(SecondActivity.this,MainActivity.class);
            startActivity(intent);
        }
    });
}
</code></pre><p>我们在SecondActivity中的按钮的点击事件中又加入了启动MainActivity的代码。现在重新运行程序，在MainActivity界面点击按钮进入SecondActivity，然后在SecondActivity界面点击按钮，又会重新进入到MainActivity。查看LogCat中的信息：</p>
<pre><code>MainActivity: com.marktony.applicationtest.MainActivity@eb60bcf
SecondActivity: com.marktony.applicationtest.SecondActivity@5cf7342
MainActivity: com.marktony.applicationtest.MainActivity@a360333
</code></pre><p>可以看到系统创建了两个不同的MainActivity,这是由于在SecondActivity中再次启动Activity时，栈顶的Activity已经变成了SecondActivity，因此会新建一个新的MainActivity。现在按下back键就会返回到SecondActivity,再次按下back键，又会回到MainActivity,再按一次back键才会退出程序。</p>
<h3 id="singleTask"><a href="#singleTask" class="headerlink" title="singleTask"></a>singleTask</h3><p>使用singleTask模式可以很好的解决重复创建栈顶Activity的问题，但是正如你看到的，如果该Activity并没有处于栈顶的位置，还是可能创建多个Activity实例的。那么有没有方法可以让Activity在整个应用程序的上下文中指存在一个实例呢？<br>这就要借助singleTask模式来实现了。当Activity的启动模式指定为singleTask，每次启动该Activity时系统首先会在返回栈中检查是否存在该Activity的实例，如果发现已经存在则直接使用该实例，并把在这个Activity之上的所有Activity统统出栈，如果没有发现就会创建一个新的实例。<br>下面通过代码来直观的理解一下。修改AndroidManifest.xml文件中MainActivity的启动模式：</p>
<pre><code>&lt;activity android:name=&quot;.MainActivity&quot;
    android:launchMode=&quot;singleTask&quot;&gt;
    &lt;intent-filter&gt;
        &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt;

        &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;
    &lt;/intent-filter&gt;
&lt;/activity&gt;
</code></pre><p>然后在MainActivity中添加onRestart()方法，并打印日志：</p>
<pre><code>@Override
protected void onRestart() {
    super.onRestart();
    Log.d(&quot;MainActivity&quot;,&quot;onStart&quot;);
}
</code></pre><p>最后在SecondActivity中添加onDestroy()方法，并打印日志：</p>
<pre><code>@Override
protected void onDestroy() {
    super.onDestroy();
    Log.d(&quot;SecondActivity&quot;,&quot;onDestroy&quot;);
}
</code></pre><p>现在重新运行程序，在MainActivity界面点击按钮进入SecondActivity，然后在SecondActivity界面点按钮，又会重新进入到MainActivity。查看LogCat中的日志信息：</p>
<pre><code>MainActivity: com.marktony.applicationtest.MainActivity@f2c42cf
SecondActivity: com.marktony.applicationtest.SecondActivity@81ea653
MainActivity: onStart
SecondActivity: onDestroy
</code></pre><p>从打印信息中可以看出，在SecondActivity中启动MainActivity时，会发现返回栈里已经存在一个MainActivity的实例，并且是在SecondActivity的下面，于是SecondActivity会从返回栈中出栈，而MainActivity重新成为了栈顶Activity，因此MainActivity的onRestart()方法和SecondActivity的onDestroy()方法会得到执行。现在返回栈中只剩下一个MainActivity的实例了，按一下back键就可以退出程序。</p>
<h3 id="singleInstance"><a href="#singleInstance" class="headerlink" title="singleInstance"></a>singleInstance</h3><p>singleInstance应该是四种启动模式中最特殊也最复杂的一种了。不同于以上三种启动模式，指定为singleInstance的Activity会启用一个新的返回栈来管理这个Activity(其实如果singleTask模式指定了不同的taskAffinity，也会启动一个新的返回栈)。那么这么做有什么意义呢？假设我们的程序中有一个Activity是允许其他程序调用的，如果我们想实现其他程序和我们的程序可以共享这个Activity的实例，应该如何实现呢？使用前面三种启动模式肯定是无法实现的，因为每个程序都会有自己的返回栈，同一个Activity在不同的返回栈中入栈时必然是创建新的实例。而使用singleInstance模式就可以解决这个问题，在这种模式下会有一个单独的返回栈来管理这个Activity，不管是那个应用程序来访问这个Activity，都共用的同一个返回栈，也就解决了共享Activity实例的问题。</p>
<p>OK,talk is cheap,show me the code,我们还是来实践一下。修改AndroidManifest.xml中SecondActivity的启动模式:</p>
<pre><code>&lt;activity android:name=&quot;.SecondActivity&quot;
    android:launchMode=&quot;singleInstance&quot;&gt;
    &lt;intent-filter&gt;
        &lt;action android:name=&quot;com.marktony.applicatiointest.ACTION_START&quot; /&gt;
        &lt;category android:name=&quot;android.intent.category.DEFAULT&quot; /&gt;
        &lt;category android:name=&quot;com.marktony.applicationtest.MY_CATEGORY&quot; /&gt;
    &lt;/intent-filter&gt;
&lt;/activity&gt;
</code></pre><p>我们先将SecondActivity的启动模式指定为singleInstance，然后修改MainActivity中onCreate()方法的代码:</p>
<pre><code>@Override
protected void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    setContentView(R.layout.activity_main);

    Log.d(&quot;MainActivity&quot;,&quot;task id is &quot; + getTaskId());

    Button btn1 = (Button) findViewById(R.id.btn1);
    btn1.setOnClickListener(new View.OnClickListener() {
        @Override
        public void onClick(View v) {
            Intent intent = new Intent(MainActivity.this,SecondActivity.class);
            startActivity(intent);
        }
    });

}
</code></pre><p>在onCreate()方法中打印了当前返回栈的id。然后修改SecondActivity中onCreate()方法的代码：</p>
<pre><code>@Override
protected void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    setContentView(R.layout.activity_second);

    Log.d(&quot;SecondActivity&quot;,&quot;task id is &quot; + getTaskId());

    Button btn2 = (Button) findViewById(R.id.btn2);
    btn2.setOnClickListener(new View.OnClickListener() {
        @Override
        public void onClick(View v) {
            Intent intent = new Intent(SecondActivity.this,ThirdActivity.class);
            startActivity(intent);
        }
    });
}
</code></pre><p>同样在onCreate()方法中打印了当前返回栈的id，然后又修改了按钮点击事件的代码，用于启动ThirdActivity。最后修改ThirdActivity中onCreate()方法的代码：</p>
<pre><code>@Override
protected void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    setContentView(R.layout.activity_third);

    Log.d(&quot;ThirdActivity&quot;,&quot;task id is &quot; + getTaskId());
}
</code></pre><p>仍然是在onCreate()方法中打印了当前返回栈的id。现在重新运行程序，在MainActivity界面中点击按钮进入到SecondActivity，然后在SecondActivity中点击按钮进入到ThirdActivity。查看LogCat中的打印信息：</p>
<pre><code>MainActivity: task id is 403
SecondActivity: task id is 404
ThirdActivity: task id is 403
</code></pre><p>可以看到，SecondActivity的task id不同于MainActivity和ThirdActivity，这说明SecondActivity确实是存放在一个单独的返回栈中的，而且这个栈中只有SecondActivity这一个Activity。</p>
<p>然后我们按下back键进行返回，你会发现ThirdActivity竟然返回了MainActivity，再按下back键又会返回到SecondActivity，再按下返回键会退出程序，这是为什么呢？<br>其实原理很简单，由于MainActivity和ThirdActivity是存放在同一个返回栈里的，当在ThirdActivity的界面按下返回键，ThirdActivity会从返回栈中出栈，那么MainActivity就成为了栈顶Activity显示在界面上，因此也就出现了从ThirdActivity直接返回到MainActivity的情况。然后在MainActivity再次按下返回键，这是当前的返回栈已经空了，于是就显示了另一个返回栈的栈顶Activity，及SecondActivity。最后再次按下back键，这是所有的返回栈均被清空了，也就自然的退出了程序。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[进程与线程]]></title>
      <url>http://tonnyl.github.io/2016/05/02/%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B/</url>
      <content type="html"><![CDATA[<h2 id="进程与线程之间的关系"><a href="#进程与线程之间的关系" class="headerlink" title="进程与线程之间的关系"></a>进程与线程之间的关系</h2><a id="more"></a>
<h4 id="什么是进程？"><a href="#什么是进程？" class="headerlink" title="什么是进程？"></a>什么是进程？</h4><p>进程是具有一定独立功能的程序关于某个数据集合上的一次运行活动，进程是系统进行资源分配和调度的独立单位。进程拥有一个完整的虚拟空间地址，并不依赖线程而独立存在。</p>
<h4 id="什么是线程？"><a href="#什么是线程？" class="headerlink" title="什么是线程？"></a>什么是线程？</h4><p>线程是进程的一个实体，是cpu调度和分配的基本单位。它是进程更小的能独立运行的基本单位。线程本身并不拥有系统资源，运行是只是暂用一些计数器、寄存器和栈。</p>
<h4 id="进程与线程之间的关系-1"><a href="#进程与线程之间的关系-1" class="headerlink" title="进程与线程之间的关系"></a>进程与线程之间的关系</h4><p>简单来说，一个程序至少拥有一个进程，而一个进程至少拥有一个线程。<br>一个线程可以创建和撤销另外一个线程，同一个进程中可以有多个线程并发的执行。</p>
<p>线程更加接近于执行体的概念，它可以同进程中的其他线程共享数据，但是拥有独立的栈空间，拥有独立的执行序列。</p>
<h4 id="进程与线程的区别"><a href="#进程与线程的区别" class="headerlink" title="进程与线程的区别"></a>进程与线程的区别</h4><p>进程与线程的主要区别在于它们是不同的操作系统资源管理方式。进程有独立的地址空间，一个进程崩溃之后，在保护模式对其他进程没有影响，线程只是进程的不同执行路径。线程有自己独立的堆栈和局部变量，但是没有独立的地址空间，一个线程死掉那么整个进程也就死掉了，所以多进程的应用要比多线程的应用更加健壮。但是进程在切换时耗费的资源也比较多，效率也要更差，所以在并发性要求高又要共享变量数据，只能靠线程，而不是进程。</p>
<p>在执行过程中，每个独立的线程有一个程序运行的入口、顺序执行序列和程序的出口。但是线程不能独立执行，必须依存在应用程序中，由应用程序提供多线程执行控制。</p>
<p>从逻辑上看，多线程的意义在于在一个应用程序当中，有多个执行部分可以同时执行。但是操作系统并没有将多个线程看作多个独立的应用，来实现进程的调度和管理以及资源分配。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[ANR]]></title>
      <url>http://tonnyl.github.io/2016/05/01/ANR/</url>
      <content type="html"><![CDATA[<p>浅谈Android开发中的ANR现象<br><a id="more"></a></p>
<h3 id="什么是ANR"><a href="#什么是ANR" class="headerlink" title="什么是ANR"></a>什么是ANR</h3><p>ANR,Application Not Responding,即程序未响应。发生ANR时，系统会显示一个dialog，提示用户出现了ANR，用户可以选择“等待”，或者是“强制关闭”，结束应用。ANR同崩溃一样，是在开发过程中应该避免的。</p>
<h3 id="什么会触发ANR："><a href="#什么会触发ANR：" class="headerlink" title="什么会触发ANR："></a>什么会触发ANR：</h3><ul>
<li>主线程被IO操作阻塞。（文档中特别强调:<strong>you should not perform the work on the UI thread(不要在UI线程中进行IO操作)</strong>）。</li>
<li>主线程中存在耗时的操作。</li>
<li>主线程中错误操作。如Thread.wait()或Thread.sleep()等。</li>
</ul>
<p>在Android中，应用程序的响应是受到Activity Manager 和 Window Manageer系统服务的。一旦出现以下情况，Android系统就会展示dialog：</p>
<ul>
<li>5秒内没有相应触摸操作。(No response to an input event (such as key press or screen touch events) within 5 seconds.)</li>
<li>广播接收器在10内没有执行完成。(A BroadcastReceiver hasn’t finished executing within 10 seconds.)</li>
</ul>
<h3 id="怎样避免ANR"><a href="#怎样避免ANR" class="headerlink" title="怎样避免ANR"></a>怎样避免ANR</h3><p>Android应用通常是完全运行在UI线程(<code>UI Thread</code>)或者说主线程(<code>Main Thread</code>)中。也就是说，你在UI线程中进行的任何长耗时操作都有可能触发ANR。因此，在主线程中的任何操作都应该尽可能快的完成。</p>
<ul>
<li>在Activity生命周期中的关键方法，例如onCreate()和onResume()中，完成尽可能少的工作。</li>
<li>使用AsyncTask处理耗时操作(网络请求和数据操作等。)</li>
<li>如果使用了Thread或者HandlerThread,确保主线程不会在等待工作线程完成时被阻塞，也就是不会触发Thread.wait()或Thread.sleep()，应该使用Handler处理工作线程的结果。</li>
<li>在BroadcastReceiver中完成那些小而散(small,discrete)的工作，而不是那些长耗时操作或计算的工作，如果需要，应该交给IntentService去完成。</li>
</ul>
<h3 id="技巧提高"><a href="#技巧提高" class="headerlink" title="技巧提高"></a>技巧提高</h3><p>通常，100至200ms是用户认为应用运行缓慢的阀值。下面是一些额外的tips，可以使应用避免ANR和及时响应用户：</p>
<ul>
<li>如果应用正在后台处理用户的输入，那么，处理的进度应该告知用户处理的进度。可以在UI中使用 <strong>ProgressBar</strong>。</li>
<li>特别的，如果是游戏应用的话，计算工作应该在工作进程(Worker thread)中完成。</li>
<li>如果在初始化中需要进行耗时操作，可以考虑使用欢迎页(splash screen)或者提示用户正在尽快加载，同时显示加载进度信息。这样，用户才不会认为你的应用停滞了(frozen)、</li>
<li>使用Systrace和Traceview来定位应用中响应用户的瓶颈的位置。</li>
</ul>
<p>文档地址：<a href="!http://developer.android.com/training/articles/perf-anr.html">Android Developer</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[知乎小报开发总结]]></title>
      <url>http://tonnyl.github.io/2016/04/28/zhihudaily/</url>
      <content type="html"><![CDATA[<p>总结在开发知乎小报的过程中遇到的问题和相应的解决方法,以及分享开发过程中的一些心得体会<br><a id="more"></a></p>
<h2 id="知乎小报开发总结"><a href="#知乎小报开发总结" class="headerlink" title="知乎小报开发总结"></a>知乎小报开发总结</h2><p>总结在知乎小报开发的工程中遇到的问题以及相关的解决办法。</p>
<p>1.Intent导致的ActivityNotFoundException</p>
<p>无法找到对应的activity，这个异常在使用Intent启动一些系统级隐式的activity时可能会出现，例如短信、邮件、打开相机等，（还有手机没有邮件、短信app？当然有了！）如果不对这个异常进行处理的话，应用就会直接Crash。</p>
<pre><code>Uri uri = Uri.parse(&quot;market://details?id=&quot;+getPackageName());
Intent intent = new Intent(Intent.ACTION_VIEW,uri);
intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
startActivity(intent);
</code></pre><p>这个异常在开发简单翻译的过程就曾经遇到过。</p>
<ul>
<li><p>方法1: 最佳解决方案–&gt;在发出这个隐式Intent之前调用resolveActivity做检查</p>
<pre><code>Intent intent = new Intent(Intent.ACTION_XXX);
ComponentName componentName = intent.resolveActivity(getPackageManager());
if(componentName != null) {
String className = componentName.getClassName();
}
</code></pre></li>
<li><p>方法2：使用try-catch捕获这个异常。</p>
<pre><code>try{
// to start a mail activity code
} catch (android.content.ActivityNotFoundException ex){
// catch Exception
Snackbar.make(view, &quot;No mail app found&quot;,Snackbar.LENGTH_SHORT).show();
}
</code></pre></li>
</ul>
<p>2.WebView无图模式的实现</p>
<p>Android WebView中实现了一个方法</p>
<pre><code>webView.getSettings().setBlockNetworkImage(boolean config)
</code></pre><p>官方文档解释为：</p>
<pre><code>Gets whether the WebView does not load image resources from the network.
</code></pre><p>当config为true时，不加载图片，反之加载图片，而且是当url加载完成时才开始加载。</p>
<p>3.接口实现RecyclerView item的点击事件<br>RecyclerView是Google在v7包中新增的一种控件，用于代替ListView,不过它并没有基本的点击事件，所以需要我们自己为item定义点击事件。</p>
<p>首先需要自定义接口</p>
<pre><code>public interface OnRecyclerViewOnClickListener {
    void OnItemClick(View v,int position);
}
</code></pre><p>在适配器中定义接口变量</p>
<pre><code>private OnRecyclerViewOnClickListener mListener;
</code></pre><p>暴露接口</p>
<pre><code>public void setItemClickListener(OnRecyclerViewOnClickListener listener){
    this.mListener = listener;
}
</code></pre><p>然后在onCreateViewHolder中注册点击事件</p>
<pre><code>@Override
public LatestItemViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {
    View view = inflater.inflate(R.layout.latest_item_layout,parent,false);
    LatestItemViewHolder holder = new LatestItemViewHolder(view,mListener);
    return holder;
}
</code></pre><p>在ViewHolder中设置</p>
<pre><code>public class LatestItemViewHolder extends RecyclerView.ViewHolder implements View.OnClickListener {
    private OnRecyclerViewOnClickListener listener;
    private CardView item;

    public LatestItemViewHolder(View itemView,OnRecyclerViewOnClickListener listener) {
        super(itemView);

        item = (CardView) itemView.findViewById(R.id.card_view_item);
        this.listener = listener;
        itemView.setOnClickListener(this);
    }

    @Override
    public void onClick(View v) {
        if (listener != null){
            listener.OnItemClick(v,getLayoutPosition());
        }
    }
}
</code></pre><p>在Activity或者Fragment中使用</p>
<pre><code>adapter = new LatestPostAdapter(getActivity(),list);
rvLatestNews.setAdapter(adapter);
adapter.setItemClickListener(new OnRecyclerViewOnClickListener() {
    @Override
    public void OnItemClick(View v, int position) {
        // write code
    }
});
</code></pre><p>4.横屏下Crash<br>由于在fragment中使用了RecyclerView，当然也就涉及到了Adapoter的使用。由于我在Adapter的构造函数中传入了Context,这直接导致了横屏下直接崩溃。</p>
<pre><code>public class LatestPostAdapter extends RecyclerView.Adapter&lt;LatestPostAdapter.LatestItemViewHolder&gt; {
// some code
public LatestPostAdapter(Context context, List&lt;LatestPost&gt; list){
      this.context = context;
      this.list = list;
      this.inflater = LayoutInflater.from(context);
  }
}
</code></pre><p>我们不应该保存那些依赖Activity的数据，比如Drawable，Adapter，View或者任何与Context相关联的数据。因为上一个Activity已经没有了，如果你还要保持这些资源的引用，可能导致资源泄露。</p>
<p>解决的方法</p>
<ul>
<li>1.简单粗暴型 直接禁止横屏，当然这只是适用于极少数的情况。可以在manifest文件中对应的activity配置：</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">android:screenOrientation="portrait"</div><div class="line">android:screenOrientation="landscape"</div></pre></td></tr></table></figure>
<p>或者在Java代码中处理</p>
<pre><code>setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE);
setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);  
</code></pre><ul>
<li><p>2.在横屏时做相应的处理。<br>首先在manifest.xml文件中配置屏幕方向改变时不需要重新载入。</p>
  <!--configChanges参数的作用是不让activity重启
  3.2之前的sdk只需要配置前面两个值:keyboardHidden|orientation
  3.2之后的sdk必须配置三个值keyboardHidden|orientation|screensize
  -->
  <activity android:name=".UI.Activities.MainActivity" android:label="@string/app_name" android:configchanges="keyboardHidden|orientation|screenSize" android:theme="@style/AppTheme.NoActionBar">

</activity></li>
</ul>
<p>然后在activity中重写方法</p>
<pre><code>@Override
public void onConfigurationChanged(Configuration newConfig) {
    super.onConfigurationChanged(newConfig);
}
</code></pre><p>5.toolbar中小箭头(返回上级activity)<br>好吧，这是个不算高级的问题，但是确实困扰了我一段时间。首先是怎样显示这个箭头。</p>
<pre><code>private Toolbar toolbar;
toolbar = (Toolbar) findViewById(R.id.toolbar);
setSupportActionBar(toolbar);
// 关键
getSupportActionBar().setDisplayHomeAsUpEnabled(true);
</code></pre><p>怎样监听小箭头的点击事件呢？</p>
<p>由于箭头是位于toolbar中的控件，可以联想到应该是和onOptionsItemSelected方法有关。</p>
<pre><code>@Override
public boolean onOptionsItemSelected(MenuItem item) {

   int id = item.getItemId();

   // 小箭头的id为android.R.id.home
   if (id == android.R.id.home){
       onBackPressed();
   }

   return super.onOptionsItemSelected(item);
 }
</code></pre>]]></content>
    </entry>
    
  
  
</search>
